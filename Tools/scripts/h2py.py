#! /usr/bin/env python3

# Read #define's oraz translate to Python code.
# Handle #include statements.
# Handle #define macros przy one argument.
# Anything that isn't recognized albo doesn't translate into valid
# Python jest ignored.

# Without filename arguments, acts jako a filter.
# If one albo more filenames are given, output jest written to corresponding
# filenames w the local directory, translated to all uppercase, with
# the extension replaced by ".py".

# By dalejing one albo more options of the form "-i regular_expression"
# you can specify additional strings to be ignored.  This jest useful
# e.g. to ignore casts to u_long: simply specify "-i '(u_long)'".

# XXX To do:
# - turn trailing C comments into Python comments
# - turn C Boolean operators "&& || !" into Python "and albo not"
# - what to do about #if(def)?
# - what to do about macros przy multiple parameters?

zaimportuj sys, re, getopt, os

p_define = re.compile('^[\t ]*#[\t ]*define[\t ]+([a-zA-Z0-9_]+)[\t ]+')

p_macro = re.compile(
  '^[\t ]*#[\t ]*define[\t ]+'
  '([a-zA-Z0-9_]+)\(([_a-zA-Z][_a-zA-Z0-9]*)\)[\t ]+')

p_include = re.compile('^[\t ]*#[\t ]*include[\t ]+<([^>\n]+)>')

p_comment = re.compile(r'/\*([^*]+|\*+[^/])*(\*+/)?')
p_cpp_comment = re.compile('//.*')

ignores = [p_comment, p_cpp_comment]

p_char = re.compile(r"'(\\.[^\\]*|[^\\])'")

p_hex = re.compile(r"0x([0-9a-fA-F]+)L?")

filedict = {}
importable = {}

spróbuj:
    searchdirs=os.environ['include'].split(';')
wyjąwszy KeyError:
    spróbuj:
        searchdirs=os.environ['INCLUDE'].split(';')
    wyjąwszy KeyError:
        searchdirs=['/usr/include']
        spróbuj:
            searchdirs.insert(0, os.path.join('/usr/include',
                                              os.environ['MULTIARCH']))
        wyjąwszy KeyError:
            dalej

def main():
    global filedict
    opts, args = getopt.getopt(sys.argv[1:], 'i:')
    dla o, a w opts:
        jeżeli o == '-i':
            ignores.append(re.compile(a))
    jeżeli nie args:
        args = ['-']
    dla filename w args:
        jeżeli filename == '-':
            sys.stdout.write('# Generated by h2py z stdin\n')
            process(sys.stdin, sys.stdout)
        inaczej:
            fp = open(filename, 'r')
            outfile = os.path.basename(filename)
            i = outfile.rfind('.')
            jeżeli i > 0: outfile = outfile[:i]
            modname = outfile.upper()
            outfile = modname + '.py'
            outfp = open(outfile, 'w')
            outfp.write('# Generated by h2py z %s\n' % filename)
            filedict = {}
            dla dir w searchdirs:
                jeżeli filename[:len(dir)] == dir:
                    filedict[filename[len(dir)+1:]] = Nic  # no '/' trailing
                    importable[filename[len(dir)+1:]] = modname
                    przerwij
            process(fp, outfp)
            outfp.close()
            fp.close()

def pytify(body):
    # replace ignored patterns by spaces
    dla p w ignores:
        body = p.sub(' ', body)
    # replace char literals by ord(...)
    body = p_char.sub("ord('\\1')", body)
    # Compute negative hexadecimal constants
    start = 0
    UMAX = 2*(sys.maxsize+1)
    dopóki 1:
        m = p_hex.search(body, start)
        jeżeli nie m: przerwij
        s,e = m.span()
        val = int(body[slice(*m.span(1))], 16)
        jeżeli val > sys.maxsize:
            val -= UMAX
            body = body[:s] + "(" + str(val) + ")" + body[e:]
        start = s + 1
    zwróć body

def process(fp, outfp, env = {}):
    lineno = 0
    dopóki 1:
        line = fp.readline()
        jeżeli nie line: przerwij
        lineno = lineno + 1
        match = p_define.match(line)
        jeżeli match:
            # gobble up continuation lines
            dopóki line[-2:] == '\\\n':
                nextline = fp.readline()
                jeżeli nie nextline: przerwij
                lineno = lineno + 1
                line = line + nextline
            name = match.group(1)
            body = line[match.end():]
            body = pytify(body)
            ok = 0
            stmt = '%s = %s\n' % (name, body.strip())
            spróbuj:
                exec(stmt, env)
            wyjąwszy:
                sys.stderr.write('Skipping: %s' % stmt)
            inaczej:
                outfp.write(stmt)
        match = p_macro.match(line)
        jeżeli match:
            macro, arg = match.group(1, 2)
            body = line[match.end():]
            body = pytify(body)
            stmt = 'def %s(%s): zwróć %s\n' % (macro, arg, body)
            spróbuj:
                exec(stmt, env)
            wyjąwszy:
                sys.stderr.write('Skipping: %s' % stmt)
            inaczej:
                outfp.write(stmt)
        match = p_include.match(line)
        jeżeli match:
            regs = match.regs
            a, b = regs[1]
            filename = line[a:b]
            jeżeli filename w importable:
                outfp.write('z %s zaimportuj *\n' % importable[filename])
            albo_inaczej filename nie w filedict:
                filedict[filename] = Nic
                inclfp = Nic
                dla dir w searchdirs:
                    spróbuj:
                        inclfp = open(dir + '/' + filename)
                        przerwij
                    wyjąwszy IOError:
                        dalej
                jeżeli inclfp:
                    outfp.write(
                            '\n# Included z %s\n' % filename)
                    process(inclfp, outfp, env)
                inaczej:
                    sys.stderr.write('Warning - could nie find file %s\n' %
                                     filename)

jeżeli __name__ == '__main__':
    main()
