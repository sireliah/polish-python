# -*- coding: utf-8 -*-
# Autogenerated by Sphinx on Sat Sep 12 17:22:24 2015
topics = {'assert': '\n'
           'The "assert" statement\n'
           '**********************\n'
           '\n'
           'Assert statements are a convenient way to insert debugging '
           'assertions\n'
           'into a program:\n'
           '\n'
           '   assert_stmt ::= "assert" expression ["," expression]\n'
           '\n'
           'The simple form, "assert expression", jest equivalent to\n'
           '\n'
           '   jeżeli __debug__:\n'
           '      jeżeli nie expression: podnieś AssertionError\n'
           '\n'
           'The extended form, "assert expression1, expression2", jest '
           'equivalent to\n'
           '\n'
           '   jeżeli __debug__:\n'
           '      jeżeli nie expression1: podnieś AssertionError(expression2)\n'
           '\n'
           'These equivalences assume that "__debug__" oraz "AssertionError" '
           'refer\n'
           'to the built-in variables przy those names.  In the current\n'
           'implementation, the built-in variable "__debug__" jest "Prawda" '
           'under\n'
           'normal circumstances, "Nieprawda" when optimization jest requested '
           '(command\n'
           'line option -O).  The current code generator emits no code dla '
           'an\n'
           'assert statement when optimization jest requested at compile '
           'time.  Note\n'
           'that it jest unnecessary to include the source code dla the '
           'expression\n'
           'that failed w the error message; it will be displayed jako part '
           'of the\n'
           'stack trace.\n'
           '\n'
           'Assignments to "__debug__" are illegal.  The value dla the '
           'built-in\n'
           'variable jest determined when the interpreter starts.\n',
 'assignment': '\n'
               'Assignment statements\n'
               '*********************\n'
               '\n'
               'Assignment statements are used to (re)bind names to values '
               'and to\n'
               'modify attributes albo items of mutable objects:\n'
               '\n'
               '   assignment_stmt ::= (target_list "=")+ (expression_list | '
               'uzyskaj_expression)\n'
               '   target_list     ::= target ("," target)* [","]\n'
               '   target          ::= identifier\n'
               '              | "(" target_list ")"\n'
               '              | "[" target_list "]"\n'
               '              | attributeref\n'
               '              | subscription\n'
               '              | slicing\n'
               '              | "*" target\n'
               '\n'
               '(See section *Primaries* dla the syntax definitions for\n'
               '*attributeref*, *subscription*, oraz *slicing*.)\n'
               '\n'
               'An assignment statement evaluates the expression list '
               '(remember that\n'
               'this can be a single expression albo a comma-separated list, '
               'the latter\n'
               'uzyskajing a tuple) oraz assigns the single resulting object to '
               'each of\n'
               'the target lists, z left to right.\n'
               '\n'
               'Assignment jest defined recursively depending on the form of '
               'the target\n'
               '(list). When a target jest part of a mutable object (an '
               'attribute\n'
               'reference, subscription albo slicing), the mutable object '
               'must\n'
               'ultimately perform the assignment oraz decide about its '
               'validity, and\n'
               'may podnieś an exception jeżeli the assignment jest unacceptable.  '
               'The rules\n'
               'observed by various types oraz the exceptions podnieśd are '
               'given przy the\n'
               'definition of the object types (see section *The standard '
               'type\n'
               'hierarchy*).\n'
               '\n'
               'Assignment of an object to a target list, optionally '
               'enclosed in\n'
               'parentheses albo square brackets, jest recursively defined jako '
               'follows.\n'
               '\n'
               '* If the target list jest a single target: The object jest '
               'assigned to\n'
               '  that target.\n'
               '\n'
               '* If the target list jest a comma-separated list of targets: '
               'The\n'
               '  object must be an iterable przy the same number of items '
               'as there\n'
               '  are targets w the target list, oraz the items are '
               'assigned, from\n'
               '  left to right, to the corresponding targets.\n'
               '\n'
               '  * If the target list contains one target prefixed przy an\n'
               '    asterisk, called a "starred" target: The object must be '
               'a sequence\n'
               '    przy at least jako many items jako there are targets w the '
               'target\n'
               '    list, minus one.  The first items of the sequence are '
               'assigned,\n'
               '    z left to right, to the targets before the starred '
               'target.  The\n'
               '    final items of the sequence are assigned to the targets '
               'after the\n'
               '    starred target.  A list of the remaining items w the '
               'sequence is\n'
               '    then assigned to the starred target (the list can be '
               'empty).\n'
               '\n'
               '  * Else: The object must be a sequence przy the same number '
               'of\n'
               '    items jako there are targets w the target list, oraz the '
               'items are\n'
               '    assigned, z left to right, to the corresponding '
               'targets.\n'
               '\n'
               'Assignment of an object to a single target jest recursively '
               'defined as\n'
               'follows.\n'
               '\n'
               '* If the target jest an identifier (name):\n'
               '\n'
               '  * If the name does nie occur w a "global" albo "nonlocal" '
               'statement\n'
               '    w the current code block: the name jest bound to the '
               'object w the\n'
               '    current local namespace.\n'
               '\n'
               '  * Otherwise: the name jest bound to the object w the '
               'global\n'
               '    namespace albo the outer namespace determined by '
               '"nonlocal",\n'
               '    respectively.\n'
               '\n'
               '  The name jest rebound jeżeli it was already bound.  This may '
               'cause the\n'
               '  reference count dla the object previously bound to the '
               'name to reach\n'
               '  zero, causing the object to be deallocated oraz its '
               'destructor (jeżeli it\n'
               '  has one) to be called.\n'
               '\n'
               '* If the target jest a target list enclosed w parentheses albo '
               'in\n'
               '  square brackets: The object must be an iterable przy the '
               'same number\n'
               '  of items jako there are targets w the target list, oraz its '
               'items are\n'
               '  assigned, z left to right, to the corresponding '
               'targets.\n'
               '\n'
               '* If the target jest an attribute reference: The primary '
               'expression in\n'
               '  the reference jest evaluated.  It should uzyskaj an object '
               'with\n'
               '  assignable attributes; jeżeli this jest nie the case, '
               '"TypeError" is\n'
               '  podnieśd.  That object jest then asked to assign the assigned '
               'object to\n'
               '  the given attribute; jeżeli it cannot perform the assignment, '
               'it podnieśs\n'
               '  an exception (usually but nie necessarily '
               '"AttributeError").\n'
               '\n'
               '  Note: If the object jest a klasa instance oraz the attribute '
               'reference\n'
               '  occurs on both sides of the assignment operator, the RHS '
               'expression,\n'
               '  "a.x" can access either an instance attribute albo (jeżeli no '
               'instance\n'
               '  attribute exists) a klasa attribute.  The LHS target "a.x" '
               'is always\n'
               '  set jako an instance attribute, creating it jeżeli necessary.  '
               'Thus, the\n'
               '  two occurrences of "a.x" do nie necessarily refer to the '
               'same\n'
               '  attribute: jeżeli the RHS expression refers to a klasa '
               'attribute, the\n'
               '  LHS creates a new instance attribute jako the target of the\n'
               '  assignment:\n'
               '\n'
               '     klasa Cls:\n'
               '         x = 3             # klasa variable\n'
               '     inst = Cls()\n'
               '     inst.x = inst.x + 1   # writes inst.x jako 4 leaving '
               'Cls.x jako 3\n'
               '\n'
               '  This description does nie necessarily apply to descriptor\n'
               '  attributes, such jako properties created przy "property()".\n'
               '\n'
               '* If the target jest a subscription: The primary expression w '
               'the\n'
               '  reference jest evaluated.  It should uzyskaj either a mutable '
               'sequence\n'
               '  object (such jako a list) albo a mapping object (such jako a '
               'dictionary).\n'
               '  Next, the subscript expression jest evaluated.\n'
               '\n'
               '  If the primary jest a mutable sequence object (such jako a '
               'list), the\n'
               '  subscript must uzyskaj an integer.  If it jest negative, the '
               "sequence's\n"
               '  length jest added to it.  The resulting value must be a '
               'nonnegative\n'
               "  integer less than the sequence's length, oraz the sequence "
               'is asked\n'
               '  to assign the assigned object to its item przy that '
               'index.  If the\n'
               '  index jest out of range, "IndexError" jest podnieśd (assignment '
               'to a\n'
               '  subscripted sequence cannot add new items to a list).\n'
               '\n'
               '  If the primary jest a mapping object (such jako a dictionary), '
               'the\n'
               "  subscript must have a type compatible przy the mapping's "
               'key type,\n'
               '  oraz the mapping jest then asked to create a key/datum pair '
               'which maps\n'
               '  the subscript to the assigned object.  This can either '
               'replace an\n'
               '  existing key/value pair przy the same key value, albo insert '
               'a new\n'
               '  key/value pair (jeżeli no key przy the same value existed).\n'
               '\n'
               '  For user-defined objects, the "__setitem__()" method jest '
               'called with\n'
               '  appropriate arguments.\n'
               '\n'
               '* If the target jest a slicing: The primary expression w the\n'
               '  reference jest evaluated.  It should uzyskaj a mutable '
               'sequence object\n'
               '  (such jako a list).  The assigned object should be a '
               'sequence object\n'
               '  of the same type.  Next, the lower oraz upper bound '
               'expressions are\n'
               '  evaluated, insofar they are present; defaults are zero oraz '
               'the\n'
               "  sequence's length.  The bounds should evaluate to "
               'integers. If\n'
               "  either bound jest negative, the sequence's length jest added "
               'to it.  The\n'
               '  resulting bounds are clipped to lie between zero oraz the '
               "sequence's\n"
               '  length, inclusive.  Finally, the sequence object jest asked '
               'to replace\n'
               '  the slice przy the items of the assigned sequence.  The '
               'length of\n'
               '  the slice may be different z the length of the assigned '
               'sequence,\n'
               '  thus changing the length of the target sequence, jeżeli the '
               'target\n'
               '  sequence allows it.\n'
               '\n'
               '**CPython implementation detail:** In the current '
               'implementation, the\n'
               'syntax dla targets jest taken to be the same jako dla '
               'expressions, and\n'
               'invalid syntax jest rejected during the code generation phase, '
               'causing\n'
               'less detailed error messages.\n'
               '\n'
               'Although the definition of assignment implies that overlaps '
               'between\n'
               'the left-hand side oraz the right-hand side are '
               "'simultanenous' (for\n"
               'example "a, b = b, a" swaps two variables), overlaps '
               '*within* the\n'
               'collection of assigned-to variables occur left-to-right, '
               'sometimes\n'
               'resulting w confusion.  For instance, the following program '
               'prints\n'
               '"[0, 2]":\n'
               '\n'
               '   x = [0, 1]\n'
               '   i = 0\n'
               '   i, x[i] = 1, 2         # i jest updated, then x[i] jest '
               'updated\n'
               '   print(x)\n'
               '\n'
               'See also: **PEP 3132** - Extended Iterable Unpacking\n'
               '\n'
               '     The specification dla the "*target" feature.\n'
               '\n'
               '\n'
               'Augmented assignment statements\n'
               '===============================\n'
               '\n'
               'Augmented assignment jest the combination, w a single '
               'statement, of a\n'
               'binary operation oraz an assignment statement:\n'
               '\n'
               '   augmented_assignment_stmt ::= augtarget augop '
               '(expression_list | uzyskaj_expression)\n'
               '   augtarget                 ::= identifier | attributeref | '
               'subscription | slicing\n'
               '   augop                     ::= "+=" | "-=" | "*=" | "@=" | '
               '"/=" | "//=" | "%=" | "**="\n'
               '             | ">>=" | "<<=" | "&=" | "^=" | "|="\n'
               '\n'
               '(See section *Primaries* dla the syntax definitions of the '
               'last three\n'
               'symbols.)\n'
               '\n'
               'An augmented assignment evaluates the target (which, unlike '
               'normal\n'
               'assignment statements, cannot be an unpacking) oraz the '
               'expression\n'
               'list, performs the binary operation specific to the type of '
               'assignment\n'
               'on the two operands, oraz assigns the result to the original '
               'target.\n'
               'The target jest only evaluated once.\n'
               '\n'
               'An augmented assignment expression like "x += 1" can be '
               'rewritten as\n'
               '"x = x + 1" to achieve a similar, but nie exactly equal '
               'effect. In the\n'
               'augmented version, "x" jest only evaluated once. Also, when '
               'possible,\n'
               'the actual operation jest performed *in-place*, meaning that '
               'rather than\n'
               'creating a new object oraz assigning that to the target, the '
               'old object\n'
               'is modified instead.\n'
               '\n'
               'Unlike normal assignments, augmented assignments evaluate '
               'the left-\n'
               'hand side *before* evaluating the right-hand side.  For '
               'example, "a[i]\n'
               '+= f(x)" first looks-up "a[i]", then it evaluates "f(x)" oraz '
               'performs\n'
               'the addition, oraz lastly, it writes the result back to '
               '"a[i]".\n'
               '\n'
               'With the exception of assigning to tuples oraz multiple '
               'targets w a\n'
               'single statement, the assignment done by augmented '
               'assignment\n'
               'statements jest handled the same way jako normal assignments. '
               'Similarly,\n'
               'przy the exception of the possible *in-place* behavior, the '
               'binary\n'
               'operation performed by augmented assignment jest the same jako '
               'the normal\n'
               'binary operations.\n'
               '\n'
               'For targets which are attribute references, the same *caveat '
               'about\n'
               'class oraz instance attributes* applies jako dla regular '
               'assignments.\n',
 'atom-identifiers': '\n'
                     'Identifiers (Names)\n'
                     '*******************\n'
                     '\n'
                     'An identifier occurring jako an atom jest a name.  See '
                     'section\n'
                     '*Identifiers oraz keywords* dla lexical definition oraz '
                     'section *Naming\n'
                     'and binding* dla documentation of naming oraz binding.\n'
                     '\n'
                     'When the name jest bound to an object, evaluation of the '
                     'atom uzyskajs\n'
                     'that object. When a name jest nie bound, an attempt to '
                     'evaluate it\n'
                     'raises a "NameError" exception.\n'
                     '\n'
                     '**Private name mangling:** When an identifier that '
                     'textually occurs in\n'
                     'a klasa definition begins przy two albo more underscore '
                     'characters and\n'
                     'does nie end w two albo more underscores, it jest '
                     'considered a *private\n'
                     'name* of that class. Private names are transformed to '
                     'a longer form\n'
                     'before code jest generated dla them.  The transformation '
                     'inserts the\n'
                     'class name, przy leading underscores removed oraz a '
                     'single underscore\n'
                     'inserted, w front of the name.  For example, the '
                     'identifier "__spam"\n'
                     'occurring w a klasa named "Ham" will be transformed '
                     'to "_Ham__spam".\n'
                     'This transformation jest independent of the syntactical '
                     'context w which\n'
                     'the identifier jest used.  If the transformed name jest '
                     'extremely long\n'
                     '(longer than 255 characters), implementation defined '
                     'truncation may\n'
                     'happen. If the klasa name consists only of '
                     'underscores, no\n'
                     'transformation jest done.\n',
 'atom-literals': '\n'
                  'Literals\n'
                  '********\n'
                  '\n'
                  'Python supports string oraz bytes literals oraz various '
                  'numeric\n'
                  'literals:\n'
                  '\n'
                  '   literal ::= stringliteral | bytesliteral\n'
                  '               | integer | floatnumber | imagnumber\n'
                  '\n'
                  'Evaluation of a literal uzyskajs an object of the given '
                  'type (string,\n'
                  'bytes, integer, floating point number, complex number) '
                  'przy the given\n'
                  'value.  The value may be approximated w the case of '
                  'floating point\n'
                  'and imaginary (complex) literals.  See section *Literals* '
                  'dla details.\n'
                  '\n'
                  'All literals correspond to immutable data types, oraz '
                  'hence the\n'
                  "object's identity jest less important than its value.  "
                  'Multiple\n'
                  'evaluations of literals przy the same value (either the '
                  'same\n'
                  'occurrence w the program text albo a different occurrence) '
                  'may obtain\n'
                  'the same object albo a different object przy the same '
                  'value.\n',
 'attribute-access': '\n'
                     'Customizing attribute access\n'
                     '****************************\n'
                     '\n'
                     'The following methods can be defined to customize the '
                     'meaning of\n'
                     'attribute access (use of, assignment to, albo deletion '
                     'of "x.name") for\n'
                     'class instances.\n'
                     '\n'
                     'object.__getattr__(self, name)\n'
                     '\n'
                     '   Called when an attribute lookup has nie found the '
                     'attribute w the\n'
                     '   usual places (i.e. it jest nie an instance attribute '
                     'nor jest it found\n'
                     '   w the klasa tree dla "self").  "name" jest the '
                     'attribute name. This\n'
                     '   method should zwróć the (computed) attribute value '
                     'or podnieś an\n'
                     '   "AttributeError" exception.\n'
                     '\n'
                     '   Note that jeżeli the attribute jest found through the '
                     'normal mechanism,\n'
                     '   "__getattr__()" jest nie called.  (This jest an '
                     'intentional asymmetry\n'
                     '   between "__getattr__()" oraz "__setattr__()".) This '
                     'is done both for\n'
                     '   efficiency reasons oraz because otherwise '
                     '"__getattr__()" would have\n'
                     '   no way to access other attributes of the instance.  '
                     'Note that at\n'
                     '   least dla instance variables, you can fake total '
                     'control by not\n'
                     '   inserting any values w the instance attribute '
                     'dictionary (but\n'
                     '   instead inserting them w another object).  See '
                     'the\n'
                     '   "__getattribute__()" method below dla a way to '
                     'actually get total\n'
                     '   control over attribute access.\n'
                     '\n'
                     'object.__getattribute__(self, name)\n'
                     '\n'
                     '   Called unconditionally to implement attribute '
                     'accesses for\n'
                     '   instances of the class. If the klasa also defines '
                     '"__getattr__()",\n'
                     '   the latter will nie be called unless '
                     '"__getattribute__()" either\n'
                     '   calls it explicitly albo podnieśs an "AttributeError". '
                     'This method\n'
                     '   should zwróć the (computed) attribute value albo '
                     'raise an\n'
                     '   "AttributeError" exception. In order to avoid '
                     'infinite recursion in\n'
                     '   this method, its implementation should always call '
                     'the base class\n'
                     '   method przy the same name to access any attributes '
                     'it needs, for\n'
                     '   example, "object.__getattribute__(self, name)".\n'
                     '\n'
                     '   Note: This method may still be bypassed when '
                     'looking up special\n'
                     '     methods jako the result of implicit invocation via '
                     'language syntax\n'
                     '     albo built-in functions. See *Special method '
                     'lookup*.\n'
                     '\n'
                     'object.__setattr__(self, name, value)\n'
                     '\n'
                     '   Called when an attribute assignment jest attempted.  '
                     'This jest called\n'
                     '   instead of the normal mechanism (i.e. store the '
                     'value w the\n'
                     '   instance dictionary). *name* jest the attribute name, '
                     '*value* jest the\n'
                     '   value to be assigned to it.\n'
                     '\n'
                     '   If "__setattr__()" wants to assign to an instance '
                     'attribute, it\n'
                     '   should call the base klasa method przy the same '
                     'name, dla example,\n'
                     '   "object.__setattr__(self, name, value)".\n'
                     '\n'
                     'object.__delattr__(self, name)\n'
                     '\n'
                     '   Like "__setattr__()" but dla attribute deletion '
                     'instead of\n'
                     '   assignment.  This should only be implemented jeżeli '
                     '"usuń obj.name" is\n'
                     '   meaningful dla the object.\n'
                     '\n'
                     'object.__dir__(self)\n'
                     '\n'
                     '   Called when "dir()" jest called on the object. A '
                     'sequence must be\n'
                     '   returned. "dir()" converts the returned sequence to '
                     'a list and\n'
                     '   sorts it.\n'
                     '\n'
                     '\n'
                     'Implementing Descriptors\n'
                     '========================\n'
                     '\n'
                     'The following methods only apply when an instance of '
                     'the class\n'
                     'containing the method (a so-called *descriptor* class) '
                     'appears w an\n'
                     '*owner* klasa (the descriptor must be w either the '
                     "owner's class\n"
                     'dictionary albo w the klasa dictionary dla one of its '
                     'parents).  In the\n'
                     'examples below, "the attribute" refers to the '
                     'attribute whose name is\n'
                     "the key of the property w the owner class' "
                     '"__dict__".\n'
                     '\n'
                     'object.__get__(self, instance, owner)\n'
                     '\n'
                     '   Called to get the attribute of the owner klasa '
                     '(class attribute\n'
                     '   access) albo of an instance of that klasa (instance '
                     'attribute\n'
                     '   access). *owner* jest always the owner class, dopóki '
                     '*instance* jest the\n'
                     '   instance that the attribute was accessed through, '
                     'or "Nic" when\n'
                     '   the attribute jest accessed through the *owner*.  '
                     'This method should\n'
                     '   zwróć the (computed) attribute value albo podnieś an '
                     '"AttributeError"\n'
                     '   exception.\n'
                     '\n'
                     'object.__set__(self, instance, value)\n'
                     '\n'
                     '   Called to set the attribute on an instance '
                     '*instance* of the owner\n'
                     '   klasa to a new value, *value*.\n'
                     '\n'
                     'object.__delete__(self, instance)\n'
                     '\n'
                     '   Called to delete the attribute on an instance '
                     '*instance* of the\n'
                     '   owner class.\n'
                     '\n'
                     'The attribute "__objclass__" jest interpreted by the '
                     '"inspect" module as\n'
                     'specifying the klasa where this object was defined '
                     '(setting this\n'
                     'appropriately can assist w runtime introspection of '
                     'dynamic class\n'
                     'attributes). For callables, it may indicate that an '
                     'instance of the\n'
                     'given type (or a subclass) jest expected albo required jako '
                     'the first\n'
                     'positional argument (dla example, CPython sets this '
                     'attribute for\n'
                     'unbound methods that are implemented w C).\n'
                     '\n'
                     '\n'
                     'Invoking Descriptors\n'
                     '====================\n'
                     '\n'
                     'In general, a descriptor jest an object attribute przy '
                     '"binding\n'
                     'behavior", one whose attribute access has been '
                     'overridden by methods\n'
                     'in the descriptor protocol:  "__get__()", "__set__()", '
                     'and\n'
                     '"__delete__()". If any of those methods are defined '
                     'dla an object, it\n'
                     'is said to be a descriptor.\n'
                     '\n'
                     'The default behavior dla attribute access jest to get, '
                     'set, albo delete\n'
                     "the attribute z an object's dictionary. For "
                     'instance, "a.x" has a\n'
                     'lookup chain starting przy "a.__dict__[\'x\']", then\n'
                     '"type(a).__dict__[\'x\']", oraz continuing through the '
                     'base classes of\n'
                     '"type(a)" excluding metaclasses.\n'
                     '\n'
                     'However, jeżeli the looked-up value jest an object defining '
                     'one of the\n'
                     'descriptor methods, then Python may override the '
                     'default behavior and\n'
                     'invoke the descriptor method instead.  Where this '
                     'occurs w the\n'
                     'precedence chain depends on which descriptor methods '
                     'were defined and\n'
                     'how they were called.\n'
                     '\n'
                     'The starting point dla descriptor invocation jest a '
                     'binding, "a.x". How\n'
                     'the arguments are assembled depends on "a":\n'
                     '\n'
                     'Direct Call\n'
                     '   The simplest oraz least common call jest when user '
                     'code directly\n'
                     '   invokes a descriptor method:    "x.__get__(a)".\n'
                     '\n'
                     'Instance Binding\n'
                     '   If binding to an object instance, "a.x" jest '
                     'transformed into the\n'
                     '   call: "type(a).__dict__[\'x\'].__get__(a, '
                     'type(a))".\n'
                     '\n'
                     'Class Binding\n'
                     '   If binding to a class, "A.x" jest transformed into '
                     'the call:\n'
                     '   "A.__dict__[\'x\'].__get__(Nic, A)".\n'
                     '\n'
                     'Super Binding\n'
                     '   If "a" jest an instance of "super", then the binding '
                     '"super(B,\n'
                     '   obj).m()" searches "obj.__class__.__mro__" dla the '
                     'base klasa "A"\n'
                     '   immediately preceding "B" oraz then invokes the '
                     'descriptor przy the\n'
                     '   call: "A.__dict__[\'m\'].__get__(obj, '
                     'obj.__class__)".\n'
                     '\n'
                     'For instance bindings, the precedence of descriptor '
                     'invocation depends\n'
                     'on the which descriptor methods are defined.  A '
                     'descriptor can define\n'
                     'any combination of "__get__()", "__set__()" oraz '
                     '"__delete__()".  If it\n'
                     'does nie define "__get__()", then accessing the '
                     'attribute will return\n'
                     'the descriptor object itself unless there jest a value '
                     "in the object's\n"
                     'instance dictionary.  If the descriptor defines '
                     '"__set__()" and/or\n'
                     '"__delete__()", it jest a data descriptor; jeżeli it defines '
                     'neither, it is\n'
                     'a non-data descriptor.  Normally, data descriptors '
                     'define both\n'
                     '"__get__()" oraz "__set__()", dopóki non-data '
                     'descriptors have just the\n'
                     '"__get__()" method.  Data descriptors przy "__set__()" '
                     'and "__get__()"\n'
                     'defined always override a redefinition w an instance '
                     'dictionary.  In\n'
                     'contrast, non-data descriptors can be overridden by '
                     'instances.\n'
                     '\n'
                     'Python methods (including "staticmethod()" oraz '
                     '"classmethod()") are\n'
                     'implemented jako non-data descriptors.  Accordingly, '
                     'instances can\n'
                     'redefine oraz override methods.  This allows individual '
                     'instances to\n'
                     'acquire behaviors that differ z other instances of '
                     'the same class.\n'
                     '\n'
                     'The "property()" function jest implemented jako a data '
                     'descriptor.\n'
                     'Accordingly, instances cannot override the behavior of '
                     'a property.\n'
                     '\n'
                     '\n'
                     '__slots__\n'
                     '=========\n'
                     '\n'
                     'By default, instances of classes have a dictionary dla '
                     'attribute\n'
                     'storage.  This wastes space dla objects having very '
                     'few instance\n'
                     'variables.  The space consumption can become acute '
                     'when creating large\n'
                     'numbers of instances.\n'
                     '\n'
                     'The default can be overridden by defining *__slots__* '
                     'in a class\n'
                     'definition. The *__slots__* declaration takes a '
                     'sequence of instance\n'
                     'variables oraz reserves just enough space w each '
                     'instance to hold a\n'
                     'value dla each variable.  Space jest saved because '
                     '*__dict__* jest not\n'
                     'created dla each instance.\n'
                     '\n'
                     'object.__slots__\n'
                     '\n'
                     '   This klasa variable can be assigned a string, '
                     'iterable, albo sequence\n'
                     '   of strings przy variable names used by instances.  '
                     '*__slots__*\n'
                     '   reserves space dla the declared variables oraz '
                     'prevents the\n'
                     '   automatic creation of *__dict__* oraz *__weakref__* '
                     'dla each\n'
                     '   instance.\n'
                     '\n'
                     '\n'
                     'Notes on using *__slots__*\n'
                     '--------------------------\n'
                     '\n'
                     '* When inheriting z a klasa without *__slots__*, '
                     'the *__dict__*\n'
                     '  attribute of that klasa will always be accessible, '
                     'so a *__slots__*\n'
                     '  definition w the subclass jest meaningless.\n'
                     '\n'
                     '* Without a *__dict__* variable, instances cannot be '
                     'assigned new\n'
                     '  variables nie listed w the *__slots__* definition.  '
                     'Attempts to\n'
                     '  assign to an unlisted variable name podnieśs '
                     '"AttributeError". If\n'
                     '  dynamic assignment of new variables jest desired, then '
                     'add\n'
                     '  "\'__dict__\'" to the sequence of strings w the '
                     '*__slots__*\n'
                     '  declaration.\n'
                     '\n'
                     '* Without a *__weakref__* variable dla each instance, '
                     'classes\n'
                     '  defining *__slots__* do nie support weak references '
                     'to its\n'
                     '  instances. If weak reference support jest needed, then '
                     'add\n'
                     '  "\'__weakref__\'" to the sequence of strings w the '
                     '*__slots__*\n'
                     '  declaration.\n'
                     '\n'
                     '* *__slots__* are implemented at the klasa level by '
                     'creating\n'
                     '  descriptors (*Implementing Descriptors*) dla each '
                     'variable name.  As\n'
                     '  a result, klasa attributes cannot be used to set '
                     'default values for\n'
                     '  instance variables defined by *__slots__*; '
                     'otherwise, the class\n'
                     '  attribute would overwrite the descriptor '
                     'assignment.\n'
                     '\n'
                     '* The action of a *__slots__* declaration jest limited '
                     'to the class\n'
                     '  where it jest defined.  As a result, subclasses will '
                     'have a *__dict__*\n'
                     '  unless they also define *__slots__* (which must only '
                     'contain names\n'
                     '  of any *additional* slots).\n'
                     '\n'
                     '* If a klasa defines a slot also defined w a base '
                     'class, the\n'
                     '  instance variable defined by the base klasa slot jest '
                     'inaccessible\n'
                     '  (wyjąwszy by retrieving its descriptor directly z '
                     'the base class).\n'
                     '  This renders the meaning of the program undefined.  '
                     'In the future, a\n'
                     '  check may be added to prevent this.\n'
                     '\n'
                     '* Nicmpty *__slots__* does nie work dla classes '
                     'derived from\n'
                     '  "variable-length" built-in types such jako "int", '
                     '"bytes" oraz "tuple".\n'
                     '\n'
                     '* Any non-string iterable may be assigned to '
                     '*__slots__*. Mappings\n'
                     '  may also be used; however, w the future, special '
                     'meaning may be\n'
                     '  assigned to the values corresponding to each key.\n'
                     '\n'
                     '* *__class__* assignment works only jeżeli both classes '
                     'have the same\n'
                     '  *__slots__*.\n',
 'attribute-references': '\n'
                         'Attribute references\n'
                         '********************\n'
                         '\n'
                         'An attribute reference jest a primary followed by a '
                         'period oraz a name:\n'
                         '\n'
                         '   attributeref ::= primary "." identifier\n'
                         '\n'
                         'The primary must evaluate to an object of a type '
                         'that supports\n'
                         'attribute references, which most objects do.  This '
                         'object jest then\n'
                         'asked to produce the attribute whose name jest the '
                         'identifier.  This\n'
                         'production can be customized by overriding the '
                         '"__getattr__()" method.\n'
                         'If this attribute jest nie available, the exception '
                         '"AttributeError" is\n'
                         'raised.  Otherwise, the type oraz value of the '
                         'object produced is\n'
                         'determined by the object.  Multiple evaluations of '
                         'the same attribute\n'
                         'reference may uzyskaj different objects.\n',
 'augassign': '\n'
              'Augmented assignment statements\n'
              '*******************************\n'
              '\n'
              'Augmented assignment jest the combination, w a single '
              'statement, of a\n'
              'binary operation oraz an assignment statement:\n'
              '\n'
              '   augmented_assignment_stmt ::= augtarget augop '
              '(expression_list | uzyskaj_expression)\n'
              '   augtarget                 ::= identifier | attributeref | '
              'subscription | slicing\n'
              '   augop                     ::= "+=" | "-=" | "*=" | "@=" | '
              '"/=" | "//=" | "%=" | "**="\n'
              '             | ">>=" | "<<=" | "&=" | "^=" | "|="\n'
              '\n'
              '(See section *Primaries* dla the syntax definitions of the '
              'last three\n'
              'symbols.)\n'
              '\n'
              'An augmented assignment evaluates the target (which, unlike '
              'normal\n'
              'assignment statements, cannot be an unpacking) oraz the '
              'expression\n'
              'list, performs the binary operation specific to the type of '
              'assignment\n'
              'on the two operands, oraz assigns the result to the original '
              'target.\n'
              'The target jest only evaluated once.\n'
              '\n'
              'An augmented assignment expression like "x += 1" can be '
              'rewritten as\n'
              '"x = x + 1" to achieve a similar, but nie exactly equal '
              'effect. In the\n'
              'augmented version, "x" jest only evaluated once. Also, when '
              'possible,\n'
              'the actual operation jest performed *in-place*, meaning that '
              'rather than\n'
              'creating a new object oraz assigning that to the target, the '
              'old object\n'
              'is modified instead.\n'
              '\n'
              'Unlike normal assignments, augmented assignments evaluate the '
              'left-\n'
              'hand side *before* evaluating the right-hand side.  For '
              'example, "a[i]\n'
              '+= f(x)" first looks-up "a[i]", then it evaluates "f(x)" oraz '
              'performs\n'
              'the addition, oraz lastly, it writes the result back to '
              '"a[i]".\n'
              '\n'
              'With the exception of assigning to tuples oraz multiple '
              'targets w a\n'
              'single statement, the assignment done by augmented '
              'assignment\n'
              'statements jest handled the same way jako normal assignments. '
              'Similarly,\n'
              'przy the exception of the possible *in-place* behavior, the '
              'binary\n'
              'operation performed by augmented assignment jest the same jako '
              'the normal\n'
              'binary operations.\n'
              '\n'
              'For targets which are attribute references, the same *caveat '
              'about\n'
              'class oraz instance attributes* applies jako dla regular '
              'assignments.\n',
 'binary': '\n'
           'Binary arithmetic operations\n'
           '****************************\n'
           '\n'
           'The binary arithmetic operations have the conventional priority\n'
           'levels.  Note that some of these operations also apply to '
           'certain non-\n'
           'numeric types.  Apart z the power operator, there are only '
           'two\n'
           'levels, one dla multiplicative operators oraz one dla additive\n'
           'operators:\n'
           '\n'
           '   m_expr ::= u_expr | m_expr "*" u_expr | m_expr "@" m_expr |\n'
           '              m_expr "//" u_expr| m_expr "/" u_expr |\n'
           '              m_expr "%" u_expr\n'
           '   a_expr ::= m_expr | a_expr "+" m_expr | a_expr "-" m_expr\n'
           '\n'
           'The "*" (multiplication) operator uzyskajs the product of its '
           'arguments.\n'
           'The arguments must either both be numbers, albo one argument must '
           'be an\n'
           'integer oraz the other must be a sequence. In the former case, '
           'the\n'
           'numbers are converted to a common type oraz then multiplied '
           'together.\n'
           'In the latter case, sequence repetition jest performed; a '
           'negative\n'
           'repetition factor uzyskajs an empty sequence.\n'
           '\n'
           'The "@" (at) operator jest intended to be used dla matrix\n'
           'multiplication.  No builtin Python types implement this '
           'operator.\n'
           '\n'
           'New w version 3.5.\n'
           '\n'
           'The "/" (division) oraz "//" (floor division) operators uzyskaj '
           'the\n'
           'quotient of their arguments.  The numeric arguments are first\n'
           'converted to a common type. Division of integers uzyskajs a float, '
           'while\n'
           'floor division of integers results w an integer; the result jest '
           'that\n'
           "of mathematical division przy the 'floor' function applied to "
           'the\n'
           'result.  Division by zero podnieśs the "ZeroDivisionError" '
           'exception.\n'
           '\n'
           'The "%" (modulo) operator uzyskajs the remainder z the division '
           'of\n'
           'the first argument by the second.  The numeric arguments are '
           'first\n'
           'converted to a common type.  A zero right argument podnieśs the\n'
           '"ZeroDivisionError" exception.  The arguments may be floating '
           'point\n'
           'numbers, e.g., "3.14%0.7" equals "0.34" (since "3.14" equals '
           '"4*0.7 +\n'
           '0.34".)  The modulo operator always uzyskajs a result przy the '
           'same sign\n'
           'as its second operand (or zero); the absolute value of the '
           'result is\n'
           'strictly smaller than the absolute value of the second operand '
           '[1].\n'
           '\n'
           'The floor division oraz modulo operators are connected by the '
           'following\n'
           'identity: "x == (x//y)*y + (x%y)".  Floor division oraz modulo '
           'are also\n'
           'connected przy the built-in function "divmod()": "divmod(x, y) '
           '==\n'
           '(x//y, x%y)". [2].\n'
           '\n'
           'In addition to performing the modulo operation on numbers, the '
           '"%"\n'
           'operator jest also overloaded by string objects to perform '
           'old-style\n'
           'string formatting (also known jako interpolation).  The syntax '
           'for\n'
           'string formatting jest described w the Python Library Reference,\n'
           'section *printf-style String Formatting*.\n'
           '\n'
           'The floor division operator, the modulo operator, oraz the '
           '"divmod()"\n'
           'function are nie defined dla complex numbers.  Instead, convert '
           'to a\n'
           'floating point number using the "abs()" function jeżeli '
           'appropriate.\n'
           '\n'
           'The "+" (addition) operator uzyskajs the sum of its arguments.  '
           'The\n'
           'arguments must either both be numbers albo both be sequences of '
           'the same\n'
           'type.  In the former case, the numbers are converted to a common '
           'type\n'
           'and then added together. In the latter case, the sequences are\n'
           'concatenated.\n'
           '\n'
           'The "-" (subtraction) operator uzyskajs the difference of its '
           'arguments.\n'
           'The numeric arguments are first converted to a common type.\n',
 'bitwise': '\n'
            'Binary bitwise operations\n'
            '*************************\n'
            '\n'
            'Each of the three bitwise operations has a different priority '
            'level:\n'
            '\n'
            '   and_expr ::= shift_expr | and_expr "&" shift_expr\n'
            '   xor_expr ::= and_expr | xor_expr "^" and_expr\n'
            '   or_expr  ::= xor_expr | or_expr "|" xor_expr\n'
            '\n'
            'The "&" operator uzyskajs the bitwise AND of its arguments, which '
            'must\n'
            'be integers.\n'
            '\n'
            'The "^" operator uzyskajs the bitwise XOR (exclusive OR) of its\n'
            'arguments, which must be integers.\n'
            '\n'
            'The "|" operator uzyskajs the bitwise (inclusive) OR of its '
            'arguments,\n'
            'which must be integers.\n',
 'bltin-code-objects': '\n'
                       'Code Objects\n'
                       '************\n'
                       '\n'
                       'Code objects are used by the implementation to '
                       'represent "pseudo-\n'
                       'compiled" executable Python code such jako a function '
                       'body. They differ\n'
                       "z function objects because they don't contain a "
                       'reference to their\n'
                       'global execution environment.  Code objects are '
                       'returned by the built-\n'
                       'in "compile()" function oraz can be extracted z '
                       'function objects\n'
                       'through their "__code__" attribute. See also the '
                       '"code" module.\n'
                       '\n'
                       'A code object can be executed albo evaluated by '
                       'passing it (instead of a\n'
                       'source string) to the "exec()" albo "eval()"  built-in '
                       'functions.\n'
                       '\n'
                       'See *The standard type hierarchy* dla more '
                       'information.\n',
 'bltin-ellipsis-object': '\n'
                          'The Ellipsis Object\n'
                          '*******************\n'
                          '\n'
                          'This object jest commonly used by slicing (see '
                          '*Slicings*).  It supports\n'
                          'no special operations.  There jest exactly one '
                          'ellipsis object, named\n'
                          '"Ellipsis" (a built-in name).  "type(Ellipsis)()" '
                          'produces the\n'
                          '"Ellipsis" singleton.\n'
                          '\n'
                          'It jest written jako "Ellipsis" albo "...".\n',
 'bltin-null-object': '\n'
                      'The Null Object\n'
                      '***************\n'
                      '\n'
                      "This object jest returned by functions that don't "
                      'explicitly zwróć a\n'
                      'value.  It supports no special operations.  There jest '
                      'exactly one null\n'
                      'object, named "Nic" (a built-in name).  '
                      '"type(Nic)()" produces the\n'
                      'same singleton.\n'
                      '\n'
                      'It jest written jako "Nic".\n',
 'bltin-type-objects': '\n'
                       'Type Objects\n'
                       '************\n'
                       '\n'
                       'Type objects represent the various object types.  An '
                       "object's type is\n"
                       'accessed by the built-in function "type()".  There '
                       'are no special\n'
                       'operations on types.  The standard module "types" '
                       'defines names for\n'
                       'all standard built-in types.\n'
                       '\n'
                       'Types are written like this: "<class \'int\'>".\n',
 'booleans': '\n'
             'Boolean operations\n'
             '******************\n'
             '\n'
             '   or_test  ::= and_test | or_test "or" and_test\n'
             '   and_test ::= not_test | and_test "and" not_test\n'
             '   not_test ::= comparison | "not" not_test\n'
             '\n'
             'In the context of Boolean operations, oraz also when '
             'expressions are\n'
             'used by control flow statements, the following values are '
             'interpreted\n'
             'as false: "Nieprawda", "Nic", numeric zero of all types, oraz '
             'empty\n'
             'strings oraz containers (including strings, tuples, lists,\n'
             'dictionaries, sets oraz frozensets).  All other values are '
             'interpreted\n'
             'as true.  User-defined objects can customize their truth value '
             'by\n'
             'providing a "__bool__()" method.\n'
             '\n'
             'The operator "not" uzyskajs "Prawda" jeżeli its argument jest false, '
             '"Nieprawda"\n'
             'otherwise.\n'
             '\n'
             'The expression "x oraz y" first evaluates *x*; jeżeli *x* jest false, '
             'its\n'
             'value jest returned; otherwise, *y* jest evaluated oraz the '
             'resulting value\n'
             'is returned.\n'
             '\n'
             'The expression "x albo y" first evaluates *x*; jeżeli *x* jest true, '
             'its value\n'
             'is returned; otherwise, *y* jest evaluated oraz the resulting '
             'value is\n'
             'returned.\n'
             '\n'
             '(Note that neither "and" nor "or" restrict the value oraz type '
             'they\n'
             'return to "Nieprawda" oraz "Prawda", but rather zwróć the last '
             'evaluated\n'
             'argument.  This jest sometimes useful, e.g., jeżeli "s" jest a string '
             'that\n'
             'should be replaced by a default value jeżeli it jest empty, the '
             'expression\n'
             '"s albo \'foo\'" uzyskajs the desired value.  Because "not" has to '
             'create a\n'
             'new value, it returns a boolean value regardless of the type '
             'of its\n'
             'argument (dla example, "not \'foo\'" produces "Nieprawda" rather '
             'than "\'\'".)\n',
 'break': '\n'
          'The "break" statement\n'
          '*********************\n'
          '\n'
          '   przerwij_stmt ::= "break"\n'
          '\n'
          '"break" may only occur syntactically nested w a "for" albo '
          '"while"\n'
          'loop, but nie nested w a function albo klasa definition within '
          'that\n'
          'loop.\n'
          '\n'
          'It terminates the nearest enclosing loop, skipping the optional '
          '"inaczej"\n'
          'clause jeżeli the loop has one.\n'
          '\n'
          'If a "for" loop jest terminated by "break", the loop control '
          'target\n'
          'keeps its current value.\n'
          '\n'
          'When "break" dalejes control out of a "try" statement przy a '
          '"finally"\n'
          'clause, that "finally" clause jest executed before really leaving '
          'the\n'
          'loop.\n',
 'callable-types': '\n'
                   'Emulating callable objects\n'
                   '**************************\n'
                   '\n'
                   'object.__call__(self[, args...])\n'
                   '\n'
                   '   Called when the instance jest "called" jako a function; '
                   'jeżeli this method\n'
                   '   jest defined, "x(arg1, arg2, ...)" jest a shorthand for\n'
                   '   "x.__call__(arg1, arg2, ...)".\n',
 'calls': '\n'
          'Calls\n'
          '*****\n'
          '\n'
          'A call calls a callable object (e.g., a *function*) przy a '
          'possibly\n'
          'empty series of *arguments*:\n'
          '\n'
          '   call                 ::= primary "(" [argument_list [","] | '
          'comprehension] ")"\n'
          '   argument_list        ::= positional_arguments ["," '
          'keyword_arguments]\n'
          '                       ["," "*" expression] ["," '
          'keyword_arguments]\n'
          '                       ["," "**" expression]\n'
          '                     | keyword_arguments ["," "*" expression]\n'
          '                       ["," keyword_arguments] ["," "**" '
          'expression]\n'
          '                     | "*" expression ["," keyword_arguments] '
          '["," "**" expression]\n'
          '                     | "**" expression\n'
          '   positional_arguments ::= expression ("," expression)*\n'
          '   keyword_arguments    ::= keyword_item ("," keyword_item)*\n'
          '   keyword_item         ::= identifier "=" expression\n'
          '\n'
          'An optional trailing comma may be present after the positional '
          'and\n'
          'keyword arguments but does nie affect the semantics.\n'
          '\n'
          'The primary must evaluate to a callable object (user-defined\n'
          'functions, built-in functions, methods of built-in objects, '
          'class\n'
          'objects, methods of klasa instances, oraz all objects having a\n'
          '"__call__()" method are callable).  All argument expressions are\n'
          'evaluated before the call jest attempted.  Please refer to section\n'
          '*Function definitions* dla the syntax of formal *parameter* '
          'lists.\n'
          '\n'
          'If keyword arguments are present, they are first converted to\n'
          'positional arguments, jako follows.  First, a list of unfilled '
          'slots is\n'
          'created dla the formal parameters.  If there are N positional\n'
          'arguments, they are placed w the first N slots.  Next, dla each\n'
          'keyword argument, the identifier jest used to determine the\n'
          'corresponding slot (jeżeli the identifier jest the same jako the first '
          'formal\n'
          'parameter name, the first slot jest used, oraz so on).  If the slot '
          'is\n'
          'already filled, a "TypeError" exception jest podnieśd. Otherwise, '
          'the\n'
          'value of the argument jest placed w the slot, filling it (even jeżeli '
          'the\n'
          'expression jest "Nic", it fills the slot).  When all arguments '
          'have\n'
          'been processed, the slots that are still unfilled are filled przy '
          'the\n'
          'corresponding default value z the function definition.  '
          '(Default\n'
          'values are calculated, once, when the function jest defined; thus, '
          'a\n'
          'mutable object such jako a list albo dictionary used jako default value '
          'will\n'
          "be shared by all calls that don't specify an argument value dla "
          'the\n'
          'corresponding slot; this should usually be avoided.)  If there '
          'are any\n'
          'unfilled slots dla which no default value jest specified, a '
          '"TypeError"\n'
          'exception jest podnieśd.  Otherwise, the list of filled slots jest used '
          'as\n'
          'the argument list dla the call.\n'
          '\n'
          '**CPython implementation detail:** An implementation may provide\n'
          'built-in functions whose positional parameters do nie have names, '
          'even\n'
          "jeżeli they are 'named' dla the purpose of documentation, oraz which\n"
          'therefore cannot be supplied by keyword.  In CPython, this jest the '
          'case\n'
          'dla functions implemented w C that use "PyArg_ParseTuple()" to '
          'parse\n'
          'their arguments.\n'
          '\n'
          'If there are more positional arguments than there are formal '
          'parameter\n'
          'slots, a "TypeError" exception jest podnieśd, unless a formal '
          'parameter\n'
          'using the syntax "*identifier" jest present; w this case, that '
          'formal\n'
          'parameter receives a tuple containing the excess positional '
          'arguments\n'
          '(or an empty tuple jeżeli there were no excess positional '
          'arguments).\n'
          '\n'
          'If any keyword argument does nie correspond to a formal '
          'parameter\n'
          'name, a "TypeError" exception jest podnieśd, unless a formal '
          'parameter\n'
          'using the syntax "**identifier" jest present; w this case, that '
          'formal\n'
          'parameter receives a dictionary containing the excess keyword\n'
          'arguments (using the keywords jako keys oraz the argument values as\n'
          'corresponding values), albo a (new) empty dictionary jeżeli there were '
          'no\n'
          'excess keyword arguments.\n'
          '\n'
          'If the syntax "*expression" appears w the function call, '
          '"expression"\n'
          'must evaluate to an iterable.  Elements z this iterable are '
          'treated\n'
          'as jeżeli they were additional positional arguments; jeżeli there are\n'
          'positional arguments *x1*, ..., *xN*, oraz "expression" evaluates '
          'to a\n'
          'sequence *y1*, ..., *yM*, this jest equivalent to a call przy M+N\n'
          'positional arguments *x1*, ..., *xN*, *y1*, ..., *yM*.\n'
          '\n'
          'A consequence of this jest that although the "*expression" syntax '
          'may\n'
          'appear *after* some keyword arguments, it jest processed *before* '
          'the\n'
          'keyword arguments (and the "**expression" argument, jeżeli any -- '
          'see\n'
          'below).  So:\n'
          '\n'
          '   >>> def f(a, b):\n'
          '   ...  print(a, b)\n'
          '   ...\n'
          '   >>> f(b=1, *(2,))\n'
          '   2 1\n'
          '   >>> f(a=1, *(2,))\n'
          '   Traceback (most recent call last):\n'
          '     File "<stdin>", line 1, w ?\n'
          "   TypeError: f() got multiple values dla keyword argument 'a'\n"
          '   >>> f(1, *(2,))\n'
          '   1 2\n'
          '\n'
          'It jest unusual dla both keyword arguments oraz the "*expression" '
          'syntax\n'
          'to be used w the same call, so w practice this confusion does '
          'not\n'
          'arise.\n'
          '\n'
          'If the syntax "**expression" appears w the function call,\n'
          '"expression" must evaluate to a mapping, the contents of which '
          'are\n'
          'treated jako additional keyword arguments.  In the case of a '
          'keyword\n'
          'appearing w both "expression" oraz jako an explicit keyword '
          'argument, a\n'
          '"TypeError" exception jest podnieśd.\n'
          '\n'
          'Formal parameters using the syntax "*identifier" albo '
          '"**identifier"\n'
          'cannot be used jako positional argument slots albo jako keyword '
          'argument\n'
          'names.\n'
          '\n'
          'A call always returns some value, possibly "Nic", unless it '
          'raises an\n'
          'exception.  How this value jest computed depends on the type of '
          'the\n'
          'callable object.\n'
          '\n'
          'If it is---\n'
          '\n'
          'a user-defined function:\n'
          '   The code block dla the function jest executed, dalejing it the\n'
          '   argument list.  The first thing the code block will do jest bind '
          'the\n'
          '   formal parameters to the arguments; this jest described w '
          'section\n'
          '   *Function definitions*.  When the code block executes a '
          '"return"\n'
          '   statement, this specifies the zwróć value of the function '
          'call.\n'
          '\n'
          'a built-in function albo method:\n'
          '   The result jest up to the interpreter; see *Built-in Functions* '
          'for\n'
          '   the descriptions of built-in functions oraz methods.\n'
          '\n'
          'a klasa object:\n'
          '   A new instance of that klasa jest returned.\n'
          '\n'
          'a klasa instance method:\n'
          '   The corresponding user-defined function jest called, przy an '
          'argument\n'
          '   list that jest one longer than the argument list of the call: '
          'the\n'
          '   instance becomes the first argument.\n'
          '\n'
          'a klasa instance:\n'
          '   The klasa must define a "__call__()" method; the effect jest '
          'then the\n'
          '   same jako jeżeli that method was called.\n',
 'class': '\n'
          'Class definitions\n'
          '*****************\n'
          '\n'
          'A klasa definition defines a klasa object (see section *The '
          'standard\n'
          'type hierarchy*):\n'
          '\n'
          '   classdef    ::= [decorators] "class" classname [inheritance] '
          '":" suite\n'
          '   inheritance ::= "(" [parameter_list] ")"\n'
          '   classname   ::= identifier\n'
          '\n'
          'A klasa definition jest an executable statement.  The inheritance '
          'list\n'
          'usually gives a list of base classes (see *Customizing klasa '
          'creation*\n'
          'dla more advanced uses), so each item w the list should evaluate '
          'to a\n'
          'class object which allows subclassing.  Classes without an '
          'inheritance\n'
          'list inherit, by default, z the base klasa "object"; hence,\n'
          '\n'
          '   klasa Foo:\n'
          '       dalej\n'
          '\n'
          'is equivalent to\n'
          '\n'
          '   klasa Foo(object):\n'
          '       dalej\n'
          '\n'
          "The class's suite jest then executed w a new execution frame (see\n"
          '*Naming oraz binding*), using a newly created local namespace oraz '
          'the\n'
          'original global namespace. (Usually, the suite contains mostly\n'
          "function definitions.)  When the class's suite finishes "
          'execution, its\n'
          'execution frame jest discarded but its local namespace jest saved. '
          '[4] A\n'
          'class object jest then created using the inheritance list dla the '
          'base\n'
          'classes oraz the saved local namespace dla the attribute '
          'dictionary.\n'
          'The klasa name jest bound to this klasa object w the original '
          'local\n'
          'namespace.\n'
          '\n'
          'Class creation can be customized heavily using *metaclasses*.\n'
          '\n'
          'Classes can also be decorated: just like when decorating '
          'functions,\n'
          '\n'
          '   @f1(arg)\n'
          '   @f2\n'
          '   klasa Foo: dalej\n'
          '\n'
          'is equivalent to\n'
          '\n'
          '   klasa Foo: dalej\n'
          '   Foo = f1(arg)(f2(Foo))\n'
          '\n'
          'The evaluation rules dla the decorator expressions are the same '
          'as for\n'
          'function decorators.  The result must be a klasa object, which jest '
          'then\n'
          'bound to the klasa name.\n'
          '\n'
          "**Programmer's note:** Variables defined w the klasa definition "
          'are\n'
          'class attributes; they are shared by instances.  Instance '
          'attributes\n'
          'can be set w a method przy "self.name = value".  Both klasa and\n'
          'instance attributes are accessible through the notation '
          '""self.name"",\n'
          'and an instance attribute hides a klasa attribute przy the same '
          'name\n'
          'when accessed w this way.  Class attributes can be used jako '
          'defaults\n'
          'dla instance attributes, but using mutable values there can lead '
          'to\n'
          'unexpected results.  *Descriptors* can be used to create '
          'instance\n'
          'variables przy different implementation details.\n'
          '\n'
          'See also: **PEP 3115** - Metaclasses w Python 3 **PEP 3129** -\n'
          '  Class Decorators\n',
 'comparisons': '\n'
                'Comparisons\n'
                '***********\n'
                '\n'
                'Unlike C, all comparison operations w Python have the same '
                'priority,\n'
                'which jest lower than that of any arithmetic, shifting albo '
                'bitwise\n'
                'operation.  Also unlike C, expressions like "a < b < c" '
                'have the\n'
                'interpretation that jest conventional w mathematics:\n'
                '\n'
                '   comparison    ::= or_expr ( comp_operator or_expr )*\n'
                '   comp_operator ::= "<" | ">" | "==" | ">=" | "<=" | "!="\n'
                '                     | "is" ["not"] | ["not"] "in"\n'
                '\n'
                'Comparisons uzyskaj boolean values: "Prawda" albo "Nieprawda".\n'
                '\n'
                'Comparisons can be chained arbitrarily, e.g., "x < y <= z" '
                'is\n'
                'equivalent to "x < y oraz y <= z", wyjąwszy that "y" jest '
                'evaluated only\n'
                'once (but w both cases "z" jest nie evaluated at all when "x '
                '< y" is\n'
                'found to be false).\n'
                '\n'
                'Formally, jeżeli *a*, *b*, *c*, ..., *y*, *z* are expressions '
                'and *op1*,\n'
                '*op2*, ..., *opN* are comparison operators, then "a op1 b '
                'op2 c ... y\n'
                'opN z" jest equivalent to "a op1 b oraz b op2 c oraz ... y opN '
                'z", except\n'
                'that each expression jest evaluated at most once.\n'
                '\n'
                'Note that "a op1 b op2 c" doesn\'t imply any kind of '
                'comparison between\n'
                '*a* oraz *c*, so that, e.g., "x < y > z" jest perfectly legal '
                '(though\n'
                'perhaps nie pretty).\n'
                '\n'
                'The operators "<", ">", "==", ">=", "<=", oraz "!=" compare '
                'the values\n'
                'of two objects.  The objects need nie have the same type. '
                'If both are\n'
                'numbers, they are converted to a common type.  Otherwise, '
                'the "==" and\n'
                '"!=" operators *always* consider objects of different types '
                'to be\n'
                'unequal, dopóki the "<", ">", ">=" oraz "<=" operators podnieś '
                'a\n'
                '"TypeError" when comparing objects of different types that '
                'do not\n'
                'implement these operators dla the given pair of types.  You '
                'can\n'
                'control comparison behavior of objects of non-built-in '
                'types by\n'
                'defining rich comparison methods like "__gt__()", described '
                'in section\n'
                '*Basic customization*.\n'
                '\n'
                'Comparison of objects of the same type depends on the '
                'type:\n'
                '\n'
                '* Numbers are compared arithmetically.\n'
                '\n'
                '* The values "float(\'NaN\')" oraz "Decimal(\'NaN\')" are '
                'special. They\n'
                '  are identical to themselves, "x jest x" but are nie equal '
                'to\n'
                '  themselves, "x != x".  Additionally, comparing any value '
                'to a\n'
                '  not-a-number value will zwróć "Nieprawda".  For example, '
                'both "3 <\n'
                '  float(\'NaN\')" oraz "float(\'NaN\') < 3" will zwróć '
                '"Nieprawda".\n'
                '\n'
                '* Bytes objects are compared lexicographically using the '
                'numeric\n'
                '  values of their elements.\n'
                '\n'
                '* Strings are compared lexicographically using the numeric\n'
                '  equivalents (the result of the built-in function "ord()") '
                'of their\n'
                "  characters. [3] String oraz bytes object can't be "
                'compared!\n'
                '\n'
                '* Tuples oraz lists are compared lexicographically using '
                'comparison\n'
                '  of corresponding elements.  This means that to compare '
                'equal, each\n'
                '  element must compare equal oraz the two sequences must be '
                'of the same\n'
                '  type oraz have the same length.\n'
                '\n'
                '  If nie equal, the sequences are ordered the same jako their '
                'first\n'
                '  differing elements.  For example, "[1,2,x] <= [1,2,y]" '
                'has the same\n'
                '  value jako "x <= y".  If the corresponding element does nie '
                'exist, the\n'
                '  shorter sequence jest ordered first (dla example, "[1,2] < '
                '[1,2,3]").\n'
                '\n'
                '* Mappings (dictionaries) compare equal jeżeli oraz only jeżeli they '
                'have the\n'
                '  same "(key, value)" pairs. Order comparisons "(\'<\', '
                "'<=', '>=',\n"
                '  \'>\')" podnieś "TypeError".\n'
                '\n'
                '* Sets oraz frozensets define comparison operators to mean '
                'subset and\n'
                '  superset tests.  Those relations do nie define total '
                'orderings (the\n'
                '  two sets "{1,2}" oraz "{2,3}" are nie equal, nor subsets '
                'of one\n'
                '  another, nor supersets of one another).  Accordingly, '
                'sets are not\n'
                '  appropriate arguments dla functions which depend on total '
                'ordering.\n'
                '  For example, "min()", "max()", oraz "sorted()" produce '
                'undefined\n'
                '  results given a list of sets jako inputs.\n'
                '\n'
                '* Most other objects of built-in types compare unequal '
                'unless they\n'
                '  are the same object; the choice whether one object jest '
                'considered\n'
                '  smaller albo larger than another one jest made arbitrarily '
                'but\n'
                '  consistently within one execution of a program.\n'
                '\n'
                'Comparison of objects of differing types depends on whether '
                'either of\n'
                'the types provide explicit support dla the comparison.  '
                'Most numeric\n'
                'types can be compared przy one another.  When cross-type '
                'comparison is\n'
                'not supported, the comparison method returns '
                '"NotImplemented".\n'
                '\n'
                'The operators "in" oraz "not in" test dla membership.  "x w '
                's"\n'
                'evaluates to true jeżeli *x* jest a member of *s*, oraz false '
                'otherwise.  "x\n'
                'not w s" returns the negation of "x w s".  All built-in '
                'sequences\n'
                'and set types support this jako well jako dictionary, dla which '
                '"in" tests\n'
                'whether the dictionary has a given key. For container types '
                'such as\n'
                'list, tuple, set, frozenset, dict, albo collections.deque, '
                'the\n'
                'expression "x w y" jest equivalent to "any(x jest e albo x == e '
                'dla e in\n'
                'y)".\n'
                '\n'
                'For the string oraz bytes types, "x w y" jest true jeżeli oraz '
                'only jeżeli *x* is\n'
                'a substring of *y*.  An equivalent test jest "y.find(x) != '
                '-1".  Empty\n'
                'strings are always considered to be a substring of any '
                'other string,\n'
                'so """ w "abc"" will zwróć "Prawda".\n'
                '\n'
                'For user-defined classes which define the "__contains__()" '
                'method, "x\n'
                'in y" jest true jeżeli oraz only jeżeli "y.__contains__(x)" jest true.\n'
                '\n'
                'For user-defined classes which do nie define '
                '"__contains__()" but do\n'
                'define "__iter__()", "x w y" jest true jeżeli some value "z" '
                'przy "x == z"\n'
                'is produced dopóki iterating over "y".  If an exception jest '
                'raised\n'
                'during the iteration, it jest jako jeżeli "in" podnieśd that '
                'exception.\n'
                '\n'
                'Lastly, the old-style iteration protocol jest tried: jeżeli a '
                'class defines\n'
                '"__getitem__()", "x w y" jest true jeżeli oraz only jeżeli there jest a '
                'non-\n'
                'negative integer index *i* such that "x == y[i]", oraz all '
                'lower\n'
                'integer indices do nie podnieś "IndexError" exception.  (If '
                'any other\n'
                'exception jest podnieśd, it jest jako jeżeli "in" podnieśd that '
                'exception).\n'
                '\n'
                'The operator "not in" jest defined to have the inverse true '
                'value of\n'
                '"in".\n'
                '\n'
                'The operators "is" oraz "is not" test dla object identity: '
                '"x jest y" is\n'
                'true jeżeli oraz only jeżeli *x* oraz *y* are the same object.  "x jest '
                'not y"\n'
                'uzyskajs the inverse truth value. [4]\n',
 'compound': '\n'
             'Compound statements\n'
             '*******************\n'
             '\n'
             'Compound statements contain (groups of) other statements; they '
             'affect\n'
             'or control the execution of those other statements w some '
             'way.  In\n'
             'general, compound statements span multiple lines, although w '
             'simple\n'
             'incarnations a whole compound statement may be contained w '
             'one line.\n'
             '\n'
             'The "if", "while" oraz "for" statements implement traditional '
             'control\n'
             'flow constructs.  "try" specifies exception handlers and/or '
             'cleanup\n'
             'code dla a group of statements, dopóki the "with" statement '
             'allows the\n'
             'execution of initialization oraz finalization code around a '
             'block of\n'
             'code.  Function oraz klasa definitions are also syntactically '
             'compound\n'
             'statements.\n'
             '\n'
             "A compound statement consists of one albo more 'clauses.'  A "
             'clause\n'
             "consists of a header oraz a 'suite.'  The clause headers of a\n"
             'particular compound statement are all at the same indentation '
             'level.\n'
             'Each clause header begins przy a uniquely identifying keyword '
             'and ends\n'
             'przy a colon.  A suite jest a group of statements controlled by '
             'a\n'
             'clause.  A suite can be one albo more semicolon-separated '
             'simple\n'
             'statements on the same line jako the header, following the '
             "header's\n"
             'colon, albo it can be one albo more indented statements on '
             'subsequent\n'
             'lines.  Only the latter form of a suite can contain nested '
             'compound\n'
             'statements; the following jest illegal, mostly because it '
             "wouldn't be\n"
             'clear to which "if" clause a following "inaczej" clause would '
             'belong:\n'
             '\n'
             '   jeżeli test1: jeżeli test2: print(x)\n'
             '\n'
             'Also note that the semicolon binds tighter than the colon w '
             'this\n'
             'context, so that w the following example, either all albo none '
             'of the\n'
             '"print()" calls are executed:\n'
             '\n'
             '   jeżeli x < y < z: print(x); print(y); print(z)\n'
             '\n'
             'Summarizing:\n'
             '\n'
             '   compound_stmt ::= if_stmt\n'
             '                     | while_stmt\n'
             '                     | for_stmt\n'
             '                     | try_stmt\n'
             '                     | with_stmt\n'
             '                     | funcdef\n'
             '                     | classdef\n'
             '                     | async_with_stmt\n'
             '                     | async_for_stmt\n'
             '                     | async_funcdef\n'
             '   suite         ::= stmt_list NEWLINE | NEWLINE INDENT '
             'statement+ DEDENT\n'
             '   statement     ::= stmt_list NEWLINE | compound_stmt\n'
             '   stmt_list     ::= simple_stmt (";" simple_stmt)* [";"]\n'
             '\n'
             'Note that statements always end w a "NEWLINE" possibly '
             'followed by a\n'
             '"DEDENT".  Also note that optional continuation clauses always '
             'begin\n'
             'przy a keyword that cannot start a statement, thus there are '
             'no\n'
             'ambiguities (the \'dangling "inaczej"\' problem jest solved w '
             'Python by\n'
             'requiring nested "if" statements to be indented).\n'
             '\n'
             'The formatting of the grammar rules w the following sections '
             'places\n'
             'each clause on a separate line dla clarity.\n'
             '\n'
             '\n'
             'The "if" statement\n'
             '==================\n'
             '\n'
             'The "if" statement jest used dla conditional execution:\n'
             '\n'
             '   if_stmt ::= "if" expression ":" suite\n'
             '               ( "elif" expression ":" suite )*\n'
             '               ["inaczej" ":" suite]\n'
             '\n'
             'It selects exactly one of the suites by evaluating the '
             'expressions one\n'
             'by one until one jest found to be true (see section *Boolean '
             'operations*\n'
             'dla the definition of true oraz false); then that suite jest '
             'executed\n'
             '(and no other part of the "if" statement jest executed albo '
             'evaluated).\n'
             'If all expressions are false, the suite of the "inaczej" clause, '
             'if\n'
             'present, jest executed.\n'
             '\n'
             '\n'
             'The "while" statement\n'
             '=====================\n'
             '\n'
             'The "while" statement jest used dla repeated execution jako long '
             'as an\n'
             'expression jest true:\n'
             '\n'
             '   while_stmt ::= "while" expression ":" suite\n'
             '                  ["inaczej" ":" suite]\n'
             '\n'
             'This repeatedly tests the expression and, jeżeli it jest true, '
             'executes the\n'
             'first suite; jeżeli the expression jest false (which may be the '
             'first time\n'
             'it jest tested) the suite of the "inaczej" clause, jeżeli present, jest '
             'executed\n'
             'and the loop terminates.\n'
             '\n'
             'A "break" statement executed w the first suite terminates the '
             'loop\n'
             'without executing the "inaczej" clause\'s suite.  A "continue" '
             'statement\n'
             'executed w the first suite skips the rest of the suite oraz '
             'goes back\n'
             'to testing the expression.\n'
             '\n'
             '\n'
             'The "for" statement\n'
             '===================\n'
             '\n'
             'The "for" statement jest used to iterate over the elements of a '
             'sequence\n'
             '(such jako a string, tuple albo list) albo other iterable object:\n'
             '\n'
             '   for_stmt ::= "for" target_list "in" expression_list ":" '
             'suite\n'
             '                ["inaczej" ":" suite]\n'
             '\n'
             'The expression list jest evaluated once; it should uzyskaj an '
             'iterable\n'
             'object.  An iterator jest created dla the result of the\n'
             '"expression_list".  The suite jest then executed once dla each '
             'item\n'
             'provided by the iterator, w the order returned by the '
             'iterator.  Each\n'
             'item w turn jest assigned to the target list using the standard '
             'rules\n'
             'dla assignments (see *Assignment statements*), oraz then the '
             'suite is\n'
             'executed.  When the items are exhausted (which jest immediately '
             'when the\n'
             'sequence jest empty albo an iterator podnieśs a "StopIteration" '
             'exception),\n'
             'the suite w the "inaczej" clause, jeżeli present, jest executed, oraz '
             'the loop\n'
             'terminates.\n'
             '\n'
             'A "break" statement executed w the first suite terminates the '
             'loop\n'
             'without executing the "inaczej" clause\'s suite.  A "continue" '
             'statement\n'
             'executed w the first suite skips the rest of the suite oraz '
             'continues\n'
             'przy the next item, albo przy the "inaczej" clause jeżeli there jest no '
             'next\n'
             'item.\n'
             '\n'
             'The for-loop makes assignments to the variables(s) w the '
             'target list.\n'
             'This overwrites all previous assignments to those variables '
             'including\n'
             'those made w the suite of the for-loop:\n'
             '\n'
             '   dla i w range(10):\n'
             '       print(i)\n'
             '       i = 5             # this will nie affect the for-loop\n'
             '                         # because i will be overwritten przy '
             'the next\n'
             '                         # index w the range\n'
             '\n'
             'Names w the target list are nie deleted when the loop jest '
             'finished,\n'
             'but jeżeli the sequence jest empty, they will nie have been assigned '
             'to at\n'
             'all by the loop.  Hint: the built-in function "range()" '
             'returns an\n'
             'iterator of integers suitable to emulate the effect of '
             'Pascal\'s "dla i\n'
             ':= a to b do"; e.g., "list(range(3))" returns the list "[0, 1, '
             '2]".\n'
             '\n'
             'Note: There jest a subtlety when the sequence jest being modified '
             'by the\n'
             '  loop (this can only occur dla mutable sequences, i.e. '
             'lists).  An\n'
             '  internal counter jest used to keep track of which item jest used '
             'next,\n'
             '  oraz this jest incremented on each iteration.  When this '
             'counter has\n'
             '  reached the length of the sequence the loop terminates.  '
             'This means\n'
             '  that jeżeli the suite deletes the current (or a previous) item '
             'z the\n'
             '  sequence, the next item will be skipped (since it gets the '
             'index of\n'
             '  the current item which has already been treated).  Likewise, '
             'jeżeli the\n'
             '  suite inserts an item w the sequence before the current '
             'item, the\n'
             '  current item will be treated again the next time through the '
             'loop.\n'
             '  This can lead to nasty bugs that can be avoided by making a\n'
             '  temporary copy using a slice of the whole sequence, e.g.,\n'
             '\n'
             '     dla x w a[:]:\n'
             '         jeżeli x < 0: a.remove(x)\n'
             '\n'
             '\n'
             'The "try" statement\n'
             '===================\n'
             '\n'
             'The "try" statement specifies exception handlers and/or '
             'cleanup code\n'
             'dla a group of statements:\n'
             '\n'
             '   try_stmt  ::= try1_stmt | try2_stmt\n'
             '   try1_stmt ::= "try" ":" suite\n'
             '                 ("except" [expression ["as" identifier]] ":" '
             'suite)+\n'
             '                 ["inaczej" ":" suite]\n'
             '                 ["finally" ":" suite]\n'
             '   try2_stmt ::= "try" ":" suite\n'
             '                 "finally" ":" suite\n'
             '\n'
             'The "except" clause(s) specify one albo more exception handlers. '
             'When no\n'
             'exception occurs w the "try" clause, no exception handler is\n'
             'executed. When an exception occurs w the "try" suite, a '
             'search dla an\n'
             'exception handler jest started.  This search inspects the wyjąwszy '
             'clauses\n'
             'in turn until one jest found that matches the exception.  An '
             'expression-\n'
             'less wyjąwszy clause, jeżeli present, must be last; it matches any\n'
             'exception.  For an wyjąwszy clause przy an expression, that '
             'expression\n'
             'is evaluated, oraz the clause matches the exception jeżeli the '
             'resulting\n'
             'object jest "compatible" przy the exception.  An object jest '
             'compatible\n'
             'przy an exception jeżeli it jest the klasa albo a base klasa of the '
             'exception\n'
             'object albo a tuple containing an item compatible przy the '
             'exception.\n'
             '\n'
             'If no wyjąwszy clause matches the exception, the search dla an '
             'exception\n'
             'handler continues w the surrounding code oraz on the '
             'invocation stack.\n'
             '[1]\n'
             '\n'
             'If the evaluation of an expression w the header of an wyjąwszy '
             'clause\n'
             'raises an exception, the original search dla a handler jest '
             'canceled and\n'
             'a search starts dla the new exception w the surrounding code '
             'and on\n'
             'the call stack (it jest treated jako jeżeli the entire "try" statement '
             'raised\n'
             'the exception).\n'
             '\n'
             'When a matching wyjąwszy clause jest found, the exception jest '
             'assigned to\n'
             'the target specified after the "as" keyword w that wyjąwszy '
             'clause, if\n'
             "present, oraz the wyjąwszy clause's suite jest executed.  All "
             'except\n'
             'clauses must have an executable block.  When the end of this '
             'block is\n'
             'reached, execution continues normally after the entire try '
             'statement.\n'
             '(This means that jeżeli two nested handlers exist dla the same '
             'exception,\n'
             'and the exception occurs w the try clause of the inner '
             'handler, the\n'
             'outer handler will nie handle the exception.)\n'
             '\n'
             'When an exception has been assigned using "as target", it jest '
             'cleared\n'
             'at the end of the wyjąwszy clause.  This jest jako if\n'
             '\n'
             '   wyjąwszy E jako N:\n'
             '       foo\n'
             '\n'
             'was translated to\n'
             '\n'
             '   wyjąwszy E jako N:\n'
             '       spróbuj:\n'
             '           foo\n'
             '       w_końcu:\n'
             '           usuń N\n'
             '\n'
             'This means the exception must be assigned to a different name '
             'to be\n'
             'able to refer to it after the wyjąwszy clause.  Exceptions are '
             'cleared\n'
             'because przy the traceback attached to them, they form a '
             'reference\n'
             'cycle przy the stack frame, keeping all locals w that frame '
             'alive\n'
             'until the next garbage collection occurs.\n'
             '\n'
             "Before an wyjąwszy clause's suite jest executed, details about "
             'the\n'
             'exception are stored w the "sys" module oraz can be accessed '
             'via\n'
             '"sys.exc_info()". "sys.exc_info()" returns a 3-tuple '
             'consisting of the\n'
             'exception class, the exception instance oraz a traceback object '
             '(see\n'
             'section *The standard type hierarchy*) identifying the point '
             'in the\n'
             'program where the exception occurred.  "sys.exc_info()" values '
             'are\n'
             'restored to their previous values (before the call) when '
             'returning\n'
             'z a function that handled an exception.\n'
             '\n'
             'The optional "inaczej" clause jest executed jeżeli oraz when control '
             'flows off\n'
             'the end of the "try" clause. [2] Exceptions w the "inaczej" '
             'clause are\n'
             'not handled by the preceding "except" clauses.\n'
             '\n'
             'If "finally" jest present, it specifies a \'cleanup\' handler.  '
             'The "try"\n'
             'clause jest executed, including any "except" oraz "inaczej" '
             'clauses.  If an\n'
             'exception occurs w any of the clauses oraz jest nie handled, '
             'the\n'
             'exception jest temporarily saved. The "finally" clause jest '
             'executed.  If\n'
             'there jest a saved exception it jest re-raised at the end of the '
             '"finally"\n'
             'clause.  If the "finally" clause podnieśs another exception, the '
             'saved\n'
             'exception jest set jako the context of the new exception. If the '
             '"finally"\n'
             'clause executes a "return" albo "break" statement, the saved '
             'exception\n'
             'is discarded:\n'
             '\n'
             '   >>> def f():\n'
             '   ...     spróbuj:\n'
             '   ...         1/0\n'
             '   ...     w_końcu:\n'
             '   ...         zwróć 42\n'
             '   ...\n'
             '   >>> f()\n'
             '   42\n'
             '\n'
             'The exception information jest nie available to the program '
             'during\n'
             'execution of the "finally" clause.\n'
             '\n'
             'When a "return", "break" albo "continue" statement jest executed '
             'in the\n'
             '"try" suite of a "try"..."finally" statement, the "finally" '
             'clause is\n'
             'also executed \'on the way out.\' A "continue" statement jest '
             'illegal in\n'
             'the "finally" clause. (The reason jest a problem przy the '
             'current\n'
             'implementation --- this restriction may be lifted w the '
             'future).\n'
             '\n'
             'The zwróć value of a function jest determined by the last '
             '"return"\n'
             'statement executed.  Since the "finally" clause always '
             'executes, a\n'
             '"return" statement executed w the "finally" clause will '
             'always be the\n'
             'last one executed:\n'
             '\n'
             '   >>> def foo():\n'
             '   ...     spróbuj:\n'
             "   ...         zwróć 'try'\n"
             '   ...     w_końcu:\n'
             "   ...         zwróć 'finally'\n"
             '   ...\n'
             '   >>> foo()\n'
             "   'finally'\n"
             '\n'
             'Additional information on exceptions can be found w section\n'
             '*Exceptions*, oraz information on using the "raise" statement '
             'to\n'
             'generate exceptions may be found w section *The podnieś '
             'statement*.\n'
             '\n'
             '\n'
             'The "with" statement\n'
             '====================\n'
             '\n'
             'The "with" statement jest used to wrap the execution of a block '
             'with\n'
             'methods defined by a context manager (see section *With '
             'Statement\n'
             'Context Managers*). This allows common '
             '"try"..."except"..."finally"\n'
             'usage patterns to be encapsulated dla convenient reuse.\n'
             '\n'
             '   with_stmt ::= "with" with_item ("," with_item)* ":" suite\n'
             '   with_item ::= expression ["as" target]\n'
             '\n'
             'The execution of the "with" statement przy one "item" proceeds '
             'as\n'
             'follows:\n'
             '\n'
             '1. The context expression (the expression given w the '
             '"with_item")\n'
             '   jest evaluated to obtain a context manager.\n'
             '\n'
             '2. The context manager\'s "__exit__()" jest loaded dla later '
             'use.\n'
             '\n'
             '3. The context manager\'s "__enter__()" method jest invoked.\n'
             '\n'
             '4. If a target was included w the "with" statement, the '
             'return\n'
             '   value z "__enter__()" jest assigned to it.\n'
             '\n'
             '   Note: The "with" statement guarantees that jeżeli the '
             '"__enter__()"\n'
             '     method returns without an error, then "__exit__()" will '
             'always be\n'
             '     called. Thus, jeżeli an error occurs during the assignment to '
             'the\n'
             '     target list, it will be treated the same jako an error '
             'occurring\n'
             '     within the suite would be. See step 6 below.\n'
             '\n'
             '5. The suite jest executed.\n'
             '\n'
             '6. The context manager\'s "__exit__()" method jest invoked.  If '
             'an\n'
             '   exception caused the suite to be exited, its type, value, '
             'and\n'
             '   traceback are dalejed jako arguments to "__exit__()". '
             'Otherwise, three\n'
             '   "Nic" arguments are supplied.\n'
             '\n'
             '   If the suite was exited due to an exception, oraz the zwróć '
             'value\n'
             '   z the "__exit__()" method was false, the exception jest '
             'reraised.\n'
             '   If the zwróć value was true, the exception jest suppressed, '
             'and\n'
             '   execution continues przy the statement following the '
             '"with"\n'
             '   statement.\n'
             '\n'
             '   If the suite was exited dla any reason other than an '
             'exception, the\n'
             '   zwróć value z "__exit__()" jest ignored, oraz execution '
             'proceeds\n'
             '   at the normal location dla the kind of exit that was '
             'taken.\n'
             '\n'
             'With more than one item, the context managers are processed jako '
             'if\n'
             'multiple "with" statements were nested:\n'
             '\n'
             '   przy A() jako a, B() jako b:\n'
             '       suite\n'
             '\n'
             'is equivalent to\n'
             '\n'
             '   przy A() jako a:\n'
             '       przy B() jako b:\n'
             '           suite\n'
             '\n'
             'Changed w version 3.1: Support dla multiple context '
             'expressions.\n'
             '\n'
             'See also: **PEP 0343** - The "with" statement\n'
             '\n'
             '     The specification, background, oraz examples dla the '
             'Python "with"\n'
             '     statement.\n'
             '\n'
             '\n'
             'Function definitions\n'
             '====================\n'
             '\n'
             'A function definition defines a user-defined function object '
             '(see\n'
             'section *The standard type hierarchy*):\n'
             '\n'
             '   funcdef        ::= [decorators] "def" funcname "(" '
             '[parameter_list] ")" ["->" expression] ":" suite\n'
             '   decorators     ::= decorator+\n'
             '   decorator      ::= "@" dotted_name ["(" [parameter_list '
             '[","]] ")"] NEWLINE\n'
             '   dotted_name    ::= identifier ("." identifier)*\n'
             '   parameter_list ::= (defparameter ",")*\n'
             '                      | "*" [parameter] ("," defparameter)* '
             '["," "**" parameter]\n'
             '                      | "**" parameter\n'
             '                      | defparameter [","] )\n'
             '   parameter      ::= identifier [":" expression]\n'
             '   defparameter   ::= parameter ["=" expression]\n'
             '   funcname       ::= identifier\n'
             '\n'
             'A function definition jest an executable statement.  Its '
             'execution binds\n'
             'the function name w the current local namespace to a function '
             'object\n'
             '(a wrapper around the executable code dla the function).  '
             'This\n'
             'function object contains a reference to the current global '
             'namespace\n'
             'as the global namespace to be used when the function jest '
             'called.\n'
             '\n'
             'The function definition does nie execute the function body; '
             'this gets\n'
             'executed only when the function jest called. [3]\n'
             '\n'
             'A function definition may be wrapped by one albo more '
             '*decorator*\n'
             'expressions. Decorator expressions are evaluated when the '
             'function is\n'
             'defined, w the scope that contains the function definition.  '
             'The\n'
             'result must be a callable, which jest invoked przy the function '
             'object\n'
             'as the only argument. The returned value jest bound to the '
             'function name\n'
             'instead of the function object.  Multiple decorators are '
             'applied in\n'
             'nested fashion. For example, the following code\n'
             '\n'
             '   @f1(arg)\n'
             '   @f2\n'
             '   def func(): dalej\n'
             '\n'
             'is equivalent to\n'
             '\n'
             '   def func(): dalej\n'
             '   func = f1(arg)(f2(func))\n'
             '\n'
             'When one albo more *parameters* have the form *parameter* "="\n'
             '*expression*, the function jest said to have "default parameter '
             'values."\n'
             'For a parameter przy a default value, the corresponding '
             '*argument* may\n'
             "be omitted z a call, w which case the parameter's default "
             'value is\n'
             'substituted.  If a parameter has a default value, all '
             'following\n'
             'parameters up until the ""*"" must also have a default value '
             '--- this\n'
             'is a syntactic restriction that jest nie expressed by the '
             'grammar.\n'
             '\n'
             '**Default parameter values are evaluated z left to right '
             'when the\n'
             'function definition jest executed.** This means that the '
             'expression is\n'
             'evaluated once, when the function jest defined, oraz that the '
             'same "pre-\n'
             'computed" value jest used dla each call.  This jest especially '
             'important\n'
             'to understand when a default parameter jest a mutable object, '
             'such jako a\n'
             'list albo a dictionary: jeżeli the function modifies the object '
             '(e.g. by\n'
             'appending an item to a list), the default value jest w effect '
             'modified.\n'
             'This jest generally nie what was intended.  A way around this jest '
             'to use\n'
             '"Nic" jako the default, oraz explicitly test dla it w the body '
             'of the\n'
             'function, e.g.:\n'
             '\n'
             '   def whats_on_the_telly(penguin=Nic):\n'
             '       jeżeli penguin jest Nic:\n'
             '           penguin = []\n'
             '       penguin.append("property of the zoo")\n'
             '       zwróć penguin\n'
             '\n'
             'Function call semantics are described w more detail w '
             'section\n'
             '*Calls*. A function call always assigns values to all '
             'parameters\n'
             'mentioned w the parameter list, either z position '
             'arguments, from\n'
             'keyword arguments, albo z default values.  If the form\n'
             '""*identifier"" jest present, it jest initialized to a tuple '
             'receiving any\n'
             'excess positional parameters, defaulting to the empty tuple.  '
             'If the\n'
             'form ""**identifier"" jest present, it jest initialized to a new\n'
             'dictionary receiving any excess keyword arguments, defaulting '
             'to a new\n'
             'empty dictionary. Parameters after ""*"" albo ""*identifier"" '
             'are\n'
             'keyword-only parameters oraz may only be dalejed used keyword '
             'arguments.\n'
             '\n'
             'Parameters may have annotations of the form "": expression"" '
             'following\n'
             'the parameter name.  Any parameter may have an annotation even '
             'those\n'
             'of the form "*identifier" albo "**identifier".  Functions may '
             'have\n'
             '"return" annotation of the form ""-> expression"" after the '
             'parameter\n'
             'list.  These annotations can be any valid Python expression '
             'and are\n'
             'evaluated when the function definition jest executed.  '
             'Annotations may\n'
             'be evaluated w a different order than they appear w the '
             'source code.\n'
             'The presence of annotations does nie change the semantics of '
             'a\n'
             'function.  The annotation values are available jako values of a\n'
             "dictionary keyed by the parameters' names w the "
             '"__annotations__"\n'
             'attribute of the function object.\n'
             '\n'
             'It jest also possible to create anonymous functions (functions '
             'not bound\n'
             'to a name), dla immediate use w expressions.  This uses '
             'lambda\n'
             'expressions, described w section *Lambdas*.  Note that the '
             'lambda\n'
             'expression jest merely a shorthand dla a simplified function '
             'definition;\n'
             'a function defined w a ""def"" statement can be dalejed around '
             'or\n'
             'assigned to another name just like a function defined by a '
             'lambda\n'
             'expression.  The ""def"" form jest actually more powerful since '
             'it\n'
             'allows the execution of multiple statements oraz annotations.\n'
             '\n'
             "**Programmer's note:** Functions are first-class objects.  A "
             '""def""\n'
             'statement executed inside a function definition defines a '
             'local\n'
             'function that can be returned albo dalejed around.  Free '
             'variables used\n'
             'in the nested function can access the local variables of the '
             'function\n'
             'containing the def.  See section *Naming oraz binding* dla '
             'details.\n'
             '\n'
             'See also: **PEP 3107** - Function Annotations\n'
             '\n'
             '     The original specification dla function annotations.\n'
             '\n'
             '\n'
             'Class definitions\n'
             '=================\n'
             '\n'
             'A klasa definition defines a klasa object (see section *The '
             'standard\n'
             'type hierarchy*):\n'
             '\n'
             '   classdef    ::= [decorators] "class" classname '
             '[inheritance] ":" suite\n'
             '   inheritance ::= "(" [parameter_list] ")"\n'
             '   classname   ::= identifier\n'
             '\n'
             'A klasa definition jest an executable statement.  The '
             'inheritance list\n'
             'usually gives a list of base classes (see *Customizing klasa '
             'creation*\n'
             'dla more advanced uses), so each item w the list should '
             'evaluate to a\n'
             'class object which allows subclassing.  Classes without an '
             'inheritance\n'
             'list inherit, by default, z the base klasa "object"; '
             'hence,\n'
             '\n'
             '   klasa Foo:\n'
             '       dalej\n'
             '\n'
             'is equivalent to\n'
             '\n'
             '   klasa Foo(object):\n'
             '       dalej\n'
             '\n'
             "The class's suite jest then executed w a new execution frame "
             '(see\n'
             '*Naming oraz binding*), using a newly created local namespace '
             'and the\n'
             'original global namespace. (Usually, the suite contains '
             'mostly\n'
             "function definitions.)  When the class's suite finishes "
             'execution, its\n'
             'execution frame jest discarded but its local namespace jest saved. '
             '[4] A\n'
             'class object jest then created using the inheritance list dla '
             'the base\n'
             'classes oraz the saved local namespace dla the attribute '
             'dictionary.\n'
             'The klasa name jest bound to this klasa object w the original '
             'local\n'
             'namespace.\n'
             '\n'
             'Class creation can be customized heavily using *metaclasses*.\n'
             '\n'
             'Classes can also be decorated: just like when decorating '
             'functions,\n'
             '\n'
             '   @f1(arg)\n'
             '   @f2\n'
             '   klasa Foo: dalej\n'
             '\n'
             'is equivalent to\n'
             '\n'
             '   klasa Foo: dalej\n'
             '   Foo = f1(arg)(f2(Foo))\n'
             '\n'
             'The evaluation rules dla the decorator expressions are the '
             'same jako for\n'
             'function decorators.  The result must be a klasa object, which '
             'is then\n'
             'bound to the klasa name.\n'
             '\n'
             "**Programmer's note:** Variables defined w the klasa "
             'definition are\n'
             'class attributes; they are shared by instances.  Instance '
             'attributes\n'
             'can be set w a method przy "self.name = value".  Both klasa '
             'and\n'
             'instance attributes are accessible through the notation '
             '""self.name"",\n'
             'and an instance attribute hides a klasa attribute przy the '
             'same name\n'
             'when accessed w this way.  Class attributes can be used jako '
             'defaults\n'
             'dla instance attributes, but using mutable values there can '
             'lead to\n'
             'unexpected results.  *Descriptors* can be used to create '
             'instance\n'
             'variables przy different implementation details.\n'
             '\n'
             'See also: **PEP 3115** - Metaclasses w Python 3 **PEP 3129** '
             '-\n'
             '  Class Decorators\n'
             '\n'
             '\n'
             'Coroutines\n'
             '==========\n'
             '\n'
             'New w version 3.5.\n'
             '\n'
             '\n'
             'Coroutine function definition\n'
             '-----------------------------\n'
             '\n'
             '   async_funcdef ::= [decorators] "async" "def" funcname "(" '
             '[parameter_list] ")" ["->" expression] ":" suite\n'
             '\n'
             'Execution of Python coroutines can be suspended oraz resumed at '
             'many\n'
             'points (see *coroutine*).  In the body of a coroutine, any '
             '"await" and\n'
             '"async" identifiers become reserved keywords; "await" '
             'expressions,\n'
             '"async for" oraz "async with" can only be used w coroutine '
             'bodies.\n'
             '\n'
             'Functions defined przy "async def" syntax are always '
             'coroutine\n'
             'functions, even jeżeli they do nie contain "await" albo "async" '
             'keywords.\n'
             '\n'
             'It jest a "SyntaxError" to use "uzyskaj" expressions w "async '
             'def"\n'
             'coroutines.\n'
             '\n'
             'An example of a coroutine function:\n'
             '\n'
             '   async def func(param1, param2):\n'
             '       do_stuff()\n'
             '       await some_coroutine()\n'
             '\n'
             '\n'
             'The "async for" statement\n'
             '-------------------------\n'
             '\n'
             '   async_for_stmt ::= "async" for_stmt\n'
             '\n'
             'An *asynchronous iterable* jest able to call asynchronous code '
             'in its\n'
             '*iter* implementation, oraz *asynchronous iterator* can call\n'
             'asynchronous code w its *next* method.\n'
             '\n'
             'The "async for" statement allows convenient iteration over\n'
             'asynchronous iterators.\n'
             '\n'
             'The following code:\n'
             '\n'
             '   async dla TARGET w ITER:\n'
             '       BLOCK\n'
             '   inaczej:\n'
             '       BLOCK2\n'
             '\n'
             'Is semantically equivalent to:\n'
             '\n'
             '   iter = (ITER)\n'
             '   iter = await type(iter).__aiter__(iter)\n'
             '   running = Prawda\n'
             '   dopóki running:\n'
             '       spróbuj:\n'
             '           TARGET = await type(iter).__anext__(iter)\n'
             '       wyjąwszy StopAsyncIteration:\n'
             '           running = Nieprawda\n'
             '       inaczej:\n'
             '           BLOCK\n'
             '   inaczej:\n'
             '       BLOCK2\n'
             '\n'
             'See also "__aiter__()" oraz "__anext__()" dla details.\n'
             '\n'
             'It jest a "SyntaxError" to use "async for" statement outside of '
             'an\n'
             '"async def" function.\n'
             '\n'
             '\n'
             'The "async with" statement\n'
             '--------------------------\n'
             '\n'
             '   async_with_stmt ::= "async" with_stmt\n'
             '\n'
             'An *asynchronous context manager* jest a *context manager* that '
             'is able\n'
             'to suspend execution w its *enter* oraz *exit* methods.\n'
             '\n'
             'The following code:\n'
             '\n'
             '   async przy EXPR jako VAR:\n'
             '       BLOCK\n'
             '\n'
             'Is semantically equivalent to:\n'
             '\n'
             '   mgr = (EXPR)\n'
             '   aexit = type(mgr).__aexit__\n'
             '   aenter = type(mgr).__aenter__(mgr)\n'
             '   exc = Prawda\n'
             '\n'
             '   VAR = await aenter\n'
             '   spróbuj:\n'
             '       BLOCK\n'
             '   wyjąwszy:\n'
             '       jeżeli nie await aexit(mgr, *sys.exc_info()):\n'
             '           podnieś\n'
             '   inaczej:\n'
             '       await aexit(mgr, Nic, Nic, Nic)\n'
             '\n'
             'See also "__aenter__()" oraz "__aexit__()" dla details.\n'
             '\n'
             'It jest a "SyntaxError" to use "async with" statement outside of '
             'an\n'
             '"async def" function.\n'
             '\n'
             'See also: **PEP 492** - Coroutines przy async oraz await '
             'syntax\n'
             '\n'
             '-[ Footnotes ]-\n'
             '\n'
             '[1] The exception jest propagated to the invocation stack '
             'unless\n'
             '    there jest a "finally" clause which happens to podnieś '
             'another\n'
             '    exception. That new exception causes the old one to be '
             'lost.\n'
             '\n'
             '[2] Currently, control "flows off the end" wyjąwszy w the case '
             'of\n'
             '    an exception albo the execution of a "return", "continue", '
             'or\n'
             '    "break" statement.\n'
             '\n'
             '[3] A string literal appearing jako the first statement w the\n'
             "    function body jest transformed into the function's "
             '"__doc__"\n'
             "    attribute oraz therefore the function's *docstring*.\n"
             '\n'
             '[4] A string literal appearing jako the first statement w the '
             'class\n'
             '    body jest transformed into the namespace\'s "__doc__" item '
             'and\n'
             "    therefore the class's *docstring*.\n",
 'context-managers': '\n'
                     'With Statement Context Managers\n'
                     '*******************************\n'
                     '\n'
                     'A *context manager* jest an object that defines the '
                     'runtime context to\n'
                     'be established when executing a "with" statement. The '
                     'context manager\n'
                     'handles the entry into, oraz the exit from, the desired '
                     'runtime context\n'
                     'dla the execution of the block of code.  Context '
                     'managers are normally\n'
                     'invoked using the "with" statement (described w '
                     'section *The with\n'
                     'statement*), but can also be used by directly invoking '
                     'their methods.\n'
                     '\n'
                     'Typical uses of context managers include saving oraz '
                     'restoring various\n'
                     'kinds of global state, locking oraz unlocking '
                     'resources, closing opened\n'
                     'files, etc.\n'
                     '\n'
                     'For more information on context managers, see *Context '
                     'Manager Types*.\n'
                     '\n'
                     'object.__enter__(self)\n'
                     '\n'
                     '   Enter the runtime context related to this object. '
                     'The "with"\n'
                     "   statement will bind this method's zwróć value to "
                     'the target(s)\n'
                     '   specified w the "as" clause of the statement, jeżeli '
                     'any.\n'
                     '\n'
                     'object.__exit__(self, exc_type, exc_value, traceback)\n'
                     '\n'
                     '   Exit the runtime context related to this object. '
                     'The parameters\n'
                     '   describe the exception that caused the context to '
                     'be exited. If the\n'
                     '   context was exited without an exception, all three '
                     'arguments will\n'
                     '   be "Nic".\n'
                     '\n'
                     '   If an exception jest supplied, oraz the method wishes '
                     'to suppress the\n'
                     '   exception (i.e., prevent it z being propagated), '
                     'it should\n'
                     '   zwróć a true value. Otherwise, the exception will '
                     'be processed\n'
                     '   normally upon exit z this method.\n'
                     '\n'
                     '   Note that "__exit__()" methods should nie reraise '
                     'the dalejed-in\n'
                     "   exception; this jest the caller's responsibility.\n"
                     '\n'
                     'See also: **PEP 0343** - The "with" statement\n'
                     '\n'
                     '     The specification, background, oraz examples dla '
                     'the Python "with"\n'
                     '     statement.\n',
 'continue': '\n'
             'The "continue" statement\n'
             '************************\n'
             '\n'
             '   continue_stmt ::= "continue"\n'
             '\n'
             '"continue" may only occur syntactically nested w a "for" albo '
             '"while"\n'
             'loop, but nie nested w a function albo klasa definition albo '
             '"finally"\n'
             'clause within that loop.  It continues przy the next cycle of '
             'the\n'
             'nearest enclosing loop.\n'
             '\n'
             'When "continue" dalejes control out of a "try" statement przy '
             'a\n'
             '"finally" clause, that "finally" clause jest executed before '
             'really\n'
             'starting the next loop cycle.\n',
 'conversions': '\n'
                'Arithmetic conversions\n'
                '**********************\n'
                '\n'
                'When a description of an arithmetic operator below uses the '
                'phrase\n'
                '"the numeric arguments are converted to a common type," '
                'this means\n'
                'that the operator implementation dla built-in types works '
                'as follows:\n'
                '\n'
                '* If either argument jest a complex number, the other jest '
                'converted to\n'
                '  complex;\n'
                '\n'
                '* otherwise, jeżeli either argument jest a floating point number, '
                'the\n'
                '  other jest converted to floating point;\n'
                '\n'
                '* otherwise, both must be integers oraz no conversion jest '
                'necessary.\n'
                '\n'
                'Some additional rules apply dla certain operators (e.g., a '
                'string jako a\n'
                "left argument to the '%' operator).  Extensions must define "
                'their own\n'
                'conversion behavior.\n',
 'customization': '\n'
                  'Basic customization\n'
                  '*******************\n'
                  '\n'
                  'object.__new__(cls[, ...])\n'
                  '\n'
                  '   Called to create a new instance of klasa *cls*.  '
                  '"__new__()" jest a\n'
                  '   static method (special-cased so you need nie declare '
                  'it jako such)\n'
                  '   that takes the klasa of which an instance was '
                  'requested jako its\n'
                  '   first argument.  The remaining arguments are those '
                  'passed to the\n'
                  '   object constructor expression (the call to the '
                  'class).  The return\n'
                  '   value of "__new__()" should be the new object instance '
                  '(usually an\n'
                  '   instance of *cls*).\n'
                  '\n'
                  '   Typical implementations create a new instance of the '
                  'class by\n'
                  '   invoking the superclass\'s "__new__()" method using\n'
                  '   "super(currentclass, cls).__new__(cls[, ...])" przy '
                  'appropriate\n'
                  '   arguments oraz then modifying the newly-created '
                  'instance as\n'
                  '   necessary before returning it.\n'
                  '\n'
                  '   If "__new__()" returns an instance of *cls*, then the '
                  'new\n'
                  '   instance\'s "__init__()" method will be invoked like\n'
                  '   "__init__(self[, ...])", where *self* jest the new '
                  'instance oraz the\n'
                  '   remaining arguments are the same jako were dalejed to '
                  '"__new__()".\n'
                  '\n'
                  '   If "__new__()" does nie zwróć an instance of *cls*, '
                  'then the new\n'
                  '   instance\'s "__init__()" method will nie be invoked.\n'
                  '\n'
                  '   "__new__()" jest intended mainly to allow subclasses of '
                  'immutable\n'
                  '   types (like int, str, albo tuple) to customize instance '
                  'creation.  It\n'
                  '   jest also commonly overridden w custom metaclasses w '
                  'order to\n'
                  '   customize klasa creation.\n'
                  '\n'
                  'object.__init__(self[, ...])\n'
                  '\n'
                  '   Called after the instance has been created (by '
                  '"__new__()"), but\n'
                  '   before it jest returned to the caller.  The arguments '
                  'are those\n'
                  '   dalejed to the klasa constructor expression.  If a base '
                  'class has an\n'
                  '   "__init__()" method, the derived class\'s "__init__()" '
                  'method, if\n'
                  '   any, must explicitly call it to ensure proper '
                  'initialization of the\n'
                  '   base klasa part of the instance; dla example:\n'
                  '   "BaseClass.__init__(self, [args...])".\n'
                  '\n'
                  '   Because "__new__()" oraz "__init__()" work together w '
                  'constructing\n'
                  '   objects ("__new__()" to create it, oraz "__init__()" to '
                  'customise\n'
                  '   it), no non-"Nic" value may be returned by '
                  '"__init__()"; doing so\n'
                  '   will cause a "TypeError" to be podnieśd at runtime.\n'
                  '\n'
                  'object.__del__(self)\n'
                  '\n'
                  '   Called when the instance jest about to be destroyed.  '
                  'This jest also\n'
                  '   called a destructor.  If a base klasa has a '
                  '"__del__()" method, the\n'
                  '   derived class\'s "__del__()" method, jeżeli any, must '
                  'explicitly call it\n'
                  '   to ensure proper deletion of the base klasa part of '
                  'the instance.\n'
                  '   Note that it jest possible (though nie recommended!) dla '
                  'the\n'
                  '   "__del__()" method to postpone destruction of the '
                  'instance by\n'
                  '   creating a new reference to it.  It may then be called '
                  'at a later\n'
                  '   time when this new reference jest deleted.  It jest nie '
                  'guaranteed that\n'
                  '   "__del__()" methods are called dla objects that still '
                  'exist when\n'
                  '   the interpreter exits.\n'
                  '\n'
                  '   Note: "usuń x" doesn\'t directly call "x.__del__()" --- '
                  'the former\n'
                  '     decrements the reference count dla "x" by one, oraz '
                  'the latter is\n'
                  '     only called when "x"\'s reference count reaches '
                  'zero.  Some common\n'
                  '     situations that may prevent the reference count of '
                  'an object from\n'
                  '     going to zero include: circular references between '
                  'objects (e.g.,\n'
                  '     a doubly-linked list albo a tree data structure przy '
                  'parent and\n'
                  '     child pointers); a reference to the object on the '
                  'stack frame of\n'
                  '     a function that caught an exception (the traceback '
                  'stored in\n'
                  '     "sys.exc_info()[2]" keeps the stack frame alive); albo '
                  'a reference\n'
                  '     to the object on the stack frame that podnieśd an '
                  'unhandled\n'
                  '     exception w interactive mode (the traceback stored '
                  'in\n'
                  '     "sys.last_traceback" keeps the stack frame alive).  '
                  'The first\n'
                  '     situation can only be remedied by explicitly '
                  'breaking the cycles;\n'
                  '     the second can be resolved by freeing the reference '
                  'to the\n'
                  '     traceback object when it jest no longer useful, oraz '
                  'the third can\n'
                  '     be resolved by storing "Nic" w '
                  '"sys.last_traceback". Circular\n'
                  '     references which are garbage are detected oraz '
                  'cleaned up when the\n'
                  "     cyclic garbage collector jest enabled (it's on by "
                  'default). Refer\n'
                  '     to the documentation dla the "gc" module dla more '
                  'information\n'
                  '     about this topic.\n'
                  '\n'
                  '   Warning: Due to the precarious circumstances under '
                  'which\n'
                  '     "__del__()" methods are invoked, exceptions that '
                  'occur during\n'
                  '     their execution are ignored, oraz a warning jest '
                  'printed to\n'
                  '     "sys.stderr" instead. Also, when "__del__()" jest '
                  'invoked in\n'
                  '     response to a module being deleted (e.g., when '
                  'execution of the\n'
                  '     program jest done), other globals referenced by the '
                  '"__del__()"\n'
                  '     method may already have been deleted albo w the '
                  'process of being\n'
                  '     torn down (e.g. the zaimportuj machinery shutting '
                  'down).  For this\n'
                  '     reason, "__del__()" methods should do the absolute '
                  'minimum needed\n'
                  '     to maintain external invariants.  Starting przy '
                  'version 1.5,\n'
                  '     Python guarantees that globals whose name begins '
                  'przy a single\n'
                  '     underscore are deleted z their module before '
                  'other globals are\n'
                  '     deleted; jeżeli no other references to such globals '
                  'exist, this may\n'
                  '     help w assuring that imported modules are still '
                  'available at the\n'
                  '     time when the "__del__()" method jest called.\n'
                  '\n'
                  'object.__repr__(self)\n'
                  '\n'
                  '   Called by the "repr()" built-in function to compute '
                  'the "official"\n'
                  '   string representation of an object.  If at all '
                  'possible, this\n'
                  '   should look like a valid Python expression that could '
                  'be used to\n'
                  '   recreate an object przy the same value (given an '
                  'appropriate\n'
                  '   environment).  If this jest nie possible, a string of '
                  'the form\n'
                  '   "<...some useful description...>" should be returned. '
                  'The return\n'
                  '   value must be a string object. If a klasa defines '
                  '"__repr__()" but\n'
                  '   nie "__str__()", then "__repr__()" jest also used when '
                  'an "informal"\n'
                  '   string representation of instances of that klasa jest '
                  'required.\n'
                  '\n'
                  '   This jest typically used dla debugging, so it jest '
                  'important that the\n'
                  '   representation jest information-rich oraz unambiguous.\n'
                  '\n'
                  'object.__str__(self)\n'
                  '\n'
                  '   Called by "str(object)" oraz the built-in functions '
                  '"format()" and\n'
                  '   "print()" to compute the "informal" albo nicely '
                  'printable string\n'
                  '   representation of an object.  The zwróć value must be '
                  'a *string*\n'
                  '   object.\n'
                  '\n'
                  '   This method differs z "object.__repr__()" w that '
                  'there jest no\n'
                  '   expectation that "__str__()" zwróć a valid Python '
                  'expression: a\n'
                  '   more convenient albo concise representation can be '
                  'used.\n'
                  '\n'
                  '   The default implementation defined by the built-in '
                  'type "object"\n'
                  '   calls "object.__repr__()".\n'
                  '\n'
                  'object.__bytes__(self)\n'
                  '\n'
                  '   Called by "bytes()" to compute a byte-string '
                  'representation of an\n'
                  '   object. This should zwróć a "bytes" object.\n'
                  '\n'
                  'object.__format__(self, format_spec)\n'
                  '\n'
                  '   Called by the "format()" built-in function (and by '
                  'extension, the\n'
                  '   "str.format()" method of klasa "str") to produce a '
                  '"formatted"\n'
                  '   string representation of an object. The "format_spec" '
                  'argument jest a\n'
                  '   string that contains a description of the formatting '
                  'options\n'
                  '   desired. The interpretation of the "format_spec" '
                  'argument jest up to\n'
                  '   the type implementing "__format__()", however most '
                  'classes will\n'
                  '   either delegate formatting to one of the built-in '
                  'types, albo use a\n'
                  '   similar formatting option syntax.\n'
                  '\n'
                  '   See *Format Specification Mini-Language* dla a '
                  'description of the\n'
                  '   standard formatting syntax.\n'
                  '\n'
                  '   The zwróć value must be a string object.\n'
                  '\n'
                  '   Changed w version 3.4: The __format__ method of '
                  '"object" itself\n'
                  '   podnieśs a "TypeError" jeżeli dalejed any non-empty string.\n'
                  '\n'
                  'object.__lt__(self, other)\n'
                  'object.__le__(self, other)\n'
                  'object.__eq__(self, other)\n'
                  'object.__ne__(self, other)\n'
                  'object.__gt__(self, other)\n'
                  'object.__ge__(self, other)\n'
                  '\n'
                  '   These are the so-called "rich comparison" methods. '
                  'The\n'
                  '   correspondence between operator symbols oraz method '
                  'names jest as\n'
                  '   follows: "x<y" calls "x.__lt__(y)", "x<=y" calls '
                  '"x.__le__(y)",\n'
                  '   "x==y" calls "x.__eq__(y)", "x!=y" calls '
                  '"x.__ne__(y)", "x>y" calls\n'
                  '   "x.__gt__(y)", oraz "x>=y" calls "x.__ge__(y)".\n'
                  '\n'
                  '   A rich comparison method may zwróć the singleton '
                  '"NotImplemented"\n'
                  '   jeżeli it does nie implement the operation dla a given '
                  'pair of\n'
                  '   arguments. By convention, "Nieprawda" oraz "Prawda" are '
                  'returned dla a\n'
                  '   successful comparison. However, these methods can '
                  'return any value,\n'
                  '   so jeżeli the comparison operator jest used w a Boolean '
                  'context (e.g.,\n'
                  '   w the condition of an "if" statement), Python will '
                  'call "bool()"\n'
                  '   on the value to determine jeżeli the result jest true albo '
                  'false.\n'
                  '\n'
                  '   By default, "__ne__()" delegates to "__eq__()" oraz '
                  'inverts the\n'
                  '   result unless it jest "NotImplemented".  There are no '
                  'other implied\n'
                  '   relationships among the comparison operators, dla '
                  'example, the\n'
                  '   truth of "(x<y albo x==y)" does nie imply "x<=y". To '
                  'automatically\n'
                  '   generate ordering operations z a single root '
                  'operation, see\n'
                  '   "functools.total_ordering()".\n'
                  '\n'
                  '   See the paragraph on "__hash__()" dla some important '
                  'notes on\n'
                  '   creating *hashable* objects which support custom '
                  'comparison\n'
                  '   operations oraz are usable jako dictionary keys.\n'
                  '\n'
                  '   There are no swapped-argument versions of these '
                  'methods (to be used\n'
                  '   when the left argument does nie support the operation '
                  'but the right\n'
                  '   argument does); rather, "__lt__()" oraz "__gt__()" are '
                  "each other's\n"
                  '   reflection, "__le__()" oraz "__ge__()" are each '
                  "other's reflection,\n"
                  '   oraz "__eq__()" oraz "__ne__()" are their own '
                  'reflection. If the\n'
                  "   operands are of different types, oraz right operand's "
                  'type jest a\n'
                  "   direct albo indirect subclass of the left operand's "
                  'type, the\n'
                  '   reflected method of the right operand has priority, '
                  'otherwise the\n'
                  "   left operand's method has priority.  Virtual "
                  'subclassing jest not\n'
                  '   considered.\n'
                  '\n'
                  'object.__hash__(self)\n'
                  '\n'
                  '   Called by built-in function "hash()" oraz dla '
                  'operations on members\n'
                  '   of hashed collections including "set", "frozenset", '
                  'and "dict".\n'
                  '   "__hash__()" should zwróć an integer.  The only '
                  'required property\n'
                  '   jest that objects which compare equal have the same hash '
                  'value; it is\n'
                  '   advised to somehow mix together (e.g. using exclusive '
                  'or) the hash\n'
                  '   values dla the components of the object that also play '
                  'a part in\n'
                  '   comparison of objects.\n'
                  '\n'
                  '   Note: "hash()" truncates the value returned z an '
                  "object's\n"
                  '     custom "__hash__()" method to the size of a '
                  '"Py_ssize_t".  This\n'
                  '     jest typically 8 bytes on 64-bit builds oraz 4 bytes on '
                  '32-bit\n'
                  '     builds. If an object\'s   "__hash__()" must '
                  'interoperate on builds\n'
                  '     of different bit sizes, be sure to check the width '
                  'on all\n'
                  '     supported builds.  An easy way to do this jest przy '
                  '"python -c\n'
                  '     "zaimportuj sys; print(sys.hash_info.width)""\n'
                  '\n'
                  '   If a klasa does nie define an "__eq__()" method it '
                  'should not\n'
                  '   define a "__hash__()" operation either; jeżeli it defines '
                  '"__eq__()"\n'
                  '   but nie "__hash__()", its instances will nie be usable '
                  'as items in\n'
                  '   hashable collections.  If a klasa defines mutable '
                  'objects and\n'
                  '   implements an "__eq__()" method, it should nie '
                  'implement\n'
                  '   "__hash__()", since the implementation of hashable '
                  'collections\n'
                  "   requires that a key's hash value jest immutable (jeżeli the "
                  "object's hash\n"
                  '   value changes, it will be w the wrong hash bucket).\n'
                  '\n'
                  '   User-defined classes have "__eq__()" oraz "__hash__()" '
                  'methods by\n'
                  '   default; przy them, all objects compare unequal '
                  '(wyjąwszy with\n'
                  '   themselves) oraz "x.__hash__()" returns an appropriate '
                  'value such\n'
                  '   that "x == y" implies both that "x jest y" oraz "hash(x) '
                  '== hash(y)".\n'
                  '\n'
                  '   A klasa that overrides "__eq__()" oraz does nie define '
                  '"__hash__()"\n'
                  '   will have its "__hash__()" implicitly set to "Nic".  '
                  'When the\n'
                  '   "__hash__()" method of a klasa jest "Nic", instances of '
                  'the class\n'
                  '   will podnieś an appropriate "TypeError" when a program '
                  'attempts to\n'
                  '   retrieve their hash value, oraz will also be correctly '
                  'identified as\n'
                  '   unhashable when checking "isinstance(obj, '
                  'collections.Hashable").\n'
                  '\n'
                  '   If a klasa that overrides "__eq__()" needs to retain '
                  'the\n'
                  '   implementation of "__hash__()" z a parent class, '
                  'the interpreter\n'
                  '   must be told this explicitly by setting "__hash__ =\n'
                  '   <ParentClass>.__hash__".\n'
                  '\n'
                  '   If a klasa that does nie override "__eq__()" wishes to '
                  'suppress\n'
                  '   hash support, it should include "__hash__ = Nic" w '
                  'the class\n'
                  '   definition. A klasa which defines its own "__hash__()" '
                  'that\n'
                  '   explicitly podnieśs a "TypeError" would be incorrectly '
                  'identified as\n'
                  '   hashable by an "isinstance(obj, collections.Hashable)" '
                  'call.\n'
                  '\n'
                  '   Note: By default, the "__hash__()" values of str, '
                  'bytes and\n'
                  '     datetime objects are "salted" przy an unpredictable '
                  'random value.\n'
                  '     Although they remain constant within an individual '
                  'Python\n'
                  '     process, they are nie predictable between repeated '
                  'invocations of\n'
                  '     Python.This jest intended to provide protection '
                  'against a denial-\n'
                  '     of-service caused by carefully-chosen inputs that '
                  'exploit the\n'
                  '     worst case performance of a dict insertion, O(n^2) '
                  'complexity.\n'
                  '     See '
                  'http://www.ocert.org/advisories/ocert-2011-003.html for\n'
                  '     details.Changing hash values affects the iteration '
                  'order of\n'
                  '     dicts, sets oraz other mappings.  Python has never '
                  'made guarantees\n'
                  '     about this ordering (and it typically varies between '
                  '32-bit and\n'
                  '     64-bit builds).See also "PYTHONHASHSEED".\n'
                  '\n'
                  '   Changed w version 3.3: Hash randomization jest enabled '
                  'by default.\n'
                  '\n'
                  'object.__bool__(self)\n'
                  '\n'
                  '   Called to implement truth value testing oraz the '
                  'built-in operation\n'
                  '   "bool()"; should zwróć "Nieprawda" albo "Prawda".  When this '
                  'method jest not\n'
                  '   defined, "__len__()" jest called, jeżeli it jest defined, oraz '
                  'the object is\n'
                  '   considered true jeżeli its result jest nonzero.  If a klasa '
                  'defines\n'
                  '   neither "__len__()" nor "__bool__()", all its '
                  'instances are\n'
                  '   considered true.\n',
 'debugger': '\n'
             '"pdb" --- The Python Debugger\n'
             '*****************************\n'
             '\n'
             '**Source code:** Lib/pdb.py\n'
             '\n'
             '======================================================================\n'
             '\n'
             'The module "pdb" defines an interactive source code debugger '
             'for\n'
             'Python programs.  It supports setting (conditional) '
             'breakpoints and\n'
             'single stepping at the source line level, inspection of stack '
             'frames,\n'
             'source code listing, oraz evaluation of arbitrary Python code '
             'in the\n'
             'context of any stack frame.  It also supports post-mortem '
             'debugging\n'
             'and can be called under program control.\n'
             '\n'
             'The debugger jest extensible -- it jest actually defined jako the '
             'class\n'
             '"Pdb". This jest currently undocumented but easily understood by '
             'reading\n'
             'the source.  The extension interface uses the modules "bdb" '
             'and "cmd".\n'
             '\n'
             'The debugger\'s prompt jest "(Pdb)". Typical usage to run a '
             'program under\n'
             'control of the debugger is:\n'
             '\n'
             '   >>> zaimportuj pdb\n'
             '   >>> zaimportuj mymodule\n'
             "   >>> pdb.run('mymodule.test()')\n"
             '   > <string>(0)?()\n'
             '   (Pdb) continue\n'
             '   > <string>(1)?()\n'
             '   (Pdb) continue\n'
             "   NameError: 'spam'\n"
             '   > <string>(1)?()\n'
             '   (Pdb)\n'
             '\n'
             'Changed w version 3.3: Tab-completion via the "readline" '
             'module is\n'
             'available dla commands oraz command arguments, e.g. the current '
             'global\n'
             'and local names are offered jako arguments of the "p" command.\n'
             '\n'
             '"pdb.py" can also be invoked jako a script to debug other '
             'scripts.  For\n'
             'example:\n'
             '\n'
             '   python3 -m pdb myscript.py\n'
             '\n'
             'When invoked jako a script, pdb will automatically enter '
             'post-mortem\n'
             'debugging jeżeli the program being debugged exits abnormally.  '
             'After post-\n'
             'mortem debugging (or after normal exit of the program), pdb '
             'will\n'
             "restart the program.  Automatic restarting preserves pdb's "
             'state (such\n'
             'as przerwijpoints) oraz w most cases jest more useful than quitting '
             'the\n'
             "debugger upon program's exit.\n"
             '\n'
             'New w version 3.2: "pdb.py" now accepts a "-c" option that '
             'executes\n'
             'commands jako jeżeli given w a ".pdbrc" file, see *Debugger '
             'Commands*.\n'
             '\n'
             'The typical usage to przerwij into the debugger z a running '
             'program is\n'
             'to insert\n'
             '\n'
             '   zaimportuj pdb; pdb.set_trace()\n'
             '\n'
             'at the location you want to przerwij into the debugger.  You can '
             'then\n'
             'step through the code following this statement, oraz continue '
             'running\n'
             'without the debugger using the "continue" command.\n'
             '\n'
             'The typical usage to inspect a crashed program is:\n'
             '\n'
             '   >>> zaimportuj pdb\n'
             '   >>> zaimportuj mymodule\n'
             '   >>> mymodule.test()\n'
             '   Traceback (most recent call last):\n'
             '     File "<stdin>", line 1, w ?\n'
             '     File "./mymodule.py", line 4, w test\n'
             '       test2()\n'
             '     File "./mymodule.py", line 3, w test2\n'
             '       print(spam)\n'
             '   NameError: spam\n'
             '   >>> pdb.pm()\n'
             '   > ./mymodule.py(3)test2()\n'
             '   -> print(spam)\n'
             '   (Pdb)\n'
             '\n'
             'The module defines the following functions; each enters the '
             'debugger\n'
             'in a slightly different way:\n'
             '\n'
             'pdb.run(statement, globals=Nic, locals=Nic)\n'
             '\n'
             '   Execute the *statement* (given jako a string albo a code '
             'object) under\n'
             '   debugger control.  The debugger prompt appears before any '
             'code is\n'
             '   executed; you can set przerwijpoints oraz type "continue", albo '
             'you can\n'
             '   step through the statement using "step" albo "next" (all '
             'these\n'
             '   commands are explained below).  The optional *globals* oraz '
             '*locals*\n'
             '   arguments specify the environment w which the code jest '
             'executed; by\n'
             '   default the dictionary of the module "__main__" jest used.  '
             '(See the\n'
             '   explanation of the built-in "exec()" albo "eval()" '
             'functions.)\n'
             '\n'
             'pdb.runeval(expression, globals=Nic, locals=Nic)\n'
             '\n'
             '   Evaluate the *expression* (given jako a string albo a code '
             'object)\n'
             '   under debugger control.  When "runeval()" returns, it '
             'returns the\n'
             '   value of the expression.  Otherwise this function jest '
             'similar to\n'
             '   "run()".\n'
             '\n'
             'pdb.runcall(function, *args, **kwds)\n'
             '\n'
             '   Call the *function* (a function albo method object, nie a '
             'string)\n'
             '   przy the given arguments.  When "runcall()" returns, it '
             'returns\n'
             '   whatever the function call returned.  The debugger prompt '
             'appears\n'
             '   jako soon jako the function jest entered.\n'
             '\n'
             'pdb.set_trace()\n'
             '\n'
             '   Enter the debugger at the calling stack frame.  This jest '
             'useful to\n'
             '   hard-code a przerwijpoint at a given point w a program, even '
             'jeżeli the\n'
             '   code jest nie otherwise being debugged (e.g. when an '
             'assertion\n'
             '   fails).\n'
             '\n'
             'pdb.post_mortem(traceback=Nic)\n'
             '\n'
             '   Enter post-mortem debugging of the given *traceback* '
             'object.  If no\n'
             '   *traceback* jest given, it uses the one of the exception that '
             'is\n'
             '   currently being handled (an exception must be being handled '
             'jeżeli the\n'
             '   default jest to be used).\n'
             '\n'
             'pdb.pm()\n'
             '\n'
             '   Enter post-mortem debugging of the traceback found in\n'
             '   "sys.last_traceback".\n'
             '\n'
             'The "run*" functions oraz "set_trace()" are aliases dla '
             'instantiating\n'
             'the "Pdb" klasa oraz calling the method of the same name.  If '
             'you want\n'
             'to access further features, you have to do this yourself:\n'
             '\n'
             "class klasa pdb.Pdb(completekey='tab', stdin=Nic, "
             'stdout=Nic, skip=Nic, nosigint=Nieprawda)\n'
             '\n'
             '   "Pdb" jest the debugger class.\n'
             '\n'
             '   The *completekey*, *stdin* oraz *stdout* arguments are '
             'passed to the\n'
             '   underlying "cmd.Cmd" class; see the description there.\n'
             '\n'
             '   The *skip* argument, jeżeli given, must be an iterable of '
             'glob-style\n'
             '   module name patterns.  The debugger will nie step into '
             'frames that\n'
             '   originate w a module that matches one of these patterns. '
             '[1]\n'
             '\n'
             '   By default, Pdb sets a handler dla the SIGINT signal (which '
             'is sent\n'
             '   when the user presses Ctrl-C on the console) when you give '
             'a\n'
             '   "continue" command. This allows you to przerwij into the '
             'debugger\n'
             '   again by pressing Ctrl-C.  If you want Pdb nie to touch the '
             'SIGINT\n'
             '   handler, set *nosigint* tot true.\n'
             '\n'
             '   Example call to enable tracing przy *skip*:\n'
             '\n'
             "      zaimportuj pdb; pdb.Pdb(skip=['django.*']).set_trace()\n"
             '\n'
             '   New w version 3.1: The *skip* argument.\n'
             '\n'
             '   New w version 3.2: The *nosigint* argument.  Previously, a '
             'SIGINT\n'
             '   handler was never set by Pdb.\n'
             '\n'
             '   run(statement, globals=Nic, locals=Nic)\n'
             '   runeval(expression, globals=Nic, locals=Nic)\n'
             '   runcall(function, *args, **kwds)\n'
             '   set_trace()\n'
             '\n'
             '      See the documentation dla the functions explained '
             'above.\n'
             '\n'
             '\n'
             'Debugger Commands\n'
             '=================\n'
             '\n'
             'The commands recognized by the debugger are listed below.  '
             'Most\n'
             'commands can be abbreviated to one albo two letters jako '
             'indicated; e.g.\n'
             '"h(elp)" means that either "h" albo "help" can be used to enter '
             'the help\n'
             'command (but nie "he" albo "hel", nor "H" albo "Help" albo "HELP").\n'
             'Arguments to commands must be separated by whitespace (spaces '
             'or\n'
             'tabs).  Optional arguments are enclosed w square brackets '
             '("[]") in\n'
             'the command syntax; the square brackets must nie be typed.\n'
             'Alternatives w the command syntax are separated by a vertical '
             'bar\n'
             '("|").\n'
             '\n'
             'Entering a blank line repeats the last command entered.  '
             'Exception: if\n'
             'the last command was a "list" command, the next 11 lines are '
             'listed.\n'
             '\n'
             "Commands that the debugger doesn't recognize are assumed to be "
             'Python\n'
             'statements oraz are executed w the context of the program '
             'being\n'
             'debugged.  Python statements can also be prefixed przy an '
             'exclamation\n'
             'point ("!").  This jest a powerful way to inspect the program '
             'being\n'
             'debugged; it jest even possible to change a variable albo call a '
             'function.\n'
             'When an exception occurs w such a statement, the exception '
             'name is\n'
             "printed but the debugger's state jest nie changed.\n"
             '\n'
             'The debugger supports *aliases*.  Aliases can have parameters '
             'which\n'
             'allows one a certain level of adaptability to the context '
             'under\n'
             'examination.\n'
             '\n'
             'Multiple commands may be entered on a single line, separated '
             'by ";;".\n'
             '(A single ";" jest nie used jako it jest the separator dla multiple '
             'commands\n'
             'in a line that jest dalejed to the Python parser.)  No '
             'intelligence is\n'
             'applied to separating the commands; the input jest split at the '
             'first\n'
             '";;" pair, even jeżeli it jest w the middle of a quoted string.\n'
             '\n'
             'If a file ".pdbrc" exists w the user\'s home directory albo w '
             'the\n'
             'current directory, it jest read w oraz executed jako jeżeli it had '
             'been typed\n'
             'at the debugger prompt.  This jest particularly useful dla '
             'aliases.  If\n'
             'both files exist, the one w the home directory jest read first '
             'and\n'
             'aliases defined there can be overridden by the local file.\n'
             '\n'
             'Changed w version 3.2: ".pdbrc" can now contain commands '
             'that\n'
             'continue debugging, such jako "continue" albo "next".  Previously, '
             'these\n'
             'commands had no effect.\n'
             '\n'
             'h(elp) [command]\n'
             '\n'
             '   Without argument, print the list of available commands.  '
             'With a\n'
             '   *command* jako argument, print help about that command.  '
             '"help pdb"\n'
             '   displays the full documentation (the docstring of the '
             '"pdb"\n'
             '   module).  Since the *command* argument must be an '
             'identifier, "help\n'
             '   exec" must be entered to get help on the "!" command.\n'
             '\n'
             'w(here)\n'
             '\n'
             '   Print a stack trace, przy the most recent frame at the '
             'bottom.  An\n'
             '   arrow indicates the current frame, which determines the '
             'context of\n'
             '   most commands.\n'
             '\n'
             'd(own) [count]\n'
             '\n'
             '   Move the current frame *count* (default one) levels down w '
             'the\n'
             '   stack trace (to a newer frame).\n'
             '\n'
             'u(p) [count]\n'
             '\n'
             '   Move the current frame *count* (default one) levels up w '
             'the stack\n'
             '   trace (to an older frame).\n'
             '\n'
             'b(reak) [([filename:]lineno | function) [, condition]]\n'
             '\n'
             '   With a *lineno* argument, set a przerwij there w the current '
             'file.\n'
             '   With a *function* argument, set a przerwij at the first '
             'executable\n'
             '   statement within that function.  The line number may be '
             'prefixed\n'
             '   przy a filename oraz a colon, to specify a przerwijpoint w '
             'another\n'
             "   file (probably one that hasn't been loaded yet).  The file "
             'is\n'
             '   searched on "sys.path".  Note that each przerwijpoint jest '
             'assigned a\n'
             '   number to which all the other przerwijpoint commands refer.\n'
             '\n'
             '   If a second argument jest present, it jest an expression which '
             'must\n'
             '   evaluate to true before the przerwijpoint jest honored.\n'
             '\n'
             '   Without argument, list all przerwijs, including dla each '
             'breakpoint,\n'
             '   the number of times that przerwijpoint has been hit, the '
             'current\n'
             '   ignore count, oraz the associated condition jeżeli any.\n'
             '\n'
             'tbreak [([filename:]lineno | function) [, condition]]\n'
             '\n'
             '   Temporary przerwijpoint, which jest removed automatically when '
             'it is\n'
             '   first hit. The arguments are the same jako dla "break".\n'
             '\n'
             'cl(ear) [filename:lineno | bpnumber [bpnumber ...]]\n'
             '\n'
             '   With a *filename:lineno* argument, clear all the '
             'breakpoints at\n'
             '   this line. With a space separated list of przerwijpoint '
             'numbers, clear\n'
             '   those przerwijpoints. Without argument, clear all przerwijs (but '
             'first\n'
             '   ask confirmation).\n'
             '\n'
             'disable [bpnumber [bpnumber ...]]\n'
             '\n'
             '   Disable the przerwijpoints given jako a space separated list of\n'
             '   przerwijpoint numbers.  Disabling a przerwijpoint means it cannot '
             'cause\n'
             '   the program to stop execution, but unlike clearing a '
             'breakpoint, it\n'
             '   remains w the list of przerwijpoints oraz can be '
             '(re-)enabled.\n'
             '\n'
             'enable [bpnumber [bpnumber ...]]\n'
             '\n'
             '   Enable the przerwijpoints specified.\n'
             '\n'
             'ignore bpnumber [count]\n'
             '\n'
             '   Set the ignore count dla the given przerwijpoint number.  If '
             'count is\n'
             '   omitted, the ignore count jest set to 0.  A przerwijpoint '
             'becomes active\n'
             '   when the ignore count jest zero.  When non-zero, the count '
             'is\n'
             '   decremented each time the przerwijpoint jest reached oraz the '
             'breakpoint\n'
             '   jest nie disabled oraz any associated condition evaluates to '
             'true.\n'
             '\n'
             'condition bpnumber [condition]\n'
             '\n'
             '   Set a new *condition* dla the przerwijpoint, an expression '
             'which must\n'
             '   evaluate to true before the przerwijpoint jest honored.  If '
             '*condition*\n'
             '   jest absent, any existing condition jest removed; i.e., the '
             'breakpoint\n'
             '   jest made unconditional.\n'
             '\n'
             'commands [bpnumber]\n'
             '\n'
             '   Specify a list of commands dla przerwijpoint number '
             '*bpnumber*.  The\n'
             '   commands themselves appear on the following lines.  Type a '
             'line\n'
             '   containing just "end" to terminate the commands. An '
             'example:\n'
             '\n'
             '      (Pdb) commands 1\n'
             '      (com) p some_variable\n'
             '      (com) end\n'
             '      (Pdb)\n'
             '\n'
             '   To remove all commands z a przerwijpoint, type commands oraz '
             'follow\n'
             '   it immediately przy "end"; that is, give no commands.\n'
             '\n'
             '   With no *bpnumber* argument, commands refers to the last '
             'breakpoint\n'
             '   set.\n'
             '\n'
             '   You can use przerwijpoint commands to start your program up '
             'again.\n'
             '   Simply use the continue command, albo step, albo any other '
             'command that\n'
             '   resumes execution.\n'
             '\n'
             '   Specifying any command resuming execution (currently '
             'continue,\n'
             '   step, next, return, jump, quit oraz their abbreviations) '
             'terminates\n'
             '   the command list (as jeżeli that command was immediately '
             'followed by\n'
             '   end). This jest because any time you resume execution (even '
             'przy a\n'
             '   simple next albo step), you may encounter another '
             'breakpoint--which\n'
             '   could have its own command list, leading to ambiguities '
             'about which\n'
             '   list to execute.\n'
             '\n'
             "   If you use the 'silent' command w the command list, the "
             'usual\n'
             '   message about stopping at a przerwijpoint jest nie printed.  '
             'This may be\n'
             '   desirable dla przerwijpoints that are to print a specific '
             'message and\n'
             '   then continue.  If none of the other commands print '
             'anything, you\n'
             '   see no sign that the przerwijpoint was reached.\n'
             '\n'
             's(tep)\n'
             '\n'
             '   Execute the current line, stop at the first possible '
             'occasion\n'
             '   (either w a function that jest called albo on the next line w '
             'the\n'
             '   current function).\n'
             '\n'
             'n(ext)\n'
             '\n'
             '   Continue execution until the next line w the current '
             'function is\n'
             '   reached albo it returns.  (The difference between "next" oraz '
             '"step"\n'
             '   jest that "step" stops inside a called function, dopóki '
             '"next"\n'
             '   executes called functions at (nearly) full speed, only '
             'stopping at\n'
             '   the next line w the current function.)\n'
             '\n'
             'unt(il) [lineno]\n'
             '\n'
             '   Without argument, continue execution until the line przy a '
             'number\n'
             '   greater than the current one jest reached.\n'
             '\n'
             '   With a line number, continue execution until a line przy a '
             'number\n'
             '   greater albo equal to that jest reached.  In both cases, also '
             'stop when\n'
             '   the current frame returns.\n'
             '\n'
             '   Changed w version 3.2: Allow giving an explicit line '
             'number.\n'
             '\n'
             'r(eturn)\n'
             '\n'
             '   Continue execution until the current function returns.\n'
             '\n'
             'c(ont(inue))\n'
             '\n'
             '   Continue execution, only stop when a przerwijpoint jest '
             'encountered.\n'
             '\n'
             'j(ump) lineno\n'
             '\n'
             '   Set the next line that will be executed.  Only available w '
             'the\n'
             '   bottom-most frame.  This lets you jump back oraz execute '
             'code again,\n'
             "   albo jump forward to skip code that you don't want to run.\n"
             '\n'
             '   It should be noted that nie all jumps are allowed -- dla '
             'instance\n'
             '   it jest nie possible to jump into the middle of a "for" loop '
             'or out\n'
             '   of a "finally" clause.\n'
             '\n'
             'l(ist) [first[, last]]\n'
             '\n'
             '   List source code dla the current file.  Without arguments, '
             'list 11\n'
             '   lines around the current line albo continue the previous '
             'listing.\n'
             '   With "." jako argument, list 11 lines around the current '
             'line.  With\n'
             '   one argument, list 11 lines around at that line.  With two\n'
             '   arguments, list the given range; jeżeli the second argument jest '
             'less\n'
             '   than the first, it jest interpreted jako a count.\n'
             '\n'
             '   The current line w the current frame jest indicated by '
             '"->".  If an\n'
             '   exception jest being debugged, the line where the exception '
             'was\n'
             '   originally podnieśd albo propagated jest indicated by ">>", jeżeli it '
             'differs\n'
             '   z the current line.\n'
             '\n'
             '   New w version 3.2: The ">>" marker.\n'
             '\n'
             'll | longlist\n'
             '\n'
             '   List all source code dla the current function albo frame.\n'
             '   Interesting lines are marked jako dla "list".\n'
             '\n'
             '   New w version 3.2.\n'
             '\n'
             'a(rgs)\n'
             '\n'
             '   Print the argument list of the current function.\n'
             '\n'
             'p expression\n'
             '\n'
             '   Evaluate the *expression* w the current context oraz print '
             'its\n'
             '   value.\n'
             '\n'
             '   Note: "print()" can also be used, but jest nie a debugger '
             'command\n'
             '     --- this executes the Python "print()" function.\n'
             '\n'
             'pp expression\n'
             '\n'
             '   Like the "p" command, wyjąwszy the value of the expression jest '
             'pretty-\n'
             '   printed using the "pprint" module.\n'
             '\n'
             'whatis expression\n'
             '\n'
             '   Print the type of the *expression*.\n'
             '\n'
             'source expression\n'
             '\n'
             '   Try to get source code dla the given object oraz display '
             'it.\n'
             '\n'
             '   New w version 3.2.\n'
             '\n'
             'display [expression]\n'
             '\n'
             '   Display the value of the expression jeżeli it changed, each '
             'time\n'
             '   execution stops w the current frame.\n'
             '\n'
             '   Without expression, list all display expressions dla the '
             'current\n'
             '   frame.\n'
             '\n'
             '   New w version 3.2.\n'
             '\n'
             'undisplay [expression]\n'
             '\n'
             '   Do nie display the expression any more w the current '
             'frame.\n'
             '   Without expression, clear all display expressions dla the '
             'current\n'
             '   frame.\n'
             '\n'
             '   New w version 3.2.\n'
             '\n'
             'interact\n'
             '\n'
             '   Start an interative interpreter (using the "code" module) '
             'whose\n'
             '   global namespace contains all the (global oraz local) names '
             'found in\n'
             '   the current scope.\n'
             '\n'
             '   New w version 3.2.\n'
             '\n'
             'alias [name [command]]\n'
             '\n'
             '   Create an alias called *name* that executes *command*.  The '
             'command\n'
             '   must *not* be enclosed w quotes.  Replaceable parameters '
             'can be\n'
             '   indicated by "%1", "%2", oraz so on, dopóki "%*" jest replaced '
             'by all\n'
             '   the parameters. If no command jest given, the current alias '
             'for\n'
             '   *name* jest shown. If no arguments are given, all aliases are '
             'listed.\n'
             '\n'
             '   Aliases may be nested oraz can contain anything that can be '
             'legally\n'
             '   typed at the pdb prompt.  Note that internal pdb commands '
             '*can* be\n'
             '   overridden by aliases.  Such a command jest then hidden until '
             'the\n'
             '   alias jest removed.  Aliasing jest recursively applied to the '
             'first\n'
             '   word of the command line; all other words w the line are '
             'left\n'
             '   alone.\n'
             '\n'
             '   As an example, here are two useful aliases (especially when '
             'placed\n'
             '   w the ".pdbrc" file):\n'
             '\n'
             '      # Print instance variables (usage "pi classInst")\n'
             '      alias pi dla k w %1.__dict__.keys(): '
             'print("%1.",k,"=",%1.__dict__[k])\n'
             '      # Print instance variables w self\n'
             '      alias ps pi self\n'
             '\n'
             'unalias name\n'
             '\n'
             '   Delete the specified alias.\n'
             '\n'
             '! statement\n'
             '\n'
             '   Execute the (one-line) *statement* w the context of the '
             'current\n'
             '   stack frame. The exclamation point can be omitted unless '
             'the first\n'
             '   word of the statement resembles a debugger command.  To set '
             'a\n'
             '   global variable, you can prefix the assignment command przy '
             'a\n'
             '   "global" statement on the same line, e.g.:\n'
             '\n'
             "      (Pdb) global list_options; list_options = ['-l']\n"
             '      (Pdb)\n'
             '\n'
             'run [args ...]\n'
             'restart [args ...]\n'
             '\n'
             '   Restart the debugged Python program.  If an argument jest '
             'supplied,\n'
             '   it jest split przy "shlex" oraz the result jest used jako the new\n'
             '   "sys.argv". History, przerwijpoints, actions oraz debugger '
             'options are\n'
             '   preserved. "restart" jest an alias dla "run".\n'
             '\n'
             'q(uit)\n'
             '\n'
             '   Quit z the debugger.  The program being executed jest '
             'aborted.\n'
             '\n'
             '-[ Footnotes ]-\n'
             '\n'
             '[1] Whether a frame jest considered to originate w a certain '
             'module\n'
             '    jest determined by the "__name__" w the frame globals.\n',
 'del': '\n'
        'The "del" statement\n'
        '*******************\n'
        '\n'
        '   del_stmt ::= "del" target_list\n'
        '\n'
        'Deletion jest recursively defined very similar to the way assignment '
        'is\n'
        'defined. Rather than spelling it out w full details, here are '
        'some\n'
        'hints.\n'
        '\n'
        'Deletion of a target list recursively deletes each target, z '
        'left\n'
        'to right.\n'
        '\n'
        'Deletion of a name removes the binding of that name z the local '
        'or\n'
        'global namespace, depending on whether the name occurs w a '
        '"global"\n'
        'statement w the same code block.  If the name jest unbound, a\n'
        '"NameError" exception will be podnieśd.\n'
        '\n'
        'Deletion of attribute references, subscriptions oraz slicings jest '
        'passed\n'
        'to the primary object involved; deletion of a slicing jest w '
        'general\n'
        'equivalent to assignment of an empty slice of the right type (but '
        'even\n'
        'this jest determined by the sliced object).\n'
        '\n'
        'Changed w version 3.2: Previously it was illegal to delete a name\n'
        'z the local namespace jeżeli it occurs jako a free variable w a '
        'nested\n'
        'block.\n',
 'dict': '\n'
         'Dictionary displays\n'
         '*******************\n'
         '\n'
         'A dictionary display jest a possibly empty series of key/datum '
         'pairs\n'
         'enclosed w curly braces:\n'
         '\n'
         '   dict_display       ::= "{" [key_datum_list | '
         'dict_comprehension] "}"\n'
         '   key_datum_list     ::= key_datum ("," key_datum)* [","]\n'
         '   key_datum          ::= expression ":" expression\n'
         '   dict_comprehension ::= expression ":" expression comp_for\n'
         '\n'
         'A dictionary display uzyskajs a new dictionary object.\n'
         '\n'
         'If a comma-separated sequence of key/datum pairs jest given, they '
         'are\n'
         'evaluated z left to right to define the entries of the '
         'dictionary:\n'
         'each key object jest used jako a key into the dictionary to store the\n'
         'corresponding datum.  This means that you can specify the same '
         'key\n'
         "multiple times w the key/datum list, oraz the final dictionary's "
         'value\n'
         'dla that key will be the last one given.\n'
         '\n'
         'A dict comprehension, w contrast to list oraz set comprehensions,\n'
         'needs two expressions separated przy a colon followed by the '
         'usual\n'
         '"for" oraz "if" clauses. When the comprehension jest run, the '
         'resulting\n'
         'key oraz value elements are inserted w the new dictionary w the '
         'order\n'
         'they are produced.\n'
         '\n'
         'Restrictions on the types of the key values are listed earlier in\n'
         'section *The standard type hierarchy*.  (To summarize, the key '
         'type\n'
         'should be *hashable*, which excludes all mutable objects.)  '
         'Clashes\n'
         'between duplicate keys are nie detected; the last datum '
         '(textually\n'
         'rightmost w the display) stored dla a given key value prevails.\n',
 'dynamic-features': '\n'
                     'Interaction przy dynamic features\n'
                     '*********************************\n'
                     '\n'
                     'Name resolution of free variables occurs at runtime, '
                     'not at compile\n'
                     'time. This means that the following code will print '
                     '42:\n'
                     '\n'
                     '   i = 10\n'
                     '   def f():\n'
                     '       print(i)\n'
                     '   i = 42\n'
                     '   f()\n'
                     '\n'
                     'There are several cases where Python statements are '
                     'illegal when used\n'
                     'in conjunction przy nested scopes that contain free '
                     'variables.\n'
                     '\n'
                     'If a variable jest referenced w an enclosing scope, it '
                     'is illegal to\n'
                     'delete the name.  An error will be reported at compile '
                     'time.\n'
                     '\n'
                     'The "eval()" oraz "exec()" functions do nie have access '
                     'to the full\n'
                     'environment dla resolving names.  Names may be '
                     'resolved w the local\n'
                     'and global namespaces of the caller.  Free variables '
                     'are nie resolved\n'
                     'in the nearest enclosing namespace, but w the global '
                     'namespace.  [1]\n'
                     'The "exec()" oraz "eval()" functions have optional '
                     'arguments to\n'
                     'override the global oraz local namespace.  If only one '
                     'namespace is\n'
                     'specified, it jest used dla both.\n',
 'inaczej': '\n'
         'The "if" statement\n'
         '******************\n'
         '\n'
         'The "if" statement jest used dla conditional execution:\n'
         '\n'
         '   if_stmt ::= "if" expression ":" suite\n'
         '               ( "elif" expression ":" suite )*\n'
         '               ["inaczej" ":" suite]\n'
         '\n'
         'It selects exactly one of the suites by evaluating the expressions '
         'one\n'
         'by one until one jest found to be true (see section *Boolean '
         'operations*\n'
         'dla the definition of true oraz false); then that suite jest '
         'executed\n'
         '(and no other part of the "if" statement jest executed albo '
         'evaluated).\n'
         'If all expressions are false, the suite of the "inaczej" clause, if\n'
         'present, jest executed.\n',
 'exceptions': '\n'
               'Exceptions\n'
               '**********\n'
               '\n'
               'Exceptions are a means of przerwijing out of the normal flow of '
               'control\n'
               'of a code block w order to handle errors albo other '
               'exceptional\n'
               'conditions.  An exception jest *raised* at the point where the '
               'error is\n'
               'detected; it may be *handled* by the surrounding code block '
               'or by any\n'
               'code block that directly albo indirectly invoked the code '
               'block where\n'
               'the error occurred.\n'
               '\n'
               'The Python interpreter podnieśs an exception when it detects a '
               'run-time\n'
               'error (such jako division by zero).  A Python program can '
               'also\n'
               'explicitly podnieś an exception przy the "raise" statement. '
               'Exception\n'
               'handlers are specified przy the "try" ... "except" '
               'statement.  The\n'
               '"finally" clause of such a statement can be used to specify '
               'cleanup\n'
               'code which does nie handle the exception, but jest executed '
               'whether an\n'
               'exception occurred albo nie w the preceding code.\n'
               '\n'
               'Python uses the "termination" mousuń of error handling: an '
               'exception\n'
               'handler can find out what happened oraz continue execution at '
               'an outer\n'
               'level, but it cannot repair the cause of the error oraz retry '
               'the\n'
               'failing operation (wyjąwszy by re-entering the offending piece '
               'of code\n'
               'z the top).\n'
               '\n'
               'When an exception jest nie handled at all, the interpreter '
               'terminates\n'
               'execution of the program, albo returns to its interactive main '
               'loop.  In\n'
               'either case, it prints a stack backtrace, wyjąwszy when the '
               'exception is\n'
               '"SystemExit".\n'
               '\n'
               'Exceptions are identified by klasa instances.  The "except" '
               'clause is\n'
               'selected depending on the klasa of the instance: it must '
               'reference the\n'
               'class of the instance albo a base klasa thereof.  The instance '
               'can be\n'
               'received by the handler oraz can carry additional information '
               'about the\n'
               'exceptional condition.\n'
               '\n'
               'Note: Exception messages are nie part of the Python API.  '
               'Their\n'
               '  contents may change z one version of Python to the next '
               'without\n'
               '  warning oraz should nie be relied on by code which will run '
               'under\n'
               '  multiple versions of the interpreter.\n'
               '\n'
               'See also the description of the "try" statement w section '
               '*The try\n'
               'statement* oraz "raise" statement w section *The podnieś '
               'statement*.\n'
               '\n'
               '-[ Footnotes ]-\n'
               '\n'
               '[1] This limitation occurs because the code that jest executed '
               'by\n'
               '    these operations jest nie available at the time the module '
               'is\n'
               '    compiled.\n',
 'execmodel': '\n'
              'Execution model\n'
              '***************\n'
              '\n'
              '\n'
              'Structure of a programm\n'
              '=======================\n'
              '\n'
              'A Python program jest constructed z code blocks. A *block* '
              'is a piece\n'
              'of Python program text that jest executed jako a unit. The '
              'following are\n'
              'blocks: a module, a function body, oraz a klasa definition. '
              'Each\n'
              'command typed interactively jest a block.  A script file (a '
              'file given\n'
              'as standard input to the interpreter albo specified jako a '
              'command line\n'
              'argument to the interpreter) jest a code block.  A script '
              'command (a\n'
              'command specified on the interpreter command line przy the '
              "'**-c**'\n"
              'option) jest a code block.  The string argument dalejed to the '
              'built-in\n'
              'functions "eval()" oraz "exec()" jest a code block.\n'
              '\n'
              'A code block jest executed w an *execution frame*.  A frame '
              'contains\n'
              'some administrative information (used dla debugging) oraz '
              'determines\n'
              "where oraz how execution continues after the code block's "
              'execution has\n'
              'completed.\n'
              '\n'
              '\n'
              'Naming oraz binding\n'
              '==================\n'
              '\n'
              '\n'
              'Binding of names\n'
              '----------------\n'
              '\n'
              '*Names* refer to objects.  Names are introduced by name '
              'binding\n'
              'operations.\n'
              '\n'
              'The following constructs bind names: formal parameters to '
              'functions,\n'
              '"import" statements, klasa oraz function definitions (these '
              'bind the\n'
              'class albo function name w the defining block), oraz targets '
              'that are\n'
              'identifiers jeżeli occurring w an assignment, "for" loop header, '
              'or after\n'
              '"as" w a "with" statement albo "except" clause. The "import" '
              'statement\n'
              'of the form "z ... zaimportuj *" binds all names defined w '
              'the\n'
              'imported module, wyjąwszy those beginning przy an underscore.  '
              'This form\n'
              'may only be used at the module level.\n'
              '\n'
              'A target occurring w a "del" statement jest also considered '
              'bound for\n'
              'this purpose (though the actual semantics are to unbind the '
              'name).\n'
              '\n'
              'Each assignment albo zaimportuj statement occurs within a block '
              'defined by a\n'
              'class albo function definition albo at the module level (the '
              'top-level\n'
              'code block).\n'
              '\n'
              'If a name jest bound w a block, it jest a local variable of that '
              'block,\n'
              'unless declared jako "nonlocal" albo "global".  If a name jest '
              'bound at the\n'
              'module level, it jest a global variable.  (The variables of the '
              'module\n'
              'code block are local oraz global.)  If a variable jest used w a '
              'code\n'
              'block but nie defined there, it jest a *free variable*.\n'
              '\n'
              'Each occurrence of a name w the program text refers to the '
              '*binding*\n'
              'of that name established by the following name resolution '
              'rules.\n'
              '\n'
              '\n'
              'Resolution of names\n'
              '-------------------\n'
              '\n'
              'A *scope* defines the visibility of a name within a block.  '
              'If a local\n'
              'variable jest defined w a block, its scope includes that '
              'block.  If the\n'
              'definition occurs w a function block, the scope extends to '
              'any blocks\n'
              'contained within the defining one, unless a contained block '
              'introduces\n'
              'a different binding dla the name.\n'
              '\n'
              'When a name jest used w a code block, it jest resolved using the '
              'nearest\n'
              'enclosing scope.  The set of all such scopes visible to a '
              'code block\n'
              "is called the block's *environment*.\n"
              '\n'
              'When a name jest nie found at all, a "NameError" exception jest '
              'raised. If\n'
              'the current scope jest a function scope, oraz the name refers to '
              'a local\n'
              'variable that has nie yet been bound to a value at the point '
              'where the\n'
              'name jest used, an "UnboundLocalError" exception jest podnieśd.\n'
              '"UnboundLocalError" jest a subclass of "NameError".\n'
              '\n'
              'If a name binding operation occurs anywhere within a code '
              'block, all\n'
              'uses of the name within the block are treated jako references '
              'to the\n'
              'current block.  This can lead to errors when a name jest used '
              'within a\n'
              'block before it jest bound.  This rule jest subtle.  Python '
              'lacks\n'
              'declarations oraz allows name binding operations to occur '
              'anywhere\n'
              'within a code block.  The local variables of a code block can '
              'be\n'
              'determined by scanning the entire text of the block dla name '
              'binding\n'
              'operations.\n'
              '\n'
              'If the "global" statement occurs within a block, all uses of '
              'the name\n'
              'specified w the statement refer to the binding of that name '
              'in the\n'
              'top-level namespace.  Names are resolved w the top-level '
              'namespace by\n'
              'searching the global namespace, i.e. the namespace of the '
              'module\n'
              'containing the code block, oraz the builtins namespace, the '
              'namespace\n'
              'of the module "builtins".  The global namespace jest searched '
              'first.  If\n'
              'the name jest nie found there, the builtins namespace jest '
              'searched.  The\n'
              '"global" statement must precede all uses of the name.\n'
              '\n'
              'The "global" statement has the same scope jako a name binding '
              'operation\n'
              'in the same block.  If the nearest enclosing scope dla a free '
              'variable\n'
              'contains a global statement, the free variable jest treated jako '
              'a global.\n'
              '\n'
              'The "nonlocal" statement causes corresponding names to refer '
              'to\n'
              'previously bound variables w the nearest enclosing function '
              'scope.\n'
              '"SyntaxError" jest podnieśd at compile time jeżeli the given name '
              'does not\n'
              'exist w any enclosing function scope.\n'
              '\n'
              'The namespace dla a module jest automatically created the first '
              'time a\n'
              'module jest imported.  The main module dla a script jest always '
              'called\n'
              '"__main__".\n'
              '\n'
              'Class definition blocks oraz arguments to "exec()" oraz '
              '"eval()" are\n'
              'special w the context of name resolution. A klasa definition '
              'is an\n'
              'executable statement that may use oraz define names. These '
              'references\n'
              'follow the normal rules dla name resolution przy an exception '
              'that\n'
              'unbound local variables are looked up w the global '
              'namespace. The\n'
              'namespace of the klasa definition becomes the attribute '
              'dictionary of\n'
              'the class. The scope of names defined w a klasa block jest '
              'limited to\n'
              'the klasa block; it does nie extend to the code blocks of '
              'methods --\n'
              'this includes comprehensions oraz generator expressions since '
              'they are\n'
              'implemented using a function scope.  This means that the '
              'following\n'
              'will fail:\n'
              '\n'
              '   klasa A:\n'
              '       a = 42\n'
              '       b = list(a + i dla i w range(10))\n'
              '\n'
              '\n'
              'Builtins oraz restricted execution\n'
              '---------------------------------\n'
              '\n'
              'The builtins namespace associated przy the execution of a '
              'code block\n'
              'is actually found by looking up the name "__builtins__" w '
              'its global\n'
              'namespace; this should be a dictionary albo a module (in the '
              'latter case\n'
              "the module's dictionary jest used).  By default, when w the "
              '"__main__"\n'
              'module, "__builtins__" jest the built-in module "builtins"; '
              'when w any\n'
              'other module, "__builtins__" jest an alias dla the dictionary '
              'of the\n'
              '"builtins" module itself.  "__builtins__" can be set to a '
              'user-created\n'
              'dictionary to create a weak form of restricted execution.\n'
              '\n'
              '**CPython implementation detail:** Users should nie touch\n'
              '"__builtins__"; it jest strictly an implementation detail.  '
              'Users\n'
              'wanting to override values w the builtins namespace should '
              '"import"\n'
              'the "builtins" module oraz modify its attributes '
              'appropriately.\n'
              '\n'
              '\n'
              'Interaction przy dynamic features\n'
              '---------------------------------\n'
              '\n'
              'Name resolution of free variables occurs at runtime, nie at '
              'compile\n'
              'time. This means that the following code will print 42:\n'
              '\n'
              '   i = 10\n'
              '   def f():\n'
              '       print(i)\n'
              '   i = 42\n'
              '   f()\n'
              '\n'
              'There are several cases where Python statements are illegal '
              'when used\n'
              'in conjunction przy nested scopes that contain free '
              'variables.\n'
              '\n'
              'If a variable jest referenced w an enclosing scope, it jest '
              'illegal to\n'
              'delete the name.  An error will be reported at compile time.\n'
              '\n'
              'The "eval()" oraz "exec()" functions do nie have access to the '
              'full\n'
              'environment dla resolving names.  Names may be resolved w '
              'the local\n'
              'and global namespaces of the caller.  Free variables are nie '
              'resolved\n'
              'in the nearest enclosing namespace, but w the global '
              'namespace.  [1]\n'
              'The "exec()" oraz "eval()" functions have optional arguments '
              'to\n'
              'override the global oraz local namespace.  If only one '
              'namespace is\n'
              'specified, it jest used dla both.\n'
              '\n'
              '\n'
              'Exceptions\n'
              '==========\n'
              '\n'
              'Exceptions are a means of przerwijing out of the normal flow of '
              'control\n'
              'of a code block w order to handle errors albo other '
              'exceptional\n'
              'conditions.  An exception jest *raised* at the point where the '
              'error is\n'
              'detected; it may be *handled* by the surrounding code block '
              'or by any\n'
              'code block that directly albo indirectly invoked the code block '
              'where\n'
              'the error occurred.\n'
              '\n'
              'The Python interpreter podnieśs an exception when it detects a '
              'run-time\n'
              'error (such jako division by zero).  A Python program can also\n'
              'explicitly podnieś an exception przy the "raise" statement. '
              'Exception\n'
              'handlers are specified przy the "try" ... "except" '
              'statement.  The\n'
              '"finally" clause of such a statement can be used to specify '
              'cleanup\n'
              'code which does nie handle the exception, but jest executed '
              'whether an\n'
              'exception occurred albo nie w the preceding code.\n'
              '\n'
              'Python uses the "termination" mousuń of error handling: an '
              'exception\n'
              'handler can find out what happened oraz continue execution at '
              'an outer\n'
              'level, but it cannot repair the cause of the error oraz retry '
              'the\n'
              'failing operation (wyjąwszy by re-entering the offending piece '
              'of code\n'
              'z the top).\n'
              '\n'
              'When an exception jest nie handled at all, the interpreter '
              'terminates\n'
              'execution of the program, albo returns to its interactive main '
              'loop.  In\n'
              'either case, it prints a stack backtrace, wyjąwszy when the '
              'exception is\n'
              '"SystemExit".\n'
              '\n'
              'Exceptions are identified by klasa instances.  The "except" '
              'clause is\n'
              'selected depending on the klasa of the instance: it must '
              'reference the\n'
              'class of the instance albo a base klasa thereof.  The instance '
              'can be\n'
              'received by the handler oraz can carry additional information '
              'about the\n'
              'exceptional condition.\n'
              '\n'
              'Note: Exception messages are nie part of the Python API.  '
              'Their\n'
              '  contents may change z one version of Python to the next '
              'without\n'
              '  warning oraz should nie be relied on by code which will run '
              'under\n'
              '  multiple versions of the interpreter.\n'
              '\n'
              'See also the description of the "try" statement w section '
              '*The try\n'
              'statement* oraz "raise" statement w section *The podnieś '
              'statement*.\n'
              '\n'
              '-[ Footnotes ]-\n'
              '\n'
              '[1] This limitation occurs because the code that jest executed '
              'by\n'
              '    these operations jest nie available at the time the module '
              'is\n'
              '    compiled.\n',
 'exprlists': '\n'
              'Expression lists\n'
              '****************\n'
              '\n'
              '   expression_list ::= expression ( "," expression )* [","]\n'
              '\n'
              'An expression list containing at least one comma uzyskajs a '
              'tuple.  The\n'
              'length of the tuple jest the number of expressions w the '
              'list.  The\n'
              'expressions are evaluated z left to right.\n'
              '\n'
              'The trailing comma jest required only to create a single tuple '
              '(a.k.a. a\n'
              '*singleton*); it jest optional w all other cases.  A single '
              'expression\n'
              "without a trailing comma doesn't create a tuple, but rather "
              'uzyskajs the\n'
              'value of that expression. (To create an empty tuple, use an '
              'empty pair\n'
              'of parentheses: "()".)\n',
 'floating': '\n'
             'Floating point literals\n'
             '***********************\n'
             '\n'
             'Floating point literals are described by the following '
             'lexical\n'
             'definitions:\n'
             '\n'
             '   floatnumber   ::= pointfloat | exponentfloat\n'
             '   pointfloat    ::= [intpart] fraction | intpart "."\n'
             '   exponentfloat ::= (intpart | pointfloat) exponent\n'
             '   intpart       ::= digit+\n'
             '   fraction      ::= "." digit+\n'
             '   exponent      ::= ("e" | "E") ["+" | "-"] digit+\n'
             '\n'
             'Note that the integer oraz exponent parts are always '
             'interpreted using\n'
             'radix 10. For example, "077e010" jest legal, oraz denotes the '
             'same number\n'
             'as "77e10". The allowed range of floating point literals is\n'
             'implementation-dependent. Some examples of floating point '
             'literals:\n'
             '\n'
             '   3.14    10.    .001    1e100    3.14e-10    0e0\n'
             '\n'
             'Note that numeric literals do nie include a sign; a phrase '
             'like "-1"\n'
             'is actually an expression composed of the unary operator "-" '
             'and the\n'
             'literal "1".\n',
 'for': '\n'
        'The "for" statement\n'
        '*******************\n'
        '\n'
        'The "for" statement jest used to iterate over the elements of a '
        'sequence\n'
        '(such jako a string, tuple albo list) albo other iterable object:\n'
        '\n'
        '   for_stmt ::= "for" target_list "in" expression_list ":" suite\n'
        '                ["inaczej" ":" suite]\n'
        '\n'
        'The expression list jest evaluated once; it should uzyskaj an iterable\n'
        'object.  An iterator jest created dla the result of the\n'
        '"expression_list".  The suite jest then executed once dla each item\n'
        'provided by the iterator, w the order returned by the iterator.  '
        'Each\n'
        'item w turn jest assigned to the target list using the standard '
        'rules\n'
        'dla assignments (see *Assignment statements*), oraz then the suite '
        'is\n'
        'executed.  When the items are exhausted (which jest immediately when '
        'the\n'
        'sequence jest empty albo an iterator podnieśs a "StopIteration" '
        'exception),\n'
        'the suite w the "inaczej" clause, jeżeli present, jest executed, oraz the '
        'loop\n'
        'terminates.\n'
        '\n'
        'A "break" statement executed w the first suite terminates the '
        'loop\n'
        'without executing the "inaczej" clause\'s suite.  A "continue" '
        'statement\n'
        'executed w the first suite skips the rest of the suite oraz '
        'continues\n'
        'przy the next item, albo przy the "inaczej" clause jeżeli there jest no next\n'
        'item.\n'
        '\n'
        'The for-loop makes assignments to the variables(s) w the target '
        'list.\n'
        'This overwrites all previous assignments to those variables '
        'including\n'
        'those made w the suite of the for-loop:\n'
        '\n'
        '   dla i w range(10):\n'
        '       print(i)\n'
        '       i = 5             # this will nie affect the for-loop\n'
        '                         # because i will be overwritten przy the '
        'next\n'
        '                         # index w the range\n'
        '\n'
        'Names w the target list are nie deleted when the loop jest '
        'finished,\n'
        'but jeżeli the sequence jest empty, they will nie have been assigned to '
        'at\n'
        'all by the loop.  Hint: the built-in function "range()" returns an\n'
        "iterator of integers suitable to emulate the effect of Pascal's "
        '"dla i\n'
        ':= a to b do"; e.g., "list(range(3))" returns the list "[0, 1, '
        '2]".\n'
        '\n'
        'Note: There jest a subtlety when the sequence jest being modified by '
        'the\n'
        '  loop (this can only occur dla mutable sequences, i.e. lists).  '
        'An\n'
        '  internal counter jest used to keep track of which item jest used '
        'next,\n'
        '  oraz this jest incremented on each iteration.  When this counter '
        'has\n'
        '  reached the length of the sequence the loop terminates.  This '
        'means\n'
        '  that jeżeli the suite deletes the current (or a previous) item z '
        'the\n'
        '  sequence, the next item will be skipped (since it gets the index '
        'of\n'
        '  the current item which has already been treated).  Likewise, jeżeli '
        'the\n'
        '  suite inserts an item w the sequence before the current item, '
        'the\n'
        '  current item will be treated again the next time through the '
        'loop.\n'
        '  This can lead to nasty bugs that can be avoided by making a\n'
        '  temporary copy using a slice of the whole sequence, e.g.,\n'
        '\n'
        '     dla x w a[:]:\n'
        '         jeżeli x < 0: a.remove(x)\n',
 'formatstrings': '\n'
                  'Format String Syntax\n'
                  '********************\n'
                  '\n'
                  'The "str.format()" method oraz the "Formatter" klasa share '
                  'the same\n'
                  'syntax dla format strings (although w the case of '
                  '"Formatter",\n'
                  'subclasses can define their own format string syntax).\n'
                  '\n'
                  'Format strings contain "replacement fields" surrounded by '
                  'curly braces\n'
                  '"{}". Anything that jest nie contained w braces jest '
                  'considered literal\n'
                  'text, which jest copied unchanged to the output.  If you '
                  'need to include\n'
                  'a brace character w the literal text, it can be escaped '
                  'by doubling:\n'
                  '"{{" oraz "}}".\n'
                  '\n'
                  'The grammar dla a replacement field jest jako follows:\n'
                  '\n'
                  '      replacement_field ::= "{" [field_name] ["!" '
                  'conversion] [":" format_spec] "}"\n'
                  '      field_name        ::= arg_name ("." attribute_name '
                  '| "[" element_index "]")*\n'
                  '      arg_name          ::= [identifier | integer]\n'
                  '      attribute_name    ::= identifier\n'
                  '      element_index     ::= integer | index_string\n'
                  '      index_string      ::= <any source character wyjąwszy '
                  '"]"> +\n'
                  '      conversion        ::= "r" | "s" | "a"\n'
                  '      format_spec       ::= <described w the next '
                  'section>\n'
                  '\n'
                  'In less formal terms, the replacement field can start '
                  'przy a\n'
                  '*field_name* that specifies the object whose value jest to '
                  'be formatted\n'
                  'and inserted into the output instead of the replacement '
                  'field. The\n'
                  '*field_name* jest optionally followed by a  *conversion* '
                  'field, which is\n'
                  'preceded by an exclamation point "\'!\'", oraz a '
                  '*format_spec*, which is\n'
                  'preceded by a colon "\':\'".  These specify a non-default '
                  'format dla the\n'
                  'replacement value.\n'
                  '\n'
                  'See also the *Format Specification Mini-Language* '
                  'section.\n'
                  '\n'
                  'The *field_name* itself begins przy an *arg_name* that jest '
                  'either a\n'
                  "number albo a keyword.  If it's a number, it refers to a "
                  'positional\n'
                  "argument, oraz jeżeli it's a keyword, it refers to a named "
                  'keyword\n'
                  'argument.  If the numerical arg_names w a format string '
                  'are 0, 1, 2,\n'
                  '... w sequence, they can all be omitted (nie just some) '
                  'and the\n'
                  'numbers 0, 1, 2, ... will be automatically inserted w '
                  'that order.\n'
                  'Because *arg_name* jest nie quote-delimited, it jest nie '
                  'possible to\n'
                  'specify arbitrary dictionary keys (e.g., the strings '
                  '"\'10\'" or\n'
                  '"\':-]\'") within a format string. The *arg_name* can be '
                  'followed by any\n'
                  'number of index albo attribute expressions. An expression '
                  'of the form\n'
                  '"\'.name\'" selects the named attribute using '
                  '"getattr()", dopóki an\n'
                  'expression of the form "\'[index]\'" does an index lookup '
                  'using\n'
                  '"__getitem__()".\n'
                  '\n'
                  'Changed w version 3.1: The positional argument '
                  'specifiers can be\n'
                  'omitted, so "\'{} {}\'" jest equivalent to "\'{0} {1}\'".\n'
                  '\n'
                  'Some simple format string examples:\n'
                  '\n'
                  '   "First, thou shalt count to {0}" # References first '
                  'positional argument\n'
                  '   "Bring me a {}"                  # Implicitly '
                  'references the first positional argument\n'
                  '   "From {} to {}"                  # Same jako "From {0} '
                  'to {1}"\n'
                  '   "My quest jest {name}"             # References keyword '
                  "argument 'name'\n"
                  '   "Weight w tons {0.weight}"      # \'weight\' '
                  'attribute of first positional arg\n'
                  '   "Units destroyed: {players[0]}"  # First element of '
                  "keyword argument 'players'.\n"
                  '\n'
                  'The *conversion* field causes a type coercion before '
                  'formatting.\n'
                  'Normally, the job of formatting a value jest done by the '
                  '"__format__()"\n'
                  'method of the value itself.  However, w some cases it jest '
                  'desirable to\n'
                  'force a type to be formatted jako a string, overriding its '
                  'own\n'
                  'definition of formatting.  By converting the value to a '
                  'string before\n'
                  'calling "__format__()", the normal formatting logic jest '
                  'bypassed.\n'
                  '\n'
                  'Three conversion flags are currently supported: "\'!s\'" '
                  'which calls\n'
                  '"str()" on the value, "\'!r\'" which calls "repr()" oraz '
                  '"\'!a\'" which\n'
                  'calls "ascii()".\n'
                  '\n'
                  'Some examples:\n'
                  '\n'
                  '   "Harold\'s a clever {0!s}"        # Calls str() on the '
                  'argument first\n'
                  '   "Bring out the holy {name!r}"    # Calls repr() on the '
                  'argument first\n'
                  '   "More {!a}"                      # Calls ascii() on '
                  'the argument first\n'
                  '\n'
                  'The *format_spec* field contains a specification of how '
                  'the value\n'
                  'should be presented, including such details jako field '
                  'width, alignment,\n'
                  'padding, decimal precision oraz so on.  Each value type '
                  'can define its\n'
                  'own "formatting mini-language" albo interpretation of the '
                  '*format_spec*.\n'
                  '\n'
                  'Most built-in types support a common formatting '
                  'mini-language, which\n'
                  'is described w the next section.\n'
                  '\n'
                  'A *format_spec* field can also include nested replacement '
                  'fields\n'
                  'within it. These nested replacement fields can contain '
                  'only a field\n'
                  'name; conversion flags oraz format specifications are nie '
                  'allowed.  The\n'
                  'replacement fields within the format_spec are substituted '
                  'before the\n'
                  '*format_spec* string jest interpreted. This allows the '
                  'formatting of a\n'
                  'value to be dynamically specified.\n'
                  '\n'
                  'See the *Format examples* section dla some examples.\n'
                  '\n'
                  '\n'
                  'Format Specification Mini-Language\n'
                  '==================================\n'
                  '\n'
                  '"Format specifications" are used within replacement '
                  'fields contained\n'
                  'within a format string to define how individual values '
                  'are presented\n'
                  '(see *Format String Syntax*).  They can also be dalejed '
                  'directly to the\n'
                  'built-in "format()" function.  Each formattable type may '
                  'define how\n'
                  'the format specification jest to be interpreted.\n'
                  '\n'
                  'Most built-in types implement the following options dla '
                  'format\n'
                  'specifications, although some of the formatting options '
                  'are only\n'
                  'supported by the numeric types.\n'
                  '\n'
                  'A general convention jest that an empty format string '
                  '("""") produces\n'
                  'the same result jako jeżeli you had called "str()" on the '
                  'value. A non-empty\n'
                  'format string typically modifies the result.\n'
                  '\n'
                  'The general form of a *standard format specifier* is:\n'
                  '\n'
                  '   format_spec ::= '
                  '[[fill]align][sign][#][0][width][,][.precision][type]\n'
                  '   fill        ::= <any character>\n'
                  '   align       ::= "<" | ">" | "=" | "^"\n'
                  '   sign        ::= "+" | "-" | " "\n'
                  '   width       ::= integer\n'
                  '   precision   ::= integer\n'
                  '   type        ::= "b" | "c" | "d" | "e" | "E" | "f" | '
                  '"F" | "g" | "G" | "n" | "o" | "s" | "x" | "X" | "%"\n'
                  '\n'
                  'If a valid *align* value jest specified, it can be preceded '
                  'by a *fill*\n'
                  'character that can be any character oraz defaults to a '
                  'space if\n'
                  'omitted. Note that it jest nie possible to use "{" oraz "}" '
                  'as *fill*\n'
                  'char dopóki using the "str.format()" method; this '
                  'limitation however\n'
                  'doesn\'t affect the "format()" function.\n'
                  '\n'
                  'The meaning of the various alignment options jest jako '
                  'follows:\n'
                  '\n'
                  '   '
                  '+-----------+------------------------------------------------------------+\n'
                  '   | Option    | '
                  'Meaning                                                    '
                  '|\n'
                  '   '
                  '+===========+============================================================+\n'
                  '   | "\'<\'"     | Forces the field to be left-aligned '
                  'within the available   |\n'
                  '   |           | space (this jest the default dla most '
                  'objects).              |\n'
                  '   '
                  '+-----------+------------------------------------------------------------+\n'
                  '   | "\'>\'"     | Forces the field to be right-aligned '
                  'within the available  |\n'
                  '   |           | space (this jest the default dla '
                  'numbers).                   |\n'
                  '   '
                  '+-----------+------------------------------------------------------------+\n'
                  '   | "\'=\'"     | Forces the padding to be placed after '
                  'the sign (jeżeli any)    |\n'
                  '   |           | but before the digits.  This jest used dla '
                  'printing fields   |\n'
                  "   |           | w the form '+000000120'. This alignment "
                  'option jest only    |\n'
                  '   |           | valid dla numeric '
                  'types.                                   |\n'
                  '   '
                  '+-----------+------------------------------------------------------------+\n'
                  '   | "\'^\'"     | Forces the field to be centered within '
                  'the available       |\n'
                  '   |           | '
                  'space.                                                     '
                  '|\n'
                  '   '
                  '+-----------+------------------------------------------------------------+\n'
                  '\n'
                  'Note that unless a minimum field width jest defined, the '
                  'field width\n'
                  'will always be the same size jako the data to fill it, so '
                  'that the\n'
                  'alignment option has no meaning w this case.\n'
                  '\n'
                  'The *sign* option jest only valid dla number types, oraz can '
                  'be one of\n'
                  'the following:\n'
                  '\n'
                  '   '
                  '+-----------+------------------------------------------------------------+\n'
                  '   | Option    | '
                  'Meaning                                                    '
                  '|\n'
                  '   '
                  '+===========+============================================================+\n'
                  '   | "\'+\'"     | indicates that a sign should be used '
                  'dla both positive jako  |\n'
                  '   |           | well jako negative '
                  'numbers.                                  |\n'
                  '   '
                  '+-----------+------------------------------------------------------------+\n'
                  '   | "\'-\'"     | indicates that a sign should be used '
                  'only dla negative     |\n'
                  '   |           | numbers (this jest the default '
                  'behavior).                    |\n'
                  '   '
                  '+-----------+------------------------------------------------------------+\n'
                  '   | space     | indicates that a leading space should be '
                  'used on positive  |\n'
                  '   |           | numbers, oraz a minus sign on negative '
                  'numbers.             |\n'
                  '   '
                  '+-----------+------------------------------------------------------------+\n'
                  '\n'
                  'The "\'#\'" option causes the "alternate form" to be used '
                  'dla the\n'
                  'conversion.  The alternate form jest defined differently '
                  'dla different\n'
                  'types.  This option jest only valid dla integer, float, '
                  'complex and\n'
                  'Decimal types. For integers, when binary, octal, albo '
                  'hexadecimal output\n'
                  'is used, this option adds the prefix respective "\'0b\'", '
                  '"\'0o\'", or\n'
                  '"\'0x\'" to the output value. For floats, complex oraz '
                  'Decimal the\n'
                  'alternate form causes the result of the conversion to '
                  'always contain a\n'
                  'decimal-point character, even jeżeli no digits follow it. '
                  'Normally, a\n'
                  'decimal-point character appears w the result of these '
                  'conversions\n'
                  'only jeżeli a digit follows it. In addition, dla "\'g\'" oraz '
                  '"\'G\'"\n'
                  'conversions, trailing zeros are nie removed z the '
                  'result.\n'
                  '\n'
                  'The "\',\'" option signals the use of a comma dla a '
                  'thousands separator.\n'
                  'For a locale aware separator, use the "\'n\'" integer '
                  'presentation type\n'
                  'instead.\n'
                  '\n'
                  'Changed w version 3.1: Added the "\',\'" option (see '
                  'also **PEP 378**).\n'
                  '\n'
                  '*width* jest a decimal integer defining the minimum field '
                  'width.  If not\n'
                  'specified, then the field width will be determined by the '
                  'content.\n'
                  '\n'
                  'Preceding the *width* field by a zero ("\'0\'") character '
                  'enables sign-\n'
                  'aware zero-padding dla numeric types.  This jest equivalent '
                  'to a *fill*\n'
                  'character of "\'0\'" przy an *alignment* type of '
                  '"\'=\'".\n'
                  '\n'
                  'The *precision* jest a decimal number indicating how many '
                  'digits should\n'
                  'be displayed after the decimal point dla a floating point '
                  'value\n'
                  'formatted przy "\'f\'" oraz "\'F\'", albo before oraz after '
                  'the decimal point\n'
                  'dla a floating point value formatted przy "\'g\'" albo '
                  '"\'G\'".  For non-\n'
                  'number types the field indicates the maximum field size - '
                  'in other\n'
                  'words, how many characters will be used z the field '
                  'content. The\n'
                  '*precision* jest nie allowed dla integer values.\n'
                  '\n'
                  'Finally, the *type* determines how the data should be '
                  'presented.\n'
                  '\n'
                  'The available string presentation types are:\n'
                  '\n'
                  '   '
                  '+-----------+------------------------------------------------------------+\n'
                  '   | Type      | '
                  'Meaning                                                    '
                  '|\n'
                  '   '
                  '+===========+============================================================+\n'
                  '   | "\'s\'"     | String format. This jest the default '
                  'type dla strings oraz    |\n'
                  '   |           | may be '
                  'omitted.                                            |\n'
                  '   '
                  '+-----------+------------------------------------------------------------+\n'
                  '   | Nic      | The same jako '
                  '"\'s\'".                                         |\n'
                  '   '
                  '+-----------+------------------------------------------------------------+\n'
                  '\n'
                  'The available integer presentation types are:\n'
                  '\n'
                  '   '
                  '+-----------+------------------------------------------------------------+\n'
                  '   | Type      | '
                  'Meaning                                                    '
                  '|\n'
                  '   '
                  '+===========+============================================================+\n'
                  '   | "\'b\'"     | Binary format. Outputs the number w '
                  'base 2.               |\n'
                  '   '
                  '+-----------+------------------------------------------------------------+\n'
                  '   | "\'c\'"     | Character. Converts the integer to the '
                  'corresponding       |\n'
                  '   |           | unicode character before '
                  'printing.                         |\n'
                  '   '
                  '+-----------+------------------------------------------------------------+\n'
                  '   | "\'d\'"     | Decimal Integer. Outputs the number w '
                  'base 10.            |\n'
                  '   '
                  '+-----------+------------------------------------------------------------+\n'
                  '   | "\'o\'"     | Octal format. Outputs the number w '
                  'base 8.                |\n'
                  '   '
                  '+-----------+------------------------------------------------------------+\n'
                  '   | "\'x\'"     | Hex format. Outputs the number w base '
                  '16, using lower-    |\n'
                  '   |           | case letters dla the digits above '
                  '9.                       |\n'
                  '   '
                  '+-----------+------------------------------------------------------------+\n'
                  '   | "\'X\'"     | Hex format. Outputs the number w base '
                  '16, using upper-    |\n'
                  '   |           | case letters dla the digits above '
                  '9.                       |\n'
                  '   '
                  '+-----------+------------------------------------------------------------+\n'
                  '   | "\'n\'"     | Number. This jest the same jako "\'d\'", '
                  'wyjąwszy that it uses the |\n'
                  '   |           | current locale setting to insert the '
                  'appropriate number    |\n'
                  '   |           | separator '
                  'characters.                                      |\n'
                  '   '
                  '+-----------+------------------------------------------------------------+\n'
                  '   | Nic      | The same jako '
                  '"\'d\'".                                         |\n'
                  '   '
                  '+-----------+------------------------------------------------------------+\n'
                  '\n'
                  'In addition to the above presentation types, integers can '
                  'be formatted\n'
                  'przy the floating point presentation types listed below '
                  '(wyjąwszy "\'n\'"\n'
                  'and Nic). When doing so, "float()" jest used to convert '
                  'the integer to\n'
                  'a floating point number before formatting.\n'
                  '\n'
                  'The available presentation types dla floating point oraz '
                  'decimal values\n'
                  'are:\n'
                  '\n'
                  '   '
                  '+-----------+------------------------------------------------------------+\n'
                  '   | Type      | '
                  'Meaning                                                    '
                  '|\n'
                  '   '
                  '+===========+============================================================+\n'
                  '   | "\'e\'"     | Exponent notation. Prints the number '
                  'in scientific         |\n'
                  "   |           | notation using the letter 'e' to "
                  'indicate the exponent.    |\n'
                  '   |           | The default precision jest '
                  '"6".                              |\n'
                  '   '
                  '+-----------+------------------------------------------------------------+\n'
                  '   | "\'E\'"     | Exponent notation. Same jako "\'e\'" '
                  'wyjąwszy it uses an upper   |\n'
                  "   |           | case 'E' jako the separator "
                  'character.                       |\n'
                  '   '
                  '+-----------+------------------------------------------------------------+\n'
                  '   | "\'f\'"     | Fixed point. Displays the number jako a '
                  'fixed-point number.  |\n'
                  '   |           | The default precision jest '
                  '"6".                              |\n'
                  '   '
                  '+-----------+------------------------------------------------------------+\n'
                  '   | "\'F\'"     | Fixed point. Same jako "\'f\'", but '
                  'converts "nan" to "NAN"    |\n'
                  '   |           | oraz "inf" to '
                  '"INF".                                        |\n'
                  '   '
                  '+-----------+------------------------------------------------------------+\n'
                  '   | "\'g\'"     | General format.  For a given precision '
                  '"p >= 1", this      |\n'
                  '   |           | rounds the number to "p" significant '
                  'digits oraz then       |\n'
                  '   |           | formats the result w either fixed-point '
                  'format albo w      |\n'
                  '   |           | scientific notation, depending on its '
                  'magnitude.  The      |\n'
                  '   |           | precise rules are jako follows: suppose '
                  'that the result      |\n'
                  '   |           | formatted przy presentation type "\'e\'" '
                  'and precision "p-1" |\n'
                  '   |           | would have exponent "exp".  Then jeżeli "-4 '
                  '<= exp < p", the   |\n'
                  '   |           | number jest formatted przy presentation '
                  'type "\'f\'" oraz       |\n'
                  '   |           | precision "p-1-exp".  Otherwise, the '
                  'number jest formatted   |\n'
                  '   |           | przy presentation type "\'e\'" oraz '
                  'precision "p-1". In both  |\n'
                  '   |           | cases insignificant trailing zeros are '
                  'removed z the    |\n'
                  '   |           | significand, oraz the decimal point jest '
                  'also removed jeżeli      |\n'
                  '   |           | there are no remaining digits following '
                  'it.  Positive oraz  |\n'
                  '   |           | negative infinity, positive oraz negative '
                  'zero, oraz nans,   |\n'
                  '   |           | are formatted jako "inf", "-inf", "0", '
                  '"-0" oraz "nan"        |\n'
                  '   |           | respectively, regardless of the '
                  'precision.  A precision of |\n'
                  '   |           | "0" jest treated jako equivalent to a '
                  'precision of "1". The    |\n'
                  '   |           | default precision jest '
                  '"6".                                  |\n'
                  '   '
                  '+-----------+------------------------------------------------------------+\n'
                  '   | "\'G\'"     | General format. Same jako "\'g\'" wyjąwszy '
                  'switches to "\'E\'" jeżeli  |\n'
                  '   |           | the number gets too large. The '
                  'representations of infinity |\n'
                  '   |           | oraz NaN are uppercased, '
                  'too.                               |\n'
                  '   '
                  '+-----------+------------------------------------------------------------+\n'
                  '   | "\'n\'"     | Number. This jest the same jako "\'g\'", '
                  'wyjąwszy that it uses the |\n'
                  '   |           | current locale setting to insert the '
                  'appropriate number    |\n'
                  '   |           | separator '
                  'characters.                                      |\n'
                  '   '
                  '+-----------+------------------------------------------------------------+\n'
                  '   | "\'%\'"     | Percentage. Multiplies the number by '
                  '100 oraz displays w   |\n'
                  '   |           | fixed ("\'f\'") format, followed by a '
                  'percent sign.          |\n'
                  '   '
                  '+-----------+------------------------------------------------------------+\n'
                  '   | Nic      | Similar to "\'g\'", wyjąwszy that '
                  'fixed-point notation, when   |\n'
                  '   |           | used, has at least one digit past the '
                  'decimal point. The   |\n'
                  '   |           | default precision jest jako high jako needed '
                  'to represent the    |\n'
                  '   |           | particular value. The overall effect jest '
                  'to match the       |\n'
                  '   |           | output of "str()" jako altered by the '
                  'other format           |\n'
                  '   |           | '
                  'modifiers.                                                 '
                  '|\n'
                  '   '
                  '+-----------+------------------------------------------------------------+\n'
                  '\n'
                  '\n'
                  'Format examples\n'
                  '===============\n'
                  '\n'
                  'This section contains examples of the new format syntax '
                  'and comparison\n'
                  'przy the old "%"-formatting.\n'
                  '\n'
                  'In most of the cases the syntax jest similar to the old '
                  '"%"-formatting,\n'
                  'przy the addition of the "{}" oraz przy ":" used instead '
                  'of "%". For\n'
                  'example, "\'%03.2f\'" can be translated to '
                  '"\'{:03.2f}\'".\n'
                  '\n'
                  'The new format syntax also supports new oraz different '
                  'options, shown\n'
                  'in the follow examples.\n'
                  '\n'
                  'Accessing arguments by position:\n'
                  '\n'
                  "   >>> '{0}, {1}, {2}'.format('a', 'b', 'c')\n"
                  "   'a, b, c'\n"
                  "   >>> '{}, {}, {}'.format('a', 'b', 'c')  # 3.1+ only\n"
                  "   'a, b, c'\n"
                  "   >>> '{2}, {1}, {0}'.format('a', 'b', 'c')\n"
                  "   'c, b, a'\n"
                  "   >>> '{2}, {1}, {0}'.format(*'abc')      # unpacking "
                  'argument sequence\n'
                  "   'c, b, a'\n"
                  "   >>> '{0}{1}{0}'.format('abra', 'cad')   # arguments' "
                  'indices can be repeated\n'
                  "   'abracadabra'\n"
                  '\n'
                  'Accessing arguments by name:\n'
                  '\n'
                  "   >>> 'Coordinates: {latitude}, "
                  "{longitude}'.format(latitude='37.24N', "
                  "longitude='-115.81W')\n"
                  "   'Coordinates: 37.24N, -115.81W'\n"
                  "   >>> coord = {'latitude': '37.24N', 'longitude': "
                  "'-115.81W'}\n"
                  "   >>> 'Coordinates: {latitude}, "
                  "{longitude}'.format(**coord)\n"
                  "   'Coordinates: 37.24N, -115.81W'\n"
                  '\n'
                  "Accessing arguments' attributes:\n"
                  '\n'
                  '   >>> c = 3-5j\n'
                  "   >>> ('The complex number {0} jest formed z the real "
                  "part {0.real} '\n"
                  "   ...  'and the imaginary part {0.imag}.').format(c)\n"
                  "   'The complex number (3-5j) jest formed z the real "
                  "part 3.0 oraz the imaginary part -5.0.'\n"
                  '   >>> klasa Point:\n'
                  '   ...     def __init__(self, x, y):\n'
                  '   ...         self.x, self.y = x, y\n'
                  '   ...     def __str__(self):\n'
                  "   ...         zwróć 'Point({self.x}, "
                  "{self.y})'.format(self=self)\n"
                  '   ...\n'
                  '   >>> str(Point(4, 2))\n'
                  "   'Point(4, 2)'\n"
                  '\n'
                  "Accessing arguments' items:\n"
                  '\n'
                  '   >>> coord = (3, 5)\n'
                  "   >>> 'X: {0[0]};  Y: {0[1]}'.format(coord)\n"
                  "   'X: 3;  Y: 5'\n"
                  '\n'
                  'Replacing "%s" oraz "%r":\n'
                  '\n'
                  '   >>> "repr() shows quotes: {!r}; str() doesn\'t: '
                  '{!s}".format(\'test1\', \'test2\')\n'
                  '   "repr() shows quotes: \'test1\'; str() doesn\'t: '
                  'test2"\n'
                  '\n'
                  'Aligning the text oraz specifying a width:\n'
                  '\n'
                  "   >>> '{:<30}'.format('left aligned')\n"
                  "   'left aligned                  '\n"
                  "   >>> '{:>30}'.format('right aligned')\n"
                  "   '                 right aligned'\n"
                  "   >>> '{:^30}'.format('centered')\n"
                  "   '           centered           '\n"
                  "   >>> '{:*^30}'.format('centered')  # use '*' jako a fill "
                  'char\n'
                  "   '***********centered***********'\n"
                  '\n'
                  'Replacing "%+f", "%-f", oraz "% f" oraz specifying a sign:\n'
                  '\n'
                  "   >>> '{:+f}; {:+f}'.format(3.14, -3.14)  # show it "
                  'always\n'
                  "   '+3.140000; -3.140000'\n"
                  "   >>> '{: f}; {: f}'.format(3.14, -3.14)  # show a space "
                  'dla positive numbers\n'
                  "   ' 3.140000; -3.140000'\n"
                  "   >>> '{:-f}; {:-f}'.format(3.14, -3.14)  # show only "
                  "the minus -- same jako '{:f}; {:f}'\n"
                  "   '3.140000; -3.140000'\n"
                  '\n'
                  'Replacing "%x" oraz "%o" oraz converting the value to '
                  'different bases:\n'
                  '\n'
                  '   >>> # format also supports binary numbers\n'
                  '   >>> "int: {0:d};  hex: {0:x};  oct: {0:o};  bin: '
                  '{0:b}".format(42)\n'
                  "   'int: 42;  hex: 2a;  oct: 52;  bin: 101010'\n"
                  '   >>> # przy 0x, 0o, albo 0b jako prefix:\n'
                  '   >>> "int: {0:d};  hex: {0:#x};  oct: {0:#o};  bin: '
                  '{0:#b}".format(42)\n'
                  "   'int: 42;  hex: 0x2a;  oct: 0o52;  bin: 0b101010'\n"
                  '\n'
                  'Using the comma jako a thousands separator:\n'
                  '\n'
                  "   >>> '{:,}'.format(1234567890)\n"
                  "   '1,234,567,890'\n"
                  '\n'
                  'Expressing a percentage:\n'
                  '\n'
                  '   >>> points = 19\n'
                  '   >>> total = 22\n'
                  "   >>> 'Correct answers: {:.2%}'.format(points/total)\n"
                  "   'Correct answers: 86.36%'\n"
                  '\n'
                  'Using type-specific formatting:\n'
                  '\n'
                  '   >>> zaimportuj datetime\n'
                  '   >>> d = datetime.datetime(2010, 7, 4, 12, 15, 58)\n'
                  "   >>> '{:%Y-%m-%d %H:%M:%S}'.format(d)\n"
                  "   '2010-07-04 12:15:58'\n"
                  '\n'
                  'Nesting arguments oraz more complex examples:\n'
                  '\n'
                  "   >>> dla align, text w zip('<^>', ['left', 'center', "
                  "'right']):\n"
                  "   ...     '{0:{fill}{align}16}'.format(text, fill=align, "
                  'align=align)\n'
                  '   ...\n'
                  "   'left<<<<<<<<<<<<'\n"
                  "   '^^^^^center^^^^^'\n"
                  "   '>>>>>>>>>>>right'\n"
                  '   >>>\n'
                  '   >>> octets = [192, 168, 0, 1]\n'
                  "   >>> '{:02X}{:02X}{:02X}{:02X}'.format(*octets)\n"
                  "   'C0A80001'\n"
                  '   >>> int(_, 16)\n'
                  '   3232235521\n'
                  '   >>>\n'
                  '   >>> width = 5\n'
                  '   >>> dla num w range(5,12): #doctest: '
                  '+NORMALIZE_WHITESPACE\n'
                  "   ...     dla base w 'dXob':\n"
                  "   ...         print('{0:{width}{base}}'.format(num, "
                  "base=base, width=width), end=' ')\n"
                  '   ...     print()\n'
                  '   ...\n'
                  '       5     5     5   101\n'
                  '       6     6     6   110\n'
                  '       7     7     7   111\n'
                  '       8     8    10  1000\n'
                  '       9     9    11  1001\n'
                  '      10     A    12  1010\n'
                  '      11     B    13  1011\n',
 'function': '\n'
             'Function definitions\n'
             '********************\n'
             '\n'
             'A function definition defines a user-defined function object '
             '(see\n'
             'section *The standard type hierarchy*):\n'
             '\n'
             '   funcdef        ::= [decorators] "def" funcname "(" '
             '[parameter_list] ")" ["->" expression] ":" suite\n'
             '   decorators     ::= decorator+\n'
             '   decorator      ::= "@" dotted_name ["(" [parameter_list '
             '[","]] ")"] NEWLINE\n'
             '   dotted_name    ::= identifier ("." identifier)*\n'
             '   parameter_list ::= (defparameter ",")*\n'
             '                      | "*" [parameter] ("," defparameter)* '
             '["," "**" parameter]\n'
             '                      | "**" parameter\n'
             '                      | defparameter [","] )\n'
             '   parameter      ::= identifier [":" expression]\n'
             '   defparameter   ::= parameter ["=" expression]\n'
             '   funcname       ::= identifier\n'
             '\n'
             'A function definition jest an executable statement.  Its '
             'execution binds\n'
             'the function name w the current local namespace to a function '
             'object\n'
             '(a wrapper around the executable code dla the function).  '
             'This\n'
             'function object contains a reference to the current global '
             'namespace\n'
             'as the global namespace to be used when the function jest '
             'called.\n'
             '\n'
             'The function definition does nie execute the function body; '
             'this gets\n'
             'executed only when the function jest called. [3]\n'
             '\n'
             'A function definition may be wrapped by one albo more '
             '*decorator*\n'
             'expressions. Decorator expressions are evaluated when the '
             'function is\n'
             'defined, w the scope that contains the function definition.  '
             'The\n'
             'result must be a callable, which jest invoked przy the function '
             'object\n'
             'as the only argument. The returned value jest bound to the '
             'function name\n'
             'instead of the function object.  Multiple decorators are '
             'applied in\n'
             'nested fashion. For example, the following code\n'
             '\n'
             '   @f1(arg)\n'
             '   @f2\n'
             '   def func(): dalej\n'
             '\n'
             'is equivalent to\n'
             '\n'
             '   def func(): dalej\n'
             '   func = f1(arg)(f2(func))\n'
             '\n'
             'When one albo more *parameters* have the form *parameter* "="\n'
             '*expression*, the function jest said to have "default parameter '
             'values."\n'
             'For a parameter przy a default value, the corresponding '
             '*argument* may\n'
             "be omitted z a call, w which case the parameter's default "
             'value is\n'
             'substituted.  If a parameter has a default value, all '
             'following\n'
             'parameters up until the ""*"" must also have a default value '
             '--- this\n'
             'is a syntactic restriction that jest nie expressed by the '
             'grammar.\n'
             '\n'
             '**Default parameter values are evaluated z left to right '
             'when the\n'
             'function definition jest executed.** This means that the '
             'expression is\n'
             'evaluated once, when the function jest defined, oraz that the '
             'same "pre-\n'
             'computed" value jest used dla each call.  This jest especially '
             'important\n'
             'to understand when a default parameter jest a mutable object, '
             'such jako a\n'
             'list albo a dictionary: jeżeli the function modifies the object '
             '(e.g. by\n'
             'appending an item to a list), the default value jest w effect '
             'modified.\n'
             'This jest generally nie what was intended.  A way around this jest '
             'to use\n'
             '"Nic" jako the default, oraz explicitly test dla it w the body '
             'of the\n'
             'function, e.g.:\n'
             '\n'
             '   def whats_on_the_telly(penguin=Nic):\n'
             '       jeżeli penguin jest Nic:\n'
             '           penguin = []\n'
             '       penguin.append("property of the zoo")\n'
             '       zwróć penguin\n'
             '\n'
             'Function call semantics are described w more detail w '
             'section\n'
             '*Calls*. A function call always assigns values to all '
             'parameters\n'
             'mentioned w the parameter list, either z position '
             'arguments, from\n'
             'keyword arguments, albo z default values.  If the form\n'
             '""*identifier"" jest present, it jest initialized to a tuple '
             'receiving any\n'
             'excess positional parameters, defaulting to the empty tuple.  '
             'If the\n'
             'form ""**identifier"" jest present, it jest initialized to a new\n'
             'dictionary receiving any excess keyword arguments, defaulting '
             'to a new\n'
             'empty dictionary. Parameters after ""*"" albo ""*identifier"" '
             'are\n'
             'keyword-only parameters oraz may only be dalejed used keyword '
             'arguments.\n'
             '\n'
             'Parameters may have annotations of the form "": expression"" '
             'following\n'
             'the parameter name.  Any parameter may have an annotation even '
             'those\n'
             'of the form "*identifier" albo "**identifier".  Functions may '
             'have\n'
             '"return" annotation of the form ""-> expression"" after the '
             'parameter\n'
             'list.  These annotations can be any valid Python expression '
             'and are\n'
             'evaluated when the function definition jest executed.  '
             'Annotations may\n'
             'be evaluated w a different order than they appear w the '
             'source code.\n'
             'The presence of annotations does nie change the semantics of '
             'a\n'
             'function.  The annotation values are available jako values of a\n'
             "dictionary keyed by the parameters' names w the "
             '"__annotations__"\n'
             'attribute of the function object.\n'
             '\n'
             'It jest also possible to create anonymous functions (functions '
             'not bound\n'
             'to a name), dla immediate use w expressions.  This uses '
             'lambda\n'
             'expressions, described w section *Lambdas*.  Note that the '
             'lambda\n'
             'expression jest merely a shorthand dla a simplified function '
             'definition;\n'
             'a function defined w a ""def"" statement can be dalejed around '
             'or\n'
             'assigned to another name just like a function defined by a '
             'lambda\n'
             'expression.  The ""def"" form jest actually more powerful since '
             'it\n'
             'allows the execution of multiple statements oraz annotations.\n'
             '\n'
             "**Programmer's note:** Functions are first-class objects.  A "
             '""def""\n'
             'statement executed inside a function definition defines a '
             'local\n'
             'function that can be returned albo dalejed around.  Free '
             'variables used\n'
             'in the nested function can access the local variables of the '
             'function\n'
             'containing the def.  See section *Naming oraz binding* dla '
             'details.\n'
             '\n'
             'See also: **PEP 3107** - Function Annotations\n'
             '\n'
             '     The original specification dla function annotations.\n',
 'global': '\n'
           'The "global" statement\n'
           '**********************\n'
           '\n'
           '   global_stmt ::= "global" identifier ("," identifier)*\n'
           '\n'
           'The "global" statement jest a declaration which holds dla the '
           'entire\n'
           'current code block.  It means that the listed identifiers are to '
           'be\n'
           'interpreted jako globals.  It would be impossible to assign to a '
           'global\n'
           'variable without "global", although free variables may refer to\n'
           'globals without being declared global.\n'
           '\n'
           'Names listed w a "global" statement must nie be used w the '
           'same code\n'
           'block textually preceding that "global" statement.\n'
           '\n'
           'Names listed w a "global" statement must nie be defined jako '
           'formal\n'
           'parameters albo w a "for" loop control target, "class" '
           'definition,\n'
           'function definition, albo "import" statement.\n'
           '\n'
           '**CPython implementation detail:** The current implementation '
           'does not\n'
           'enforce the two restrictions, but programs should nie abuse '
           'this\n'
           'freedom, jako future implementations may enforce them albo silently '
           'change\n'
           'the meaning of the program.\n'
           '\n'
           '**Programmer\'s note:** the "global" jest a directive to the '
           'parser.  It\n'
           'applies only to code parsed at the same time jako the "global"\n'
           'statement. In particular, a "global" statement contained w a '
           'string\n'
           'or code object supplied to the built-in "exec()" function does '
           'not\n'
           'affect the code block *containing* the function call, oraz code\n'
           'contained w such a string jest unaffected by "global" statements '
           'in the\n'
           'code containing the function call.  The same applies to the '
           '"eval()"\n'
           'and "compile()" functions.\n',
 'id-classes': '\n'
               'Reserved classes of identifiers\n'
               '*******************************\n'
               '\n'
               'Certain classes of identifiers (besides keywords) have '
               'special\n'
               'meanings.  These classes are identified by the patterns of '
               'leading and\n'
               'trailing underscore characters:\n'
               '\n'
               '"_*"\n'
               '   Not imported by "z module zaimportuj *".  The special '
               'identifier "_"\n'
               '   jest used w the interactive interpreter to store the '
               'result of the\n'
               '   last evaluation; it jest stored w the "builtins" module.  '
               'When not\n'
               '   w interactive mode, "_" has no special meaning oraz jest '
               'not defined.\n'
               '   See section *The zaimportuj statement*.\n'
               '\n'
               '   Note: The name "_" jest often used w conjunction with\n'
               '     internationalization; refer to the documentation dla '
               'the\n'
               '     "gettext" module dla more information on this '
               'convention.\n'
               '\n'
               '"__*__"\n'
               '   System-defined names. These names are defined by the '
               'interpreter\n'
               '   oraz its implementation (including the standard library).  '
               'Current\n'
               '   system names are discussed w the *Special method names* '
               'section\n'
               '   oraz inaczejwhere.  More will likely be defined w future '
               'versions of\n'
               '   Python.  *Any* use of "__*__" names, w any context, that '
               'does not\n'
               '   follow explicitly documented use, jest subject to przerwijage '
               'without\n'
               '   warning.\n'
               '\n'
               '"__*"\n'
               '   Class-private names.  Names w this category, when used '
               'within the\n'
               '   context of a klasa definition, are re-written to use a '
               'mangled form\n'
               '   to help avoid name clashes between "private" attributes '
               'of base and\n'
               '   derived classes. See section *Identifiers (Names)*.\n',
 'identifiers': '\n'
                'Identifiers oraz keywords\n'
                '************************\n'
                '\n'
                'Identifiers (also referred to jako *names*) are described by '
                'the\n'
                'following lexical definitions.\n'
                '\n'
                'The syntax of identifiers w Python jest based on the Unicode '
                'standard\n'
                'annex UAX-31, przy elaboration oraz changes jako defined '
                'below; see also\n'
                '**PEP 3131** dla further details.\n'
                '\n'
                'Within the ASCII range (U+0001..U+007F), the valid '
                'characters for\n'
                'identifiers are the same jako w Python 2.x: the uppercase '
                'and lowercase\n'
                'letters "A" through "Z", the underscore "_" and, wyjąwszy dla '
                'the first\n'
                'character, the digits "0" through "9".\n'
                '\n'
                'Python 3.0 introduces additional characters z outside '
                'the ASCII\n'
                'range (see **PEP 3131**).  For these characters, the '
                'classification\n'
                'uses the version of the Unicode Character Database jako '
                'included w the\n'
                '"unicodedata" module.\n'
                '\n'
                'Identifiers are unlimited w length.  Case jest significant.\n'
                '\n'
                '   identifier   ::= xid_start xid_continue*\n'
                '   id_start     ::= <all characters w general categories '
                'Lu, Ll, Lt, Lm, Lo, Nl, the underscore, oraz characters przy '
                'the Other_ID_Start property>\n'
                '   id_continue  ::= <all characters w id_start, plus '
                'characters w the categories Mn, Mc, Nd, Pc oraz others przy '
                'the Other_ID_Continue property>\n'
                '   xid_start    ::= <all characters w id_start whose NFKC '
                'normalization jest w "id_start xid_continue*">\n'
                '   xid_continue ::= <all characters w id_continue whose '
                'NFKC normalization jest w "id_continue*">\n'
                '\n'
                'The Unicode category codes mentioned above stand for:\n'
                '\n'
                '* *Lu* - uppercase letters\n'
                '\n'
                '* *Ll* - lowercase letters\n'
                '\n'
                '* *Lt* - titlecase letters\n'
                '\n'
                '* *Lm* - modifier letters\n'
                '\n'
                '* *Lo* - other letters\n'
                '\n'
                '* *Nl* - letter numbers\n'
                '\n'
                '* *Mn* - nonspacing marks\n'
                '\n'
                '* *Mc* - spacing combining marks\n'
                '\n'
                '* *Nd* - decimal numbers\n'
                '\n'
                '* *Pc* - connector punctuations\n'
                '\n'
                '* *Other_ID_Start* - explicit list of characters w '
                'PropList.txt to\n'
                '  support backwards compatibility\n'
                '\n'
                '* *Other_ID_Continue* - likewise\n'
                '\n'
                'All identifiers are converted into the normal form NFKC '
                'dopóki parsing;\n'
                'comparison of identifiers jest based on NFKC.\n'
                '\n'
                'A non-normative HTML file listing all valid identifier '
                'characters for\n'
                'Unicode 4.1 can be found at http://www.dcl.hpi.uni-\n'
                'potsdam.de/home/loewis/table-3131.html.\n'
                '\n'
                '\n'
                'Keywords\n'
                '========\n'
                '\n'
                'The following identifiers are used jako reserved words, albo '
                '*keywords* of\n'
                'the language, oraz cannot be used jako ordinary identifiers.  '
                'They must\n'
                'be spelled exactly jako written here:\n'
                '\n'
                '   Nieprawda      klasa      finally    jest         return\n'
                '   Nic       continue   dla        lambda     try\n'
                '   Prawda       def        z       nonlocal   while\n'
                '   oraz        usuń        global     nie        with\n'
                '   jako         albo_inaczej       jeżeli         albo         uzyskaj\n'
                '   assert     inaczej       zaimportuj     dalej\n'
                '   przerwij      wyjąwszy     w         podnieś\n'
                '\n'
                '\n'
                'Reserved classes of identifiers\n'
                '===============================\n'
                '\n'
                'Certain classes of identifiers (besides keywords) have '
                'special\n'
                'meanings.  These classes are identified by the patterns of '
                'leading and\n'
                'trailing underscore characters:\n'
                '\n'
                '"_*"\n'
                '   Not imported by "z module zaimportuj *".  The special '
                'identifier "_"\n'
                '   jest used w the interactive interpreter to store the '
                'result of the\n'
                '   last evaluation; it jest stored w the "builtins" module.  '
                'When not\n'
                '   w interactive mode, "_" has no special meaning oraz jest '
                'not defined.\n'
                '   See section *The zaimportuj statement*.\n'
                '\n'
                '   Note: The name "_" jest often used w conjunction with\n'
                '     internationalization; refer to the documentation dla '
                'the\n'
                '     "gettext" module dla more information on this '
                'convention.\n'
                '\n'
                '"__*__"\n'
                '   System-defined names. These names are defined by the '
                'interpreter\n'
                '   oraz its implementation (including the standard '
                'library).  Current\n'
                '   system names are discussed w the *Special method names* '
                'section\n'
                '   oraz inaczejwhere.  More will likely be defined w future '
                'versions of\n'
                '   Python.  *Any* use of "__*__" names, w any context, '
                'that does not\n'
                '   follow explicitly documented use, jest subject to przerwijage '
                'without\n'
                '   warning.\n'
                '\n'
                '"__*"\n'
                '   Class-private names.  Names w this category, when used '
                'within the\n'
                '   context of a klasa definition, are re-written to use a '
                'mangled form\n'
                '   to help avoid name clashes between "private" attributes '
                'of base and\n'
                '   derived classes. See section *Identifiers (Names)*.\n',
 'if': '\n'
       'The "if" statement\n'
       '******************\n'
       '\n'
       'The "if" statement jest used dla conditional execution:\n'
       '\n'
       '   if_stmt ::= "if" expression ":" suite\n'
       '               ( "elif" expression ":" suite )*\n'
       '               ["inaczej" ":" suite]\n'
       '\n'
       'It selects exactly one of the suites by evaluating the expressions '
       'one\n'
       'by one until one jest found to be true (see section *Boolean '
       'operations*\n'
       'dla the definition of true oraz false); then that suite jest executed\n'
       '(and no other part of the "if" statement jest executed albo evaluated).\n'
       'If all expressions are false, the suite of the "inaczej" clause, if\n'
       'present, jest executed.\n',
 'imaginary': '\n'
              'Imaginary literals\n'
              '******************\n'
              '\n'
              'Imaginary literals are described by the following lexical '
              'definitions:\n'
              '\n'
              '   imagnumber ::= (floatnumber | intpart) ("j" | "J")\n'
              '\n'
              'An imaginary literal uzyskajs a complex number przy a real part '
              'of 0.0.\n'
              'Complex numbers are represented jako a pair of floating point '
              'numbers\n'
              'and have the same restrictions on their range.  To create a '
              'complex\n'
              'number przy a nonzero real part, add a floating point number '
              'to it,\n'
              'e.g., "(3+4j)".  Some examples of imaginary literals:\n'
              '\n'
              '   3.14j   10.j    10j     .001j   1e100j  3.14e-10j\n',
 'import': '\n'
           'The "import" statement\n'
           '**********************\n'
           '\n'
           '   import_stmt     ::= "import" module ["as" name] ( "," module '
           '["as" name] )*\n'
           '                   | "from" relative_module "import" identifier '
           '["as" name]\n'
           '                   ( "," identifier ["as" name] )*\n'
           '                   | "from" relative_module "import" "(" '
           'identifier ["as" name]\n'
           '                   ( "," identifier ["as" name] )* [","] ")"\n'
           '                   | "from" module "import" "*"\n'
           '   module          ::= (identifier ".")* identifier\n'
           '   relative_module ::= "."* module | "."+\n'
           '   name            ::= identifier\n'
           '\n'
           'The basic zaimportuj statement (no "from" clause) jest executed w '
           'two\n'
           'steps:\n'
           '\n'
           '1. find a module, loading oraz initializing it jeżeli necessary\n'
           '\n'
           '2. define a name albo names w the local namespace dla the scope\n'
           '   where the "import" statement occurs.\n'
           '\n'
           'When the statement contains multiple clauses (separated by '
           'commas) the\n'
           'two steps are carried out separately dla each clause, just jako '
           'though\n'
           'the clauses had been separated out into individiual zaimportuj '
           'statements.\n'
           '\n'
           'The details of the first step, finding oraz loading modules are\n'
           'described w greater detail w the section on the *zaimportuj '
           'system*,\n'
           'which also describes the various types of packages oraz modules '
           'that\n'
           'can be imported, jako well jako all the hooks that can be used to\n'
           'customize the zaimportuj system. Note that failures w this step '
           'may\n'
           'indicate either that the module could nie be located, *or* that '
           'an\n'
           'error occurred dopóki initializing the module, which includes '
           'execution\n'
           "of the module's code.\n"
           '\n'
           'If the requested module jest retrieved successfully, it will be '
           'made\n'
           'available w the local namespace w one of three ways:\n'
           '\n'
           '* If the module name jest followed by "as", then the name '
           'following\n'
           '  "as" jest bound directly to the imported module.\n'
           '\n'
           '* If no other name jest specified, oraz the module being imported '
           'is a\n'
           "  top level module, the module's name jest bound w the local "
           'namespace\n'
           '  jako a reference to the imported module\n'
           '\n'
           '* If the module being imported jest *not* a top level module, then '
           'the\n'
           '  name of the top level package that contains the module jest '
           'bound in\n'
           '  the local namespace jako a reference to the top level package. '
           'The\n'
           '  imported module must be accessed using its full qualified '
           'name\n'
           '  rather than directly\n'
           '\n'
           'The "from" form uses a slightly more complex process:\n'
           '\n'
           '1. find the module specified w the "from" clause, loading and\n'
           '   initializing it jeżeli necessary;\n'
           '\n'
           '2. dla each of the identifiers specified w the "import" '
           'clauses:\n'
           '\n'
           '   1. check jeżeli the imported module has an attribute by that '
           'name\n'
           '\n'
           '   2. jeżeli not, attempt to zaimportuj a submodule przy that name oraz '
           'then\n'
           '      check the imported module again dla that attribute\n'
           '\n'
           '   3. jeżeli the attribute jest nie found, "ImportError" jest podnieśd.\n'
           '\n'
           '   4. otherwise, a reference to that value jest stored w the '
           'local\n'
           '      namespace, using the name w the "as" clause jeżeli it jest '
           'present,\n'
           '      otherwise using the attribute name\n'
           '\n'
           'Examples:\n'
           '\n'
           '   zaimportuj foo                 # foo imported oraz bound locally\n'
           '   zaimportuj foo.bar.baz         # foo.bar.baz imported, foo bound '
           'locally\n'
           '   zaimportuj foo.bar.baz jako fbb  # foo.bar.baz imported oraz bound '
           'as fbb\n'
           '   z foo.bar zaimportuj baz    # foo.bar.baz imported oraz bound '
           'as baz\n'
           '   z foo zaimportuj attr       # foo imported oraz foo.attr bound '
           'as attr\n'
           '\n'
           'If the list of identifiers jest replaced by a star ("\'*\'"), all '
           'public\n'
           'names defined w the module are bound w the local namespace dla '
           'the\n'
           'scope where the "import" statement occurs.\n'
           '\n'
           'The *public names* defined by a module are determined by '
           'checking the\n'
           'module\'s namespace dla a variable named "__all__"; jeżeli defined, '
           'it must\n'
           'be a sequence of strings which are names defined albo imported by '
           'that\n'
           'module.  The names given w "__all__" are all considered public '
           'and\n'
           'are required to exist.  If "__all__" jest nie defined, the set of '
           'public\n'
           "names includes all names found w the module's namespace which "
           'do not\n'
           'begin przy an underscore character ("\'_\'").  "__all__" should '
           'contain\n'
           'the entire public API. It jest intended to avoid accidentally '
           'exporting\n'
           'items that are nie part of the API (such jako library modules '
           'which were\n'
           'imported oraz used within the module).\n'
           '\n'
           'The wild card form of zaimportuj --- "z module zaimportuj *" --- jest '
           'only\n'
           'allowed at the module level.  Attempting to use it w klasa or\n'
           'function definitions will podnieś a "SyntaxError".\n'
           '\n'
           'When specifying what module to zaimportuj you do nie have to specify '
           'the\n'
           'absolute name of the module. When a module albo package jest '
           'contained\n'
           'within another package it jest possible to make a relative zaimportuj '
           'within\n'
           'the same top package without having to mention the package name. '
           'By\n'
           'using leading dots w the specified module albo package after '
           '"from" you\n'
           'can specify how high to traverse up the current package '
           'hierarchy\n'
           'without specifying exact names. One leading dot means the '
           'current\n'
           'package where the module making the zaimportuj exists. Two dots '
           'means up\n'
           'one package level. Three dots jest up two levels, etc. So jeżeli you '
           'execute\n'
           '"z . zaimportuj mod" z a module w the "pkg" package then you '
           'will\n'
           'end up importing "pkg.mod". If you execute "z ..subpkg2 '
           'zaimportuj mod"\n'
           'z within "pkg.subpkg1" you will zaimportuj "pkg.subpkg2.mod". '
           'The\n'
           'specification dla relative imports jest contained within **PEP '
           '328**.\n'
           '\n'
           '"importlib.import_module()" jest provided to support applications '
           'that\n'
           'determine dynamically the modules to be loaded.\n'
           '\n'
           '\n'
           'Future statements\n'
           '=================\n'
           '\n'
           'A *future statement* jest a directive to the compiler that a '
           'particular\n'
           'module should be compiled using syntax albo semantics that will '
           'be\n'
           'available w a specified future release of Python where the '
           'feature\n'
           'becomes standard.\n'
           '\n'
           'The future statement jest intended to ease migration to future '
           'versions\n'
           'of Python that introduce incompatible changes to the language.  '
           'It\n'
           'allows use of the new features on a per-module basis before the\n'
           'release w which the feature becomes standard.\n'
           '\n'
           '   future_statement ::= "from" "__future__" "import" feature '
           '["as" name]\n'
           '                        ("," feature ["as" name])*\n'
           '                        | "from" "__future__" "import" "(" '
           'feature ["as" name]\n'
           '                        ("," feature ["as" name])* [","] ")"\n'
           '   feature          ::= identifier\n'
           '   name             ::= identifier\n'
           '\n'
           'A future statement must appear near the top of the module.  The '
           'only\n'
           'lines that can appear before a future statement are:\n'
           '\n'
           '* the module docstring (jeżeli any),\n'
           '\n'
           '* comments,\n'
           '\n'
           '* blank lines, and\n'
           '\n'
           '* other future statements.\n'
           '\n'
           'The features recognized by Python 3.0 are "absolute_import",\n'
           '"division", "generators", "unicode_literals", "print_function",\n'
           '"nested_scopes" oraz "with_statement".  They are all redundant '
           'because\n'
           'they are always enabled, oraz only kept dla backwards '
           'compatibility.\n'
           '\n'
           'A future statement jest recognized oraz treated specially at '
           'compile\n'
           'time: Changes to the semantics of core constructs are often\n'
           'implemented by generating different code.  It may even be the '
           'case\n'
           'that a new feature introduces new incompatible syntax (such jako a '
           'new\n'
           'reserved word), w which case the compiler may need to parse '
           'the\n'
           'module differently.  Such decisions cannot be pushed off until\n'
           'runtime.\n'
           '\n'
           'For any given release, the compiler knows which feature names '
           'have\n'
           'been defined, oraz podnieśs a compile-time error jeżeli a future '
           'statement\n'
           'contains a feature nie known to it.\n'
           '\n'
           'The direct runtime semantics are the same jako dla any zaimportuj '
           'statement:\n'
           'there jest a standard module "__future__", described later, oraz it '
           'will\n'
           'be imported w the usual way at the time the future statement '
           'is\n'
           'executed.\n'
           '\n'
           'The interesting runtime semantics depend on the specific '
           'feature\n'
           'enabled by the future statement.\n'
           '\n'
           'Note that there jest nothing special about the statement:\n'
           '\n'
           '   zaimportuj __future__ [as name]\n'
           '\n'
           "That jest nie a future statement; it's an ordinary zaimportuj "
           'statement with\n'
           'no special semantics albo syntax restrictions.\n'
           '\n'
           'Code compiled by calls to the built-in functions "exec()" and\n'
           '"compile()" that occur w a module "M" containing a future '
           'statement\n'
           'will, by default, use the new syntax albo semantics associated '
           'przy the\n'
           'future statement.  This can be controlled by optional arguments '
           'to\n'
           '"compile()" --- see the documentation of that function dla '
           'details.\n'
           '\n'
           'A future statement typed at an interactive interpreter prompt '
           'will\n'
           'take effect dla the rest of the interpreter session.  If an\n'
           'interpreter jest started przy the *-i* option, jest dalejed a script '
           'name\n'
           'to execute, oraz the script includes a future statement, it will '
           'be in\n'
           'effect w the interactive session started after the script is\n'
           'executed.\n'
           '\n'
           'See also: **PEP 236** - Back to the __future__\n'
           '\n'
           '     The original proposal dla the __future__ mechanism.\n',
 'in': '\n'
       'Comparisons\n'
       '***********\n'
       '\n'
       'Unlike C, all comparison operations w Python have the same '
       'priority,\n'
       'which jest lower than that of any arithmetic, shifting albo bitwise\n'
       'operation.  Also unlike C, expressions like "a < b < c" have the\n'
       'interpretation that jest conventional w mathematics:\n'
       '\n'
       '   comparison    ::= or_expr ( comp_operator or_expr )*\n'
       '   comp_operator ::= "<" | ">" | "==" | ">=" | "<=" | "!="\n'
       '                     | "is" ["not"] | ["not"] "in"\n'
       '\n'
       'Comparisons uzyskaj boolean values: "Prawda" albo "Nieprawda".\n'
       '\n'
       'Comparisons can be chained arbitrarily, e.g., "x < y <= z" is\n'
       'equivalent to "x < y oraz y <= z", wyjąwszy that "y" jest evaluated only\n'
       'once (but w both cases "z" jest nie evaluated at all when "x < y" is\n'
       'found to be false).\n'
       '\n'
       'Formally, jeżeli *a*, *b*, *c*, ..., *y*, *z* are expressions oraz '
       '*op1*,\n'
       '*op2*, ..., *opN* are comparison operators, then "a op1 b op2 c ... '
       'y\n'
       'opN z" jest equivalent to "a op1 b oraz b op2 c oraz ... y opN z", '
       'except\n'
       'that each expression jest evaluated at most once.\n'
       '\n'
       'Note that "a op1 b op2 c" doesn\'t imply any kind of comparison '
       'between\n'
       '*a* oraz *c*, so that, e.g., "x < y > z" jest perfectly legal (though\n'
       'perhaps nie pretty).\n'
       '\n'
       'The operators "<", ">", "==", ">=", "<=", oraz "!=" compare the '
       'values\n'
       'of two objects.  The objects need nie have the same type. If both '
       'are\n'
       'numbers, they are converted to a common type.  Otherwise, the "==" '
       'and\n'
       '"!=" operators *always* consider objects of different types to be\n'
       'unequal, dopóki the "<", ">", ">=" oraz "<=" operators podnieś a\n'
       '"TypeError" when comparing objects of different types that do not\n'
       'implement these operators dla the given pair of types.  You can\n'
       'control comparison behavior of objects of non-built-in types by\n'
       'defining rich comparison methods like "__gt__()", described w '
       'section\n'
       '*Basic customization*.\n'
       '\n'
       'Comparison of objects of the same type depends on the type:\n'
       '\n'
       '* Numbers are compared arithmetically.\n'
       '\n'
       '* The values "float(\'NaN\')" oraz "Decimal(\'NaN\')" are special. '
       'They\n'
       '  are identical to themselves, "x jest x" but are nie equal to\n'
       '  themselves, "x != x".  Additionally, comparing any value to a\n'
       '  not-a-number value will zwróć "Nieprawda".  For example, both "3 <\n'
       '  float(\'NaN\')" oraz "float(\'NaN\') < 3" will zwróć "Nieprawda".\n'
       '\n'
       '* Bytes objects are compared lexicographically using the numeric\n'
       '  values of their elements.\n'
       '\n'
       '* Strings are compared lexicographically using the numeric\n'
       '  equivalents (the result of the built-in function "ord()") of '
       'their\n'
       "  characters. [3] String oraz bytes object can't be compared!\n"
       '\n'
       '* Tuples oraz lists are compared lexicographically using comparison\n'
       '  of corresponding elements.  This means that to compare equal, '
       'each\n'
       '  element must compare equal oraz the two sequences must be of the '
       'same\n'
       '  type oraz have the same length.\n'
       '\n'
       '  If nie equal, the sequences are ordered the same jako their first\n'
       '  differing elements.  For example, "[1,2,x] <= [1,2,y]" has the '
       'same\n'
       '  value jako "x <= y".  If the corresponding element does nie exist, '
       'the\n'
       '  shorter sequence jest ordered first (dla example, "[1,2] < '
       '[1,2,3]").\n'
       '\n'
       '* Mappings (dictionaries) compare equal jeżeli oraz only jeżeli they have '
       'the\n'
       '  same "(key, value)" pairs. Order comparisons "(\'<\', \'<=\', '
       "'>=',\n"
       '  \'>\')" podnieś "TypeError".\n'
       '\n'
       '* Sets oraz frozensets define comparison operators to mean subset '
       'and\n'
       '  superset tests.  Those relations do nie define total orderings '
       '(the\n'
       '  two sets "{1,2}" oraz "{2,3}" are nie equal, nor subsets of one\n'
       '  another, nor supersets of one another).  Accordingly, sets are '
       'not\n'
       '  appropriate arguments dla functions which depend on total '
       'ordering.\n'
       '  For example, "min()", "max()", oraz "sorted()" produce undefined\n'
       '  results given a list of sets jako inputs.\n'
       '\n'
       '* Most other objects of built-in types compare unequal unless they\n'
       '  are the same object; the choice whether one object jest considered\n'
       '  smaller albo larger than another one jest made arbitrarily but\n'
       '  consistently within one execution of a program.\n'
       '\n'
       'Comparison of objects of differing types depends on whether either '
       'of\n'
       'the types provide explicit support dla the comparison.  Most '
       'numeric\n'
       'types can be compared przy one another.  When cross-type comparison '
       'is\n'
       'not supported, the comparison method returns "NotImplemented".\n'
       '\n'
       'The operators "in" oraz "not in" test dla membership.  "x w s"\n'
       'evaluates to true jeżeli *x* jest a member of *s*, oraz false otherwise.  '
       '"x\n'
       'not w s" returns the negation of "x w s".  All built-in sequences\n'
       'and set types support this jako well jako dictionary, dla which "in" '
       'tests\n'
       'whether the dictionary has a given key. For container types such as\n'
       'list, tuple, set, frozenset, dict, albo collections.deque, the\n'
       'expression "x w y" jest equivalent to "any(x jest e albo x == e dla e in\n'
       'y)".\n'
       '\n'
       'For the string oraz bytes types, "x w y" jest true jeżeli oraz only jeżeli *x* '
       'is\n'
       'a substring of *y*.  An equivalent test jest "y.find(x) != -1".  '
       'Empty\n'
       'strings are always considered to be a substring of any other '
       'string,\n'
       'so """ w "abc"" will zwróć "Prawda".\n'
       '\n'
       'For user-defined classes which define the "__contains__()" method, '
       '"x\n'
       'in y" jest true jeżeli oraz only jeżeli "y.__contains__(x)" jest true.\n'
       '\n'
       'For user-defined classes which do nie define "__contains__()" but '
       'do\n'
       'define "__iter__()", "x w y" jest true jeżeli some value "z" przy "x == '
       'z"\n'
       'is produced dopóki iterating over "y".  If an exception jest podnieśd\n'
       'during the iteration, it jest jako jeżeli "in" podnieśd that exception.\n'
       '\n'
       'Lastly, the old-style iteration protocol jest tried: jeżeli a klasa '
       'defines\n'
       '"__getitem__()", "x w y" jest true jeżeli oraz only jeżeli there jest a non-\n'
       'negative integer index *i* such that "x == y[i]", oraz all lower\n'
       'integer indices do nie podnieś "IndexError" exception.  (If any other\n'
       'exception jest podnieśd, it jest jako jeżeli "in" podnieśd that exception).\n'
       '\n'
       'The operator "not in" jest defined to have the inverse true value of\n'
       '"in".\n'
       '\n'
       'The operators "is" oraz "is not" test dla object identity: "x jest y" '
       'is\n'
       'true jeżeli oraz only jeżeli *x* oraz *y* are the same object.  "x jest nie y"\n'
       'uzyskajs the inverse truth value. [4]\n',
 'integers': '\n'
             'Integer literals\n'
             '****************\n'
             '\n'
             'Integer literals are described by the following lexical '
             'definitions:\n'
             '\n'
             '   integer        ::= decimalinteger | octinteger | hexinteger '
             '| bininteger\n'
             '   decimalinteger ::= nonzerodigit digit* | "0"+\n'
             '   nonzerodigit   ::= "1"..."9"\n'
             '   digit          ::= "0"..."9"\n'
             '   octinteger     ::= "0" ("o" | "O") octdigit+\n'
             '   hexinteger     ::= "0" ("x" | "X") hexdigit+\n'
             '   bininteger     ::= "0" ("b" | "B") bindigit+\n'
             '   octdigit       ::= "0"..."7"\n'
             '   hexdigit       ::= digit | "a"..."f" | "A"..."F"\n'
             '   bindigit       ::= "0" | "1"\n'
             '\n'
             'There jest no limit dla the length of integer literals apart '
             'z what\n'
             'can be stored w available memory.\n'
             '\n'
             'Note that leading zeros w a non-zero decimal number are nie '
             'allowed.\n'
             'This jest dla disambiguation przy C-style octal literals, which '
             'Python\n'
             'used before version 3.0.\n'
             '\n'
             'Some examples of integer literals:\n'
             '\n'
             '   7     2147483647                        0o177    '
             '0b100110111\n'
             '   3     79228162514264337593543950336     0o377    '
             '0xdeadbeef\n',
 'lambda': '\n'
           'Lambdas\n'
           '*******\n'
           '\n'
           '   lambda_expr        ::= "lambda" [parameter_list]: expression\n'
           '   lambda_expr_nocond ::= "lambda" [parameter_list]: '
           'expression_nocond\n'
           '\n'
           'Lambda expressions (sometimes called lambda forms) are used to '
           'create\n'
           'anonymous functions. The expression "lambda arguments: '
           'expression"\n'
           'uzyskajs a function object.  The unnamed object behaves like a '
           'function\n'
           'object defined with\n'
           '\n'
           '   def <lambda>(arguments):\n'
           '       zwróć expression\n'
           '\n'
           'See section *Function definitions* dla the syntax of parameter '
           'lists.\n'
           'Note that functions created przy lambda expressions cannot '
           'contain\n'
           'statements albo annotations.\n',
 'lists': '\n'
          'List displays\n'
          '*************\n'
          '\n'
          'A list display jest a possibly empty series of expressions enclosed '
          'in\n'
          'square brackets:\n'
          '\n'
          '   list_display ::= "[" [expression_list | comprehension] "]"\n'
          '\n'
          'A list display uzyskajs a new list object, the contents being '
          'specified\n'
          'by either a list of expressions albo a comprehension.  When a '
          'comma-\n'
          'separated list of expressions jest supplied, its elements are '
          'evaluated\n'
          'z left to right oraz placed into the list object w that '
          'order.\n'
          'When a comprehension jest supplied, the list jest constructed z '
          'the\n'
          'elements resulting z the comprehension.\n',
 'naming': '\n'
           'Naming oraz binding\n'
           '******************\n'
           '\n'
           '\n'
           'Binding of names\n'
           '================\n'
           '\n'
           '*Names* refer to objects.  Names are introduced by name binding\n'
           'operations.\n'
           '\n'
           'The following constructs bind names: formal parameters to '
           'functions,\n'
           '"import" statements, klasa oraz function definitions (these bind '
           'the\n'
           'class albo function name w the defining block), oraz targets that '
           'are\n'
           'identifiers jeżeli occurring w an assignment, "for" loop header, albo '
           'after\n'
           '"as" w a "with" statement albo "except" clause. The "import" '
           'statement\n'
           'of the form "z ... zaimportuj *" binds all names defined w the\n'
           'imported module, wyjąwszy those beginning przy an underscore.  '
           'This form\n'
           'may only be used at the module level.\n'
           '\n'
           'A target occurring w a "del" statement jest also considered bound '
           'for\n'
           'this purpose (though the actual semantics are to unbind the '
           'name).\n'
           '\n'
           'Each assignment albo zaimportuj statement occurs within a block '
           'defined by a\n'
           'class albo function definition albo at the module level (the '
           'top-level\n'
           'code block).\n'
           '\n'
           'If a name jest bound w a block, it jest a local variable of that '
           'block,\n'
           'unless declared jako "nonlocal" albo "global".  If a name jest bound '
           'at the\n'
           'module level, it jest a global variable.  (The variables of the '
           'module\n'
           'code block are local oraz global.)  If a variable jest used w a '
           'code\n'
           'block but nie defined there, it jest a *free variable*.\n'
           '\n'
           'Each occurrence of a name w the program text refers to the '
           '*binding*\n'
           'of that name established by the following name resolution '
           'rules.\n'
           '\n'
           '\n'
           'Resolution of names\n'
           '===================\n'
           '\n'
           'A *scope* defines the visibility of a name within a block.  If a '
           'local\n'
           'variable jest defined w a block, its scope includes that block.  '
           'If the\n'
           'definition occurs w a function block, the scope extends to any '
           'blocks\n'
           'contained within the defining one, unless a contained block '
           'introduces\n'
           'a different binding dla the name.\n'
           '\n'
           'When a name jest used w a code block, it jest resolved using the '
           'nearest\n'
           'enclosing scope.  The set of all such scopes visible to a code '
           'block\n'
           "is called the block's *environment*.\n"
           '\n'
           'When a name jest nie found at all, a "NameError" exception jest '
           'raised. If\n'
           'the current scope jest a function scope, oraz the name refers to a '
           'local\n'
           'variable that has nie yet been bound to a value at the point '
           'where the\n'
           'name jest used, an "UnboundLocalError" exception jest podnieśd.\n'
           '"UnboundLocalError" jest a subclass of "NameError".\n'
           '\n'
           'If a name binding operation occurs anywhere within a code block, '
           'all\n'
           'uses of the name within the block are treated jako references to '
           'the\n'
           'current block.  This can lead to errors when a name jest used '
           'within a\n'
           'block before it jest bound.  This rule jest subtle.  Python lacks\n'
           'declarations oraz allows name binding operations to occur '
           'anywhere\n'
           'within a code block.  The local variables of a code block can '
           'be\n'
           'determined by scanning the entire text of the block dla name '
           'binding\n'
           'operations.\n'
           '\n'
           'If the "global" statement occurs within a block, all uses of the '
           'name\n'
           'specified w the statement refer to the binding of that name w '
           'the\n'
           'top-level namespace.  Names are resolved w the top-level '
           'namespace by\n'
           'searching the global namespace, i.e. the namespace of the '
           'module\n'
           'containing the code block, oraz the builtins namespace, the '
           'namespace\n'
           'of the module "builtins".  The global namespace jest searched '
           'first.  If\n'
           'the name jest nie found there, the builtins namespace jest '
           'searched.  The\n'
           '"global" statement must precede all uses of the name.\n'
           '\n'
           'The "global" statement has the same scope jako a name binding '
           'operation\n'
           'in the same block.  If the nearest enclosing scope dla a free '
           'variable\n'
           'contains a global statement, the free variable jest treated jako a '
           'global.\n'
           '\n'
           'The "nonlocal" statement causes corresponding names to refer to\n'
           'previously bound variables w the nearest enclosing function '
           'scope.\n'
           '"SyntaxError" jest podnieśd at compile time jeżeli the given name does '
           'not\n'
           'exist w any enclosing function scope.\n'
           '\n'
           'The namespace dla a module jest automatically created the first '
           'time a\n'
           'module jest imported.  The main module dla a script jest always '
           'called\n'
           '"__main__".\n'
           '\n'
           'Class definition blocks oraz arguments to "exec()" oraz "eval()" '
           'are\n'
           'special w the context of name resolution. A klasa definition jest '
           'an\n'
           'executable statement that may use oraz define names. These '
           'references\n'
           'follow the normal rules dla name resolution przy an exception '
           'that\n'
           'unbound local variables are looked up w the global namespace. '
           'The\n'
           'namespace of the klasa definition becomes the attribute '
           'dictionary of\n'
           'the class. The scope of names defined w a klasa block jest '
           'limited to\n'
           'the klasa block; it does nie extend to the code blocks of '
           'methods --\n'
           'this includes comprehensions oraz generator expressions since '
           'they are\n'
           'implemented using a function scope.  This means that the '
           'following\n'
           'will fail:\n'
           '\n'
           '   klasa A:\n'
           '       a = 42\n'
           '       b = list(a + i dla i w range(10))\n'
           '\n'
           '\n'
           'Builtins oraz restricted execution\n'
           '=================================\n'
           '\n'
           'The builtins namespace associated przy the execution of a code '
           'block\n'
           'is actually found by looking up the name "__builtins__" w its '
           'global\n'
           'namespace; this should be a dictionary albo a module (in the '
           'latter case\n'
           "the module's dictionary jest used).  By default, when w the "
           '"__main__"\n'
           'module, "__builtins__" jest the built-in module "builtins"; when '
           'in any\n'
           'other module, "__builtins__" jest an alias dla the dictionary of '
           'the\n'
           '"builtins" module itself.  "__builtins__" can be set to a '
           'user-created\n'
           'dictionary to create a weak form of restricted execution.\n'
           '\n'
           '**CPython implementation detail:** Users should nie touch\n'
           '"__builtins__"; it jest strictly an implementation detail.  Users\n'
           'wanting to override values w the builtins namespace should '
           '"import"\n'
           'the "builtins" module oraz modify its attributes appropriately.\n'
           '\n'
           '\n'
           'Interaction przy dynamic features\n'
           '=================================\n'
           '\n'
           'Name resolution of free variables occurs at runtime, nie at '
           'compile\n'
           'time. This means that the following code will print 42:\n'
           '\n'
           '   i = 10\n'
           '   def f():\n'
           '       print(i)\n'
           '   i = 42\n'
           '   f()\n'
           '\n'
           'There are several cases where Python statements are illegal when '
           'used\n'
           'in conjunction przy nested scopes that contain free variables.\n'
           '\n'
           'If a variable jest referenced w an enclosing scope, it jest illegal '
           'to\n'
           'delete the name.  An error will be reported at compile time.\n'
           '\n'
           'The "eval()" oraz "exec()" functions do nie have access to the '
           'full\n'
           'environment dla resolving names.  Names may be resolved w the '
           'local\n'
           'and global namespaces of the caller.  Free variables are nie '
           'resolved\n'
           'in the nearest enclosing namespace, but w the global '
           'namespace.  [1]\n'
           'The "exec()" oraz "eval()" functions have optional arguments to\n'
           'override the global oraz local namespace.  If only one namespace '
           'is\n'
           'specified, it jest used dla both.\n',
 'nonlocal': '\n'
             'The "nonlocal" statement\n'
             '************************\n'
             '\n'
             '   nonlocal_stmt ::= "nonlocal" identifier ("," identifier)*\n'
             '\n'
             'The "nonlocal" statement causes the listed identifiers to '
             'refer to\n'
             'previously bound variables w the nearest enclosing scope '
             'excluding\n'
             'globals. This jest important because the default behavior dla '
             'binding is\n'
             'to search the local namespace first.  The statement allows\n'
             'encapsulated code to rebind variables outside of the local '
             'scope\n'
             'besides the global (module) scope.\n'
             '\n'
             'Names listed w a "nonlocal" statement, unlike those listed w '
             'a\n'
             '"global" statement, must refer to pre-existing bindings w an\n'
             'enclosing scope (the scope w which a new binding should be '
             'created\n'
             'cannot be determined unambiguously).\n'
             '\n'
             'Names listed w a "nonlocal" statement must nie collide przy '
             'pre-\n'
             'existing bindings w the local scope.\n'
             '\n'
             'See also: **PEP 3104** - Access to Names w Outer Scopes\n'
             '\n'
             '     The specification dla the "nonlocal" statement.\n',
 'numbers': '\n'
            'Numeric literals\n'
            '****************\n'
            '\n'
            'There are three types of numeric literals: integers, floating '
            'point\n'
            'numbers, oraz imaginary numbers.  There are no complex literals\n'
            '(complex numbers can be formed by adding a real number oraz an\n'
            'imaginary number).\n'
            '\n'
            'Note that numeric literals do nie include a sign; a phrase like '
            '"-1"\n'
            'is actually an expression composed of the unary operator '
            '\'"-"\' oraz the\n'
            'literal "1".\n',
 'numeric-types': '\n'
                  'Emulating numeric types\n'
                  '***********************\n'
                  '\n'
                  'The following methods can be defined to emulate numeric '
                  'objects.\n'
                  'Methods corresponding to operations that are nie '
                  'supported by the\n'
                  'particular kind of number implemented (e.g., bitwise '
                  'operations for\n'
                  'non-integral numbers) should be left undefined.\n'
                  '\n'
                  'object.__add__(self, other)\n'
                  'object.__sub__(self, other)\n'
                  'object.__mul__(self, other)\n'
                  'object.__matmul__(self, other)\n'
                  'object.__truediv__(self, other)\n'
                  'object.__floordiv__(self, other)\n'
                  'object.__mod__(self, other)\n'
                  'object.__divmod__(self, other)\n'
                  'object.__pow__(self, other[, modulo])\n'
                  'object.__lshift__(self, other)\n'
                  'object.__rshift__(self, other)\n'
                  'object.__and__(self, other)\n'
                  'object.__xor__(self, other)\n'
                  'object.__or__(self, other)\n'
                  '\n'
                  '   These methods are called to implement the binary '
                  'arithmetic\n'
                  '   operations ("+", "-", "*", "@", "/", "//", "%", '
                  '"divmod()",\n'
                  '   "pow()", "**", "<<", ">>", "&", "^", "|").  For '
                  'instance, to\n'
                  '   evaluate the expression "x + y", where *x* jest an '
                  'instance of a\n'
                  '   klasa that has an "__add__()" method, "x.__add__(y)" '
                  'is called.\n'
                  '   The "__divmod__()" method should be the equivalent to '
                  'using\n'
                  '   "__floordiv__()" oraz "__mod__()"; it should nie be '
                  'related to\n'
                  '   "__truediv__()".  Note that "__pow__()" should be '
                  'defined to accept\n'
                  '   an optional third argument jeżeli the ternary version of '
                  'the built-in\n'
                  '   "pow()" function jest to be supported.\n'
                  '\n'
                  '   If one of those methods does nie support the operation '
                  'przy the\n'
                  '   supplied arguments, it should zwróć '
                  '"NotImplemented".\n'
                  '\n'
                  'object.__radd__(self, other)\n'
                  'object.__rsub__(self, other)\n'
                  'object.__rmul__(self, other)\n'
                  'object.__rmatmul__(self, other)\n'
                  'object.__rtruediv__(self, other)\n'
                  'object.__rfloordiv__(self, other)\n'
                  'object.__rmod__(self, other)\n'
                  'object.__rdivmod__(self, other)\n'
                  'object.__rpow__(self, other)\n'
                  'object.__rlshift__(self, other)\n'
                  'object.__rrshift__(self, other)\n'
                  'object.__rand__(self, other)\n'
                  'object.__rxor__(self, other)\n'
                  'object.__ror__(self, other)\n'
                  '\n'
                  '   These methods are called to implement the binary '
                  'arithmetic\n'
                  '   operations ("+", "-", "*", "@", "/", "//", "%", '
                  '"divmod()",\n'
                  '   "pow()", "**", "<<", ">>", "&", "^", "|") przy '
                  'reflected (swapped)\n'
                  '   operands.  These functions are only called jeżeli the left '
                  'operand does\n'
                  '   nie support the corresponding operation oraz the '
                  'operands are of\n'
                  '   different types. [2] For instance, to evaluate the '
                  'expression "x -\n'
                  '   y", where *y* jest an instance of a klasa that has an '
                  '"__rsub__()"\n'
                  '   method, "y.__rsub__(x)" jest called jeżeli "x.__sub__(y)" '
                  'returns\n'
                  '   *NotImplemented*.\n'
                  '\n'
                  '   Note that ternary "pow()" will nie try calling '
                  '"__rpow__()" (the\n'
                  '   coercion rules would become too complicated).\n'
                  '\n'
                  "   Note: If the right operand's type jest a subclass of the "
                  'left\n'
                  "     operand's type oraz that subclass provides the "
                  'reflected method\n'
                  '     dla the operation, this method will be called before '
                  'the left\n'
                  "     operand's non-reflected method.  This behavior "
                  'allows subclasses\n'
                  "     to override their ancestors' operations.\n"
                  '\n'
                  'object.__iadd__(self, other)\n'
                  'object.__isub__(self, other)\n'
                  'object.__imul__(self, other)\n'
                  'object.__imatmul__(self, other)\n'
                  'object.__itruediv__(self, other)\n'
                  'object.__ifloordiv__(self, other)\n'
                  'object.__imod__(self, other)\n'
                  'object.__ipow__(self, other[, modulo])\n'
                  'object.__ilshift__(self, other)\n'
                  'object.__irshift__(self, other)\n'
                  'object.__iand__(self, other)\n'
                  'object.__ixor__(self, other)\n'
                  'object.__ior__(self, other)\n'
                  '\n'
                  '   These methods are called to implement the augmented '
                  'arithmetic\n'
                  '   assignments ("+=", "-=", "*=", "@=", "/=", "//=", '
                  '"%=", "**=",\n'
                  '   "<<=", ">>=", "&=", "^=", "|=").  These methods should '
                  'attempt to\n'
                  '   do the operation in-place (modifying *self*) oraz '
                  'return the result\n'
                  '   (which could be, but does nie have to be, *self*).  If '
                  'a specific\n'
                  '   method jest nie defined, the augmented assignment falls '
                  'back to the\n'
                  '   normal methods.  For instance, jeżeli *x* jest an instance '
                  'of a class\n'
                  '   przy an "__iadd__()" method, "x += y" jest equivalent to '
                  '"x =\n'
                  '   x.__iadd__(y)" . Otherwise, "x.__add__(y)" oraz '
                  '"y.__radd__(x)" are\n'
                  '   considered, jako przy the evaluation of "x + y". In '
                  'certain\n'
                  '   situations, augmented assignment can result w '
                  'unexpected errors\n'
                  "   (see *Why does a_tuple[i] += ['item'] podnieś an "
                  'exception when the\n'
                  '   addition works?*), but this behavior jest w fact part '
                  'of the data\n'
                  '   model.\n'
                  '\n'
                  'object.__neg__(self)\n'
                  'object.__pos__(self)\n'
                  'object.__abs__(self)\n'
                  'object.__invert__(self)\n'
                  '\n'
                  '   Called to implement the unary arithmetic operations '
                  '("-", "+",\n'
                  '   "abs()" oraz "~").\n'
                  '\n'
                  'object.__complex__(self)\n'
                  'object.__int__(self)\n'
                  'object.__float__(self)\n'
                  'object.__round__(self[, n])\n'
                  '\n'
                  '   Called to implement the built-in functions '
                  '"complex()", "int()",\n'
                  '   "float()" oraz "round()".  Should zwróć a value of the '
                  'appropriate\n'
                  '   type.\n'
                  '\n'
                  'object.__index__(self)\n'
                  '\n'
                  '   Called to implement "operator.index()", oraz whenever '
                  'Python needs\n'
                  '   to losslessly convert the numeric object to an integer '
                  'object (such\n'
                  '   jako w slicing, albo w the built-in "bin()", "hex()" oraz '
                  '"oct()"\n'
                  '   functions). Presence of this method indicates that the '
                  'numeric\n'
                  '   object jest an integer type.  Must zwróć an integer.\n'
                  '\n'
                  '   Note: In order to have a coherent integer type class, '
                  'when\n'
                  '     "__index__()" jest defined "__int__()" should also be '
                  'defined, and\n'
                  '     both should zwróć the same value.\n',
 'objects': '\n'
            'Objects, values oraz types\n'
            '*************************\n'
            '\n'
            "*Objects* are Python's abstraction dla data.  All data w a "
            'Python\n'
            'program jest represented by objects albo by relations between '
            'objects. (In\n'
            "a sense, oraz w conformance to Von Neumann's mousuń of a "
            '"stored\n'
            'program computer," code jest also represented by objects.)\n'
            '\n'
            "Every object has an identity, a type oraz a value.  An object's\n"
            '*identity* never changes once it has been created; you may '
            'think of it\n'
            'as the object\'s address w memory.  The \'"is"\' operator '
            'compares the\n'
            'identity of two objects; the "id()" function returns an '
            'integer\n'
            'representing its identity.\n'
            '\n'
            '**CPython implementation detail:** For CPython, "id(x)" jest the '
            'memory\n'
            'address where "x" jest stored.\n'
            '\n'
            "An object's type determines the operations that the object "
            'supports\n'
            '(e.g., "does it have a length?") oraz also defines the possible '
            'values\n'
            'dla objects of that type.  The "type()" function returns an '
            "object's\n"
            'type (which jest an object itself).  Like its identity, an '
            "object's\n"
            '*type* jest also unchangeable. [1]\n'
            '\n'
            'The *value* of some objects can change.  Objects whose value '
            'can\n'
            'change are said to be *mutable*; objects whose value jest '
            'unchangeable\n'
            'once they are created are called *immutable*. (The value of an\n'
            'immutable container object that contains a reference to a '
            'mutable\n'
            "object can change when the latter's value jest changed; however "
            'the\n'
            'container jest still considered immutable, because the collection '
            'of\n'
            'objects it contains cannot be changed.  So, immutability jest '
            'not\n'
            'strictly the same jako having an unchangeable value, it jest more '
            'subtle.)\n'
            "An object's mutability jest determined by its type; dla "
            'instance,\n'
            'numbers, strings oraz tuples are immutable, dopóki dictionaries '
            'and\n'
            'lists are mutable.\n'
            '\n'
            'Objects are never explicitly destroyed; however, when they '
            'become\n'
            'unreachable they may be garbage-collected.  An implementation '
            'is\n'
            'allowed to postpone garbage collection albo omit it altogether '
            '--- it is\n'
            'a matter of implementation quality how garbage collection is\n'
            'implemented, jako long jako no objects are collected that are '
            'still\n'
            'reachable.\n'
            '\n'
            '**CPython implementation detail:** CPython currently uses a '
            'reference-\n'
            'counting scheme przy (optional) delayed detection of cyclically '
            'linked\n'
            'garbage, which collects most objects jako soon jako they become\n'
            'unreachable, but jest nie guaranteed to collect garbage '
            'containing\n'
            'circular references.  See the documentation of the "gc" module '
            'for\n'
            'information on controlling the collection of cyclic garbage. '
            'Other\n'
            'implementations act differently oraz CPython may change. Do nie '
            'depend\n'
            'on immediate finalization of objects when they become '
            'unreachable (so\n'
            'you should always close files explicitly).\n'
            '\n'
            "Note that the use of the implementation's tracing albo debugging\n"
            'facilities may keep objects alive that would normally be '
            'collectable.\n'
            'Also note that catching an exception przy a '
            '\'"try"..."except"\'\n'
            'statement may keep objects alive.\n'
            '\n'
            'Some objects contain references to "external" resources such jako '
            'open\n'
            'files albo windows.  It jest understood that these resources are '
            'freed\n'
            'when the object jest garbage-collected, but since garbage '
            'collection is\n'
            'not guaranteed to happen, such objects also provide an explicit '
            'way to\n'
            'release the external resource, usually a "close()" method. '
            'Programs\n'
            'are strongly recommended to explicitly close such objects.  '
            'The\n'
            '\'"try"..."finally"\' statement oraz the \'"with"\' statement '
            'provide\n'
            'convenient ways to do this.\n'
            '\n'
            'Some objects contain references to other objects; these are '
            'called\n'
            '*containers*. Examples of containers are tuples, lists and\n'
            "dictionaries.  The references are part of a container's value.  "
            'In\n'
            'most cases, when we talk about the value of a container, we '
            'imply the\n'
            'values, nie the identities of the contained objects; however, '
            'when we\n'
            'talk about the mutability of a container, only the identities '
            'of the\n'
            'immediately contained objects are implied.  So, jeżeli an '
            'immutable\n'
            'container (like a tuple) contains a reference to a mutable '
            'object, its\n'
            'value changes jeżeli that mutable object jest changed.\n'
            '\n'
            'Types affect almost all aspects of object behavior.  Even the\n'
            'importance of object identity jest affected w some sense: dla '
            'immutable\n'
            'types, operations that compute new values may actually zwróć '
            'a\n'
            'reference to any existing object przy the same type oraz value, '
            'while\n'
            'dla mutable objects this jest nie allowed.  E.g., after "a = 1; b '
            '= 1",\n'
            '"a" oraz "b" may albo may nie refer to the same object przy the '
            'value\n'
            'one, depending on the implementation, but after "c = []; d = '
            '[]", "c"\n'
            'and "d" are guaranteed to refer to two different, unique, '
            'newly\n'
            'created empty lists. (Note that "c = d = []" assigns the same '
            'object\n'
            'to both "c" oraz "d".)\n',
 'operator-summary': '\n'
                     'Operator precedence\n'
                     '*******************\n'
                     '\n'
                     'The following table summarizes the operator precedence '
                     'in Python, from\n'
                     'lowest precedence (least binding) to highest '
                     'precedence (most\n'
                     'binding).  Operators w the same box have the same '
                     'precedence.  Unless\n'
                     'the syntax jest explicitly given, operators are binary.  '
                     'Operators in\n'
                     'the same box group left to right (wyjąwszy dla '
                     'exponentiation, which\n'
                     'groups z right to left).\n'
                     '\n'
                     'Note that comparisons, membership tests, oraz identity '
                     'tests, all have\n'
                     'the same precedence oraz have a left-to-right chaining '
                     'feature as\n'
                     'described w the *Comparisons* section.\n'
                     '\n'
                     '+-------------------------------------------------+---------------------------------------+\n'
                     '| Operator                                        | '
                     'Description                           |\n'
                     '+=================================================+=======================================+\n'
                     '| "lambda"                                        | '
                     'Lambda expression                     |\n'
                     '+-------------------------------------------------+---------------------------------------+\n'
                     '| "if" -- "inaczej"                                  | '
                     'Conditional expression                |\n'
                     '+-------------------------------------------------+---------------------------------------+\n'
                     '| "or"                                            | '
                     'Boolean OR                            |\n'
                     '+-------------------------------------------------+---------------------------------------+\n'
                     '| "and"                                           | '
                     'Boolean AND                           |\n'
                     '+-------------------------------------------------+---------------------------------------+\n'
                     '| "not" "x"                                       | '
                     'Boolean NOT                           |\n'
                     '+-------------------------------------------------+---------------------------------------+\n'
                     '| "in", "not in", "is", "is not", "<", "<=", ">", | '
                     'Comparisons, including membership     |\n'
                     '| ">=", "!=", "=="                                | '
                     'tests oraz identity tests              |\n'
                     '+-------------------------------------------------+---------------------------------------+\n'
                     '| "|"                                             | '
                     'Bitwise OR                            |\n'
                     '+-------------------------------------------------+---------------------------------------+\n'
                     '| "^"                                             | '
                     'Bitwise XOR                           |\n'
                     '+-------------------------------------------------+---------------------------------------+\n'
                     '| "&"                                             | '
                     'Bitwise AND                           |\n'
                     '+-------------------------------------------------+---------------------------------------+\n'
                     '| "<<", ">>"                                      | '
                     'Shifts                                |\n'
                     '+-------------------------------------------------+---------------------------------------+\n'
                     '| "+", "-"                                        | '
                     'Addition oraz subtraction              |\n'
                     '+-------------------------------------------------+---------------------------------------+\n'
                     '| "*", "@", "/", "//", "%"                        | '
                     'Multiplication, matrix multiplication |\n'
                     '|                                                 | '
                     'division, remainder [5]               |\n'
                     '+-------------------------------------------------+---------------------------------------+\n'
                     '| "+x", "-x", "~x"                                | '
                     'Positive, negative, bitwise NOT       |\n'
                     '+-------------------------------------------------+---------------------------------------+\n'
                     '| "**"                                            | '
                     'Exponentiation [6]                    |\n'
                     '+-------------------------------------------------+---------------------------------------+\n'
                     '| "await" "x"                                     | '
                     'Await expression                      |\n'
                     '+-------------------------------------------------+---------------------------------------+\n'
                     '| "x[index]", "x[index:index]",                   | '
                     'Subscription, slicing, call,          |\n'
                     '| "x(arguments...)", "x.attribute"                | '
                     'attribute reference                   |\n'
                     '+-------------------------------------------------+---------------------------------------+\n'
                     '| "(expressions...)", "[expressions...]", "{key:  | '
                     'Binding albo tuple display, list        |\n'
                     '| value...}", "{expressions...}"                  | '
                     'display, dictionary display, set      |\n'
                     '|                                                 | '
                     'display                               |\n'
                     '+-------------------------------------------------+---------------------------------------+\n'
                     '\n'
                     '-[ Footnotes ]-\n'
                     '\n'
                     '[1] While "abs(x%y) < abs(y)" jest true mathematically, '
                     'dla floats\n'
                     '    it may nie be true numerically due to roundoff.  '
                     'For example, and\n'
                     '    assuming a platform on which a Python float jest an '
                     'IEEE 754 double-\n'
                     '    precision number, w order that "-1e-100 % 1e100" '
                     'have the same\n'
                     '    sign jako "1e100", the computed result jest "-1e-100 + '
                     '1e100", which\n'
                     '    jest numerically exactly equal to "1e100".  The '
                     'function\n'
                     '    "math.fmod()" returns a result whose sign matches '
                     'the sign of the\n'
                     '    first argument instead, oraz so returns "-1e-100" '
                     'in this case.\n'
                     '    Which approach jest more appropriate depends on the '
                     'application.\n'
                     '\n'
                     '[2] If x jest very close to an exact integer multiple of '
                     "y, it's\n"
                     '    possible dla "x//y" to be one larger than '
                     '"(x-x%y)//y" due to\n'
                     '    rounding.  In such cases, Python returns the '
                     'latter result, in\n'
                     '    order to preserve that "divmod(x,y)[0] * y + x % '
                     'y" be very close\n'
                     '    to "x".\n'
                     '\n'
                     '[3] While comparisons between strings make sense at '
                     'the byte\n'
                     '    level, they may be counter-intuitive to users.  '
                     'For example, the\n'
                     '    strings ""\\u00C7"" oraz ""\\u0043\\u0327"" compare '
                     'differently, even\n'
                     '    though they both represent the same unicode '
                     'character (LATIN\n'
                     '    CAPITAL LETTER C WITH CEDILLA).  To compare '
                     'strings w a human\n'
                     '    recognizable way, compare using '
                     '"unicodedata.normalize()".\n'
                     '\n'
                     '[4] Due to automatic garbage-collection, free lists, '
                     'and the\n'
                     '    dynamic nature of descriptors, you may notice '
                     'seemingly unusual\n'
                     '    behaviour w certain uses of the "is" operator, '
                     'like those\n'
                     '    involving comparisons between instance methods, albo '
                     'constants.\n'
                     '    Check their documentation dla more info.\n'
                     '\n'
                     '[5] The "%" operator jest also used dla string '
                     'formatting; the same\n'
                     '    precedence applies.\n'
                     '\n'
                     '[6] The power operator "**" binds less tightly than an '
                     'arithmetic\n'
                     '    albo bitwise unary operator on its right, that is, '
                     '"2**-1" jest "0.5".\n',
 'pass': '\n'
         'The "pass" statement\n'
         '********************\n'
         '\n'
         '   dalej_stmt ::= "pass"\n'
         '\n'
         '"pass" jest a null operation --- when it jest executed, nothing '
         'happens.\n'
         'It jest useful jako a placeholder when a statement jest required\n'
         'syntactically, but no code needs to be executed, dla example:\n'
         '\n'
         '   def f(arg): dalej    # a function that does nothing (yet)\n'
         '\n'
         '   klasa C: dalej       # a klasa przy no methods (yet)\n',
 'power': '\n'
          'The power operator\n'
          '******************\n'
          '\n'
          'The power operator binds more tightly than unary operators on '
          'its\n'
          'left; it binds less tightly than unary operators on its right.  '
          'The\n'
          'syntax is:\n'
          '\n'
          '   power ::= await ["**" u_expr]\n'
          '\n'
          'Thus, w an unparenthesized sequence of power oraz unary '
          'operators, the\n'
          'operators are evaluated z right to left (this does nie '
          'constrain\n'
          'the evaluation order dla the operands): "-1**2" results w "-1".\n'
          '\n'
          'The power operator has the same semantics jako the built-in '
          '"pow()"\n'
          'function, when called przy two arguments: it uzyskajs its left '
          'argument\n'
          'raised to the power of its right argument.  The numeric arguments '
          'are\n'
          'first converted to a common type, oraz the result jest of that '
          'type.\n'
          '\n'
          'For int operands, the result has the same type jako the operands '
          'unless\n'
          'the second argument jest negative; w that case, all arguments are\n'
          'converted to float oraz a float result jest delivered. For example,\n'
          '"10**2" returns "100", but "10**-2" returns "0.01".\n'
          '\n'
          'Raising "0.0" to a negative power results w a '
          '"ZeroDivisionError".\n'
          'Raising a negative number to a fractional power results w a '
          '"complex"\n'
          'number. (In earlier versions it podnieśd a "ValueError".)\n',
 'raise': '\n'
          'The "raise" statement\n'
          '*********************\n'
          '\n'
          '   podnieś_stmt ::= "raise" [expression ["from" expression]]\n'
          '\n'
          'If no expressions are present, "raise" re-raises the last '
          'exception\n'
          'that was active w the current scope.  If no exception jest active '
          'in\n'
          'the current scope, a "RuntimeError" exception jest podnieśd '
          'indicating\n'
          'that this jest an error.\n'
          '\n'
          'Otherwise, "raise" evaluates the first expression jako the '
          'exception\n'
          'object.  It must be either a subclass albo an instance of\n'
          '"BaseException". If it jest a class, the exception instance will '
          'be\n'
          'obtained when needed by instantiating the klasa przy no '
          'arguments.\n'
          '\n'
          "The *type* of the exception jest the exception instance's class, "
          'the\n'
          '*value* jest the instance itself.\n'
          '\n'
          'A traceback object jest normally created automatically when an '
          'exception\n'
          'is podnieśd oraz attached to it jako the "__traceback__" attribute, '
          'which\n'
          'is writable. You can create an exception oraz set your own '
          'traceback in\n'
          'one step using the "with_traceback()" exception method (which '
          'returns\n'
          'the same exception instance, przy its traceback set to its '
          'argument),\n'
          'like so:\n'
          '\n'
          '   podnieś Exception("foo occurred").with_traceback(tracebackobj)\n'
          '\n'
          'The "from" clause jest used dla exception chaining: jeżeli given, the '
          'second\n'
          '*expression* must be another exception klasa albo instance, which '
          'will\n'
          'then be attached to the podnieśd exception jako the "__cause__" '
          'attribute\n'
          '(which jest writable).  If the podnieśd exception jest nie handled, '
          'both\n'
          'exceptions will be printed:\n'
          '\n'
          '   >>> spróbuj:\n'
          '   ...     print(1 / 0)\n'
          '   ... wyjąwszy Exception jako exc:\n'
          '   ...     podnieś RuntimeError("Something bad happened") z exc\n'
          '   ...\n'
          '   Traceback (most recent call last):\n'
          '     File "<stdin>", line 2, w <module>\n'
          '   ZeroDivisionError: int division albo modulo by zero\n'
          '\n'
          '   The above exception was the direct cause of the following '
          'exception:\n'
          '\n'
          '   Traceback (most recent call last):\n'
          '     File "<stdin>", line 4, w <module>\n'
          '   RuntimeError: Something bad happened\n'
          '\n'
          'A similar mechanism works implicitly jeżeli an exception jest podnieśd '
          'inside\n'
          'an exception handler albo a "finally" clause: the previous '
          'exception is\n'
          'then attached jako the new exception\'s "__context__" attribute:\n'
          '\n'
          '   >>> spróbuj:\n'
          '   ...     print(1 / 0)\n'
          '   ... wyjąwszy:\n'
          '   ...     podnieś RuntimeError("Something bad happened")\n'
          '   ...\n'
          '   Traceback (most recent call last):\n'
          '     File "<stdin>", line 2, w <module>\n'
          '   ZeroDivisionError: int division albo modulo by zero\n'
          '\n'
          '   During handling of the above exception, another exception '
          'occurred:\n'
          '\n'
          '   Traceback (most recent call last):\n'
          '     File "<stdin>", line 4, w <module>\n'
          '   RuntimeError: Something bad happened\n'
          '\n'
          'Additional information on exceptions can be found w section\n'
          '*Exceptions*, oraz information about handling exceptions jest w '
          'section\n'
          '*The try statement*.\n',
 'return': '\n'
           'The "return" statement\n'
           '**********************\n'
           '\n'
           '   return_stmt ::= "return" [expression_list]\n'
           '\n'
           '"return" may only occur syntactically nested w a function '
           'definition,\n'
           'not within a nested klasa definition.\n'
           '\n'
           'If an expression list jest present, it jest evaluated, inaczej "Nic" '
           'is\n'
           'substituted.\n'
           '\n'
           '"return" leaves the current function call przy the expression '
           'list (or\n'
           '"Nic") jako zwróć value.\n'
           '\n'
           'When "return" dalejes control out of a "try" statement przy a '
           '"finally"\n'
           'clause, that "finally" clause jest executed before really leaving '
           'the\n'
           'function.\n'
           '\n'
           'In a generator function, the "return" statement indicates that '
           'the\n'
           'generator jest done oraz will cause "StopIteration" to be podnieśd. '
           'The\n'
           'returned value (jeżeli any) jest used jako an argument to construct\n'
           '"StopIteration" oraz becomes the "StopIteration.value" '
           'attribute.\n',
 'sequence-types': '\n'
                   'Emulating container types\n'
                   '*************************\n'
                   '\n'
                   'The following methods can be defined to implement '
                   'container objects.\n'
                   'Containers usually are sequences (such jako lists albo '
                   'tuples) albo mappings\n'
                   '(like dictionaries), but can represent other containers '
                   'as well.  The\n'
                   'first set of methods jest used either to emulate a '
                   'sequence albo to\n'
                   'emulate a mapping; the difference jest that dla a '
                   'sequence, the\n'
                   'allowable keys should be the integers *k* dla which "0 '
                   '<= k < N" where\n'
                   '*N* jest the length of the sequence, albo slice objects, '
                   'which define a\n'
                   'range of items.  It jest also recommended that mappings '
                   'provide the\n'
                   'methods "keys()", "values()", "items()", "get()", '
                   '"clear()",\n'
                   '"setdefault()", "pop()", "popitem()", "copy()", oraz '
                   '"update()"\n'
                   "behaving similar to those dla Python's standard "
                   'dictionary objects.\n'
                   'The "collections" module provides a "MutableMapping" '
                   'abstract base\n'
                   'class to help create those methods z a base set of '
                   '"__getitem__()",\n'
                   '"__setitem__()", "__delitem__()", oraz "keys()". Mutable '
                   'sequences\n'
                   'should provide methods "append()", "count()", "index()", '
                   '"extend()",\n'
                   '"insert()", "pop()", "remove()", "reverse()" oraz '
                   '"sort()", like Python\n'
                   'standard list objects.  Finally, sequence types should '
                   'implement\n'
                   'addition (meaning concatenation) oraz multiplication '
                   '(meaning\n'
                   'repetition) by defining the methods "__add__()", '
                   '"__radd__()",\n'
                   '"__iadd__()", "__mul__()", "__rmul__()" oraz "__imul__()" '
                   'described\n'
                   'below; they should nie define other numerical '
                   'operators.  It is\n'
                   'recommended that both mappings oraz sequences implement '
                   'the\n'
                   '"__contains__()" method to allow efficient use of the '
                   '"in" operator;\n'
                   'dla mappings, "in" should search the mapping\'s keys; '
                   'dla sequences, it\n'
                   'should search through the values.  It jest further '
                   'recommended that both\n'
                   'mappings oraz sequences implement the "__iter__()" method '
                   'to allow\n'
                   'efficient iteration through the container; dla mappings, '
                   '"__iter__()"\n'
                   'should be the same jako "keys()"; dla sequences, it should '
                   'iterate\n'
                   'through the values.\n'
                   '\n'
                   'object.__len__(self)\n'
                   '\n'
                   '   Called to implement the built-in function "len()".  '
                   'Should return\n'
                   '   the length of the object, an integer ">=" 0.  Also, '
                   'an object that\n'
                   '   doesn\'t define a "__bool__()" method oraz whose '
                   '"__len__()" method\n'
                   '   returns zero jest considered to be false w a Boolean '
                   'context.\n'
                   '\n'
                   'object.__length_hint__(self)\n'
                   '\n'
                   '   Called to implement "operator.length_hint()". Should '
                   'return an\n'
                   '   estimated length dla the object (which may be greater '
                   'or less than\n'
                   '   the actual length). The length must be an integer '
                   '">=" 0. This\n'
                   '   method jest purely an optimization oraz jest never '
                   'required for\n'
                   '   correctness.\n'
                   '\n'
                   '   New w version 3.4.\n'
                   '\n'
                   'Note: Slicing jest done exclusively przy the following '
                   'three methods.\n'
                   '  A call like\n'
                   '\n'
                   '     a[1:2] = b\n'
                   '\n'
                   '  jest translated to\n'
                   '\n'
                   '     a[slice(1, 2, Nic)] = b\n'
                   '\n'
                   '  oraz so forth.  Missing slice items are always filled '
                   'in przy "Nic".\n'
                   '\n'
                   'object.__getitem__(self, key)\n'
                   '\n'
                   '   Called to implement evaluation of "self[key]". For '
                   'sequence types,\n'
                   '   the accepted keys should be integers oraz slice '
                   'objects.  Note that\n'
                   '   the special interpretation of negative indexes (jeżeli '
                   'the klasa wishes\n'
                   '   to emulate a sequence type) jest up to the '
                   '"__getitem__()" method. If\n'
                   '   *key* jest of an inappropriate type, "TypeError" may be '
                   'raised; jeżeli of\n'
                   '   a value outside the set of indexes dla the sequence '
                   '(after any\n'
                   '   special interpretation of negative values), '
                   '"IndexError" should be\n'
                   '   podnieśd. For mapping types, jeżeli *key* jest missing (nie '
                   'in the\n'
                   '   container), "KeyError" should be podnieśd.\n'
                   '\n'
                   '   Note: "for" loops expect that an "IndexError" will be '
                   'raised for\n'
                   '     illegal indexes to allow proper detection of the '
                   'end of the\n'
                   '     sequence.\n'
                   '\n'
                   'object.__missing__(self, key)\n'
                   '\n'
                   '   Called by "dict"."__getitem__()" to implement '
                   '"self[key]" dla dict\n'
                   '   subclasses when key jest nie w the dictionary.\n'
                   '\n'
                   'object.__setitem__(self, key, value)\n'
                   '\n'
                   '   Called to implement assignment to "self[key]".  Same '
                   'note jako for\n'
                   '   "__getitem__()".  This should only be implemented dla '
                   'mappings if\n'
                   '   the objects support changes to the values dla keys, '
                   'or jeżeli new keys\n'
                   '   can be added, albo dla sequences jeżeli elements can be '
                   'replaced.  The\n'
                   '   same exceptions should be podnieśd dla improper *key* '
                   'values jako for\n'
                   '   the "__getitem__()" method.\n'
                   '\n'
                   'object.__delitem__(self, key)\n'
                   '\n'
                   '   Called to implement deletion of "self[key]".  Same '
                   'note jako for\n'
                   '   "__getitem__()".  This should only be implemented dla '
                   'mappings if\n'
                   '   the objects support removal of keys, albo dla sequences '
                   'jeżeli elements\n'
                   '   can be removed z the sequence.  The same '
                   'exceptions should be\n'
                   '   podnieśd dla improper *key* values jako dla the '
                   '"__getitem__()" method.\n'
                   '\n'
                   'object.__iter__(self)\n'
                   '\n'
                   '   This method jest called when an iterator jest required '
                   'dla a container.\n'
                   '   This method should zwróć a new iterator object that '
                   'can iterate\n'
                   '   over all the objects w the container.  For mappings, '
                   'it should\n'
                   '   iterate over the keys of the container.\n'
                   '\n'
                   '   Iterator objects also need to implement this method; '
                   'they are\n'
                   '   required to zwróć themselves.  For more information '
                   'on iterator\n'
                   '   objects, see *Iterator Types*.\n'
                   '\n'
                   'object.__reversed__(self)\n'
                   '\n'
                   '   Called (jeżeli present) by the "reversed()" built-in to '
                   'implement\n'
                   '   reverse iteration.  It should zwróć a new iterator '
                   'object that\n'
                   '   iterates over all the objects w the container w '
                   'reverse order.\n'
                   '\n'
                   '   If the "__reversed__()" method jest nie provided, the '
                   '"reversed()"\n'
                   '   built-in will fall back to using the sequence '
                   'protocol ("__len__()"\n'
                   '   oraz "__getitem__()").  Objects that support the '
                   'sequence protocol\n'
                   '   should only provide "__reversed__()" jeżeli they can '
                   'provide an\n'
                   '   implementation that jest more efficient than the one '
                   'provided by\n'
                   '   "reversed()".\n'
                   '\n'
                   'The membership test operators ("in" oraz "not in") are '
                   'normally\n'
                   'implemented jako an iteration through a sequence.  '
                   'However, container\n'
                   'objects can supply the following special method przy a '
                   'more efficient\n'
                   'implementation, which also does nie require the object '
                   'be a sequence.\n'
                   '\n'
                   'object.__contains__(self, item)\n'
                   '\n'
                   '   Called to implement membership test operators.  '
                   'Should zwróć true\n'
                   '   jeżeli *item* jest w *self*, false otherwise.  For mapping '
                   'objects, this\n'
                   '   should consider the keys of the mapping rather than '
                   'the values or\n'
                   '   the key-item pairs.\n'
                   '\n'
                   '   For objects that don\'t define "__contains__()", the '
                   'membership test\n'
                   '   first tries iteration via "__iter__()", then the old '
                   'sequence\n'
                   '   iteration protocol via "__getitem__()", see *this '
                   'section w the\n'
                   '   language reference*.\n',
 'shifting': '\n'
             'Shifting operations\n'
             '*******************\n'
             '\n'
             'The shifting operations have lower priority than the '
             'arithmetic\n'
             'operations:\n'
             '\n'
             '   shift_expr ::= a_expr | shift_expr ( "<<" | ">>" ) a_expr\n'
             '\n'
             'These operators accept integers jako arguments.  They shift the '
             'first\n'
             'argument to the left albo right by the number of bits given by '
             'the\n'
             'second argument.\n'
             '\n'
             'A right shift by *n* bits jest defined jako floor division by '
             '"pow(2,n)".\n'
             'A left shift by *n* bits jest defined jako multiplication przy '
             '"pow(2,n)".\n'
             '\n'
             'Note: In the current implementation, the right-hand operand '
             'is\n'
             '  required to be at most "sys.maxsize".  If the right-hand '
             'operand is\n'
             '  larger than "sys.maxsize" an "OverflowError" exception jest '
             'raised.\n',
 'slicings': '\n'
             'Slicings\n'
             '********\n'
             '\n'
             'A slicing selects a range of items w a sequence object (e.g., '
             'a\n'
             'string, tuple albo list).  Slicings may be used jako expressions '
             'or as\n'
             'targets w assignment albo "del" statements.  The syntax dla a '
             'slicing:\n'
             '\n'
             '   slicing      ::= primary "[" slice_list "]"\n'
             '   slice_list   ::= slice_item ("," slice_item)* [","]\n'
             '   slice_item   ::= expression | proper_slice\n'
             '   proper_slice ::= [lower_bound] ":" [upper_bound] [ ":" '
             '[stride] ]\n'
             '   lower_bound  ::= expression\n'
             '   upper_bound  ::= expression\n'
             '   stride       ::= expression\n'
             '\n'
             'There jest ambiguity w the formal syntax here: anything that '
             'looks like\n'
             'an expression list also looks like a slice list, so any '
             'subscription\n'
             'can be interpreted jako a slicing.  Rather than further '
             'complicating the\n'
             'syntax, this jest disambiguated by defining that w this case '
             'the\n'
             'interpretation jako a subscription takes priority over the\n'
             'interpretation jako a slicing (this jest the case jeżeli the slice '
             'list\n'
             'contains no proper slice).\n'
             '\n'
             'The semantics dla a slicing are jako follows.  The primary jest '
             'indexed\n'
             '(using the same "__getitem__()" method jako normal subscription) '
             'przy a\n'
             'key that jest constructed z the slice list, jako follows.  If '
             'the slice\n'
             'list contains at least one comma, the key jest a tuple '
             'containing the\n'
             'conversion of the slice items; otherwise, the conversion of '
             'the lone\n'
             'slice item jest the key.  The conversion of a slice item that jest '
             'an\n'
             'expression jest that expression.  The conversion of a proper '
             'slice jest a\n'
             'slice object (see section *The standard type hierarchy*) '
             'whose\n'
             '"start", "stop" oraz "step" attributes are the values of the\n'
             'expressions given jako lower bound, upper bound oraz stride,\n'
             'respectively, substituting "Nic" dla missing expressions.\n',
 'specialattrs': '\n'
                 'Special Attributes\n'
                 '******************\n'
                 '\n'
                 'The implementation adds a few special read-only attributes '
                 'to several\n'
                 'object types, where they are relevant.  Some of these are '
                 'not reported\n'
                 'by the "dir()" built-in function.\n'
                 '\n'
                 'object.__dict__\n'
                 '\n'
                 '   A dictionary albo other mapping object used to store an '
                 "object's\n"
                 '   (writable) attributes.\n'
                 '\n'
                 'instance.__class__\n'
                 '\n'
                 '   The klasa to which a klasa instance belongs.\n'
                 '\n'
                 'class.__bases__\n'
                 '\n'
                 '   The tuple of base classes of a klasa object.\n'
                 '\n'
                 'class.__name__\n'
                 '\n'
                 '   The name of the klasa albo type.\n'
                 '\n'
                 'class.__qualname__\n'
                 '\n'
                 '   The *qualified name* of the klasa albo type.\n'
                 '\n'
                 '   New w version 3.3.\n'
                 '\n'
                 'class.__mro__\n'
                 '\n'
                 '   This attribute jest a tuple of classes that are '
                 'considered when\n'
                 '   looking dla base classes during method resolution.\n'
                 '\n'
                 'class.mro()\n'
                 '\n'
                 '   This method can be overridden by a metaclass to '
                 'customize the\n'
                 '   method resolution order dla its instances.  It jest '
                 'called at class\n'
                 '   instantiation, oraz its result jest stored w "__mro__".\n'
                 '\n'
                 'class.__subclasses__()\n'
                 '\n'
                 '   Each klasa keeps a list of weak references to its '
                 'immediate\n'
                 '   subclasses.  This method returns a list of all those '
                 'references\n'
                 '   still alive. Example:\n'
                 '\n'
                 '      >>> int.__subclasses__()\n'
                 "      [<class 'bool'>]\n"
                 '\n'
                 '-[ Footnotes ]-\n'
                 '\n'
                 '[1] Additional information on these special methods may be '
                 'found\n'
                 '    w the Python Reference Manual (*Basic '
                 'customization*).\n'
                 '\n'
                 '[2] As a consequence, the list "[1, 2]" jest considered '
                 'equal to\n'
                 '    "[1.0, 2.0]", oraz similarly dla tuples.\n'
                 '\n'
                 "[3] They must have since the parser can't tell the type of "
                 'the\n'
                 '    operands.\n'
                 '\n'
                 '[4] Cased characters are those przy general category '
                 'property\n'
                 '    being one of "Lu" (Letter, uppercase), "Ll" (Letter, '
                 'lowercase),\n'
                 '    albo "Lt" (Letter, titlecase).\n'
                 '\n'
                 '[5] To format only a tuple you should therefore provide a\n'
                 '    singleton tuple whose only element jest the tuple to be '
                 'formatted.\n',
 'specialnames': '\n'
                 'Special method names\n'
                 '********************\n'
                 '\n'
                 'A klasa can implement certain operations that are invoked '
                 'by special\n'
                 'syntax (such jako arithmetic operations albo subscripting oraz '
                 'slicing) by\n'
                 "defining methods przy special names. This jest Python's "
                 'approach to\n'
                 '*operator overloading*, allowing classes to define their '
                 'own behavior\n'
                 'przy respect to language operators.  For instance, jeżeli a '
                 'class defines\n'
                 'a method named "__getitem__()", oraz "x" jest an instance of '
                 'this class,\n'
                 'then "x[i]" jest roughly equivalent to '
                 '"type(x).__getitem__(x, i)".\n'
                 'Except where mentioned, attempts to execute an operation '
                 'raise an\n'
                 'exception when no appropriate method jest defined '
                 '(typically\n'
                 '"AttributeError" albo "TypeError").\n'
                 '\n'
                 'When implementing a klasa that emulates any built-in type, '
                 'it is\n'
                 'important that the emulation only be implemented to the '
                 'degree that it\n'
                 'makes sense dla the object being modelled.  For example, '
                 'some\n'
                 'sequences may work well przy retrieval of individual '
                 'elements, but\n'
                 'extracting a slice may nie make sense.  (One example of '
                 'this jest the\n'
                 '"NodeList" interface w the W3C\'s Document Object '
                 'Model.)\n'
                 '\n'
                 '\n'
                 'Basic customization\n'
                 '===================\n'
                 '\n'
                 'object.__new__(cls[, ...])\n'
                 '\n'
                 '   Called to create a new instance of klasa *cls*.  '
                 '"__new__()" jest a\n'
                 '   static method (special-cased so you need nie declare it '
                 'as such)\n'
                 '   that takes the klasa of which an instance was requested '
                 'as its\n'
                 '   first argument.  The remaining arguments are those '
                 'passed to the\n'
                 '   object constructor expression (the call to the class).  '
                 'The return\n'
                 '   value of "__new__()" should be the new object instance '
                 '(usually an\n'
                 '   instance of *cls*).\n'
                 '\n'
                 '   Typical implementations create a new instance of the '
                 'class by\n'
                 '   invoking the superclass\'s "__new__()" method using\n'
                 '   "super(currentclass, cls).__new__(cls[, ...])" przy '
                 'appropriate\n'
                 '   arguments oraz then modifying the newly-created instance '
                 'as\n'
                 '   necessary before returning it.\n'
                 '\n'
                 '   If "__new__()" returns an instance of *cls*, then the '
                 'new\n'
                 '   instance\'s "__init__()" method will be invoked like\n'
                 '   "__init__(self[, ...])", where *self* jest the new '
                 'instance oraz the\n'
                 '   remaining arguments are the same jako were dalejed to '
                 '"__new__()".\n'
                 '\n'
                 '   If "__new__()" does nie zwróć an instance of *cls*, '
                 'then the new\n'
                 '   instance\'s "__init__()" method will nie be invoked.\n'
                 '\n'
                 '   "__new__()" jest intended mainly to allow subclasses of '
                 'immutable\n'
                 '   types (like int, str, albo tuple) to customize instance '
                 'creation.  It\n'
                 '   jest also commonly overridden w custom metaclasses w '
                 'order to\n'
                 '   customize klasa creation.\n'
                 '\n'
                 'object.__init__(self[, ...])\n'
                 '\n'
                 '   Called after the instance has been created (by '
                 '"__new__()"), but\n'
                 '   before it jest returned to the caller.  The arguments are '
                 'those\n'
                 '   dalejed to the klasa constructor expression.  If a base '
                 'class has an\n'
                 '   "__init__()" method, the derived class\'s "__init__()" '
                 'method, if\n'
                 '   any, must explicitly call it to ensure proper '
                 'initialization of the\n'
                 '   base klasa part of the instance; dla example:\n'
                 '   "BaseClass.__init__(self, [args...])".\n'
                 '\n'
                 '   Because "__new__()" oraz "__init__()" work together w '
                 'constructing\n'
                 '   objects ("__new__()" to create it, oraz "__init__()" to '
                 'customise\n'
                 '   it), no non-"Nic" value may be returned by '
                 '"__init__()"; doing so\n'
                 '   will cause a "TypeError" to be podnieśd at runtime.\n'
                 '\n'
                 'object.__del__(self)\n'
                 '\n'
                 '   Called when the instance jest about to be destroyed.  '
                 'This jest also\n'
                 '   called a destructor.  If a base klasa has a "__del__()" '
                 'method, the\n'
                 '   derived class\'s "__del__()" method, jeżeli any, must '
                 'explicitly call it\n'
                 '   to ensure proper deletion of the base klasa part of the '
                 'instance.\n'
                 '   Note that it jest possible (though nie recommended!) dla '
                 'the\n'
                 '   "__del__()" method to postpone destruction of the '
                 'instance by\n'
                 '   creating a new reference to it.  It may then be called '
                 'at a later\n'
                 '   time when this new reference jest deleted.  It jest nie '
                 'guaranteed that\n'
                 '   "__del__()" methods are called dla objects that still '
                 'exist when\n'
                 '   the interpreter exits.\n'
                 '\n'
                 '   Note: "usuń x" doesn\'t directly call "x.__del__()" --- '
                 'the former\n'
                 '     decrements the reference count dla "x" by one, oraz '
                 'the latter is\n'
                 '     only called when "x"\'s reference count reaches '
                 'zero.  Some common\n'
                 '     situations that may prevent the reference count of an '
                 'object from\n'
                 '     going to zero include: circular references between '
                 'objects (e.g.,\n'
                 '     a doubly-linked list albo a tree data structure przy '
                 'parent and\n'
                 '     child pointers); a reference to the object on the '
                 'stack frame of\n'
                 '     a function that caught an exception (the traceback '
                 'stored in\n'
                 '     "sys.exc_info()[2]" keeps the stack frame alive); albo '
                 'a reference\n'
                 '     to the object on the stack frame that podnieśd an '
                 'unhandled\n'
                 '     exception w interactive mode (the traceback stored '
                 'in\n'
                 '     "sys.last_traceback" keeps the stack frame alive).  '
                 'The first\n'
                 '     situation can only be remedied by explicitly przerwijing '
                 'the cycles;\n'
                 '     the second can be resolved by freeing the reference '
                 'to the\n'
                 '     traceback object when it jest no longer useful, oraz the '
                 'third can\n'
                 '     be resolved by storing "Nic" w '
                 '"sys.last_traceback". Circular\n'
                 '     references which are garbage are detected oraz cleaned '
                 'up when the\n'
                 "     cyclic garbage collector jest enabled (it's on by "
                 'default). Refer\n'
                 '     to the documentation dla the "gc" module dla more '
                 'information\n'
                 '     about this topic.\n'
                 '\n'
                 '   Warning: Due to the precarious circumstances under '
                 'which\n'
                 '     "__del__()" methods are invoked, exceptions that '
                 'occur during\n'
                 '     their execution are ignored, oraz a warning jest printed '
                 'to\n'
                 '     "sys.stderr" instead. Also, when "__del__()" jest '
                 'invoked in\n'
                 '     response to a module being deleted (e.g., when '
                 'execution of the\n'
                 '     program jest done), other globals referenced by the '
                 '"__del__()"\n'
                 '     method may already have been deleted albo w the '
                 'process of being\n'
                 '     torn down (e.g. the zaimportuj machinery shutting down).  '
                 'For this\n'
                 '     reason, "__del__()" methods should do the absolute '
                 'minimum needed\n'
                 '     to maintain external invariants.  Starting przy '
                 'version 1.5,\n'
                 '     Python guarantees that globals whose name begins przy '
                 'a single\n'
                 '     underscore are deleted z their module before other '
                 'globals are\n'
                 '     deleted; jeżeli no other references to such globals '
                 'exist, this may\n'
                 '     help w assuring that imported modules are still '
                 'available at the\n'
                 '     time when the "__del__()" method jest called.\n'
                 '\n'
                 'object.__repr__(self)\n'
                 '\n'
                 '   Called by the "repr()" built-in function to compute the '
                 '"official"\n'
                 '   string representation of an object.  If at all '
                 'possible, this\n'
                 '   should look like a valid Python expression that could '
                 'be used to\n'
                 '   recreate an object przy the same value (given an '
                 'appropriate\n'
                 '   environment).  If this jest nie possible, a string of the '
                 'form\n'
                 '   "<...some useful description...>" should be returned. '
                 'The return\n'
                 '   value must be a string object. If a klasa defines '
                 '"__repr__()" but\n'
                 '   nie "__str__()", then "__repr__()" jest also used when an '
                 '"informal"\n'
                 '   string representation of instances of that klasa jest '
                 'required.\n'
                 '\n'
                 '   This jest typically used dla debugging, so it jest '
                 'important that the\n'
                 '   representation jest information-rich oraz unambiguous.\n'
                 '\n'
                 'object.__str__(self)\n'
                 '\n'
                 '   Called by "str(object)" oraz the built-in functions '
                 '"format()" and\n'
                 '   "print()" to compute the "informal" albo nicely printable '
                 'string\n'
                 '   representation of an object.  The zwróć value must be '
                 'a *string*\n'
                 '   object.\n'
                 '\n'
                 '   This method differs z "object.__repr__()" w that '
                 'there jest no\n'
                 '   expectation that "__str__()" zwróć a valid Python '
                 'expression: a\n'
                 '   more convenient albo concise representation can be used.\n'
                 '\n'
                 '   The default implementation defined by the built-in type '
                 '"object"\n'
                 '   calls "object.__repr__()".\n'
                 '\n'
                 'object.__bytes__(self)\n'
                 '\n'
                 '   Called by "bytes()" to compute a byte-string '
                 'representation of an\n'
                 '   object. This should zwróć a "bytes" object.\n'
                 '\n'
                 'object.__format__(self, format_spec)\n'
                 '\n'
                 '   Called by the "format()" built-in function (and by '
                 'extension, the\n'
                 '   "str.format()" method of klasa "str") to produce a '
                 '"formatted"\n'
                 '   string representation of an object. The "format_spec" '
                 'argument jest a\n'
                 '   string that contains a description of the formatting '
                 'options\n'
                 '   desired. The interpretation of the "format_spec" '
                 'argument jest up to\n'
                 '   the type implementing "__format__()", however most '
                 'classes will\n'
                 '   either delegate formatting to one of the built-in '
                 'types, albo use a\n'
                 '   similar formatting option syntax.\n'
                 '\n'
                 '   See *Format Specification Mini-Language* dla a '
                 'description of the\n'
                 '   standard formatting syntax.\n'
                 '\n'
                 '   The zwróć value must be a string object.\n'
                 '\n'
                 '   Changed w version 3.4: The __format__ method of '
                 '"object" itself\n'
                 '   podnieśs a "TypeError" jeżeli dalejed any non-empty string.\n'
                 '\n'
                 'object.__lt__(self, other)\n'
                 'object.__le__(self, other)\n'
                 'object.__eq__(self, other)\n'
                 'object.__ne__(self, other)\n'
                 'object.__gt__(self, other)\n'
                 'object.__ge__(self, other)\n'
                 '\n'
                 '   These are the so-called "rich comparison" methods. The\n'
                 '   correspondence between operator symbols oraz method '
                 'names jest as\n'
                 '   follows: "x<y" calls "x.__lt__(y)", "x<=y" calls '
                 '"x.__le__(y)",\n'
                 '   "x==y" calls "x.__eq__(y)", "x!=y" calls "x.__ne__(y)", '
                 '"x>y" calls\n'
                 '   "x.__gt__(y)", oraz "x>=y" calls "x.__ge__(y)".\n'
                 '\n'
                 '   A rich comparison method may zwróć the singleton '
                 '"NotImplemented"\n'
                 '   jeżeli it does nie implement the operation dla a given pair '
                 'of\n'
                 '   arguments. By convention, "Nieprawda" oraz "Prawda" are '
                 'returned dla a\n'
                 '   successful comparison. However, these methods can '
                 'return any value,\n'
                 '   so jeżeli the comparison operator jest used w a Boolean '
                 'context (e.g.,\n'
                 '   w the condition of an "if" statement), Python will '
                 'call "bool()"\n'
                 '   on the value to determine jeżeli the result jest true albo '
                 'false.\n'
                 '\n'
                 '   By default, "__ne__()" delegates to "__eq__()" oraz '
                 'inverts the\n'
                 '   result unless it jest "NotImplemented".  There are no '
                 'other implied\n'
                 '   relationships among the comparison operators, dla '
                 'example, the\n'
                 '   truth of "(x<y albo x==y)" does nie imply "x<=y". To '
                 'automatically\n'
                 '   generate ordering operations z a single root '
                 'operation, see\n'
                 '   "functools.total_ordering()".\n'
                 '\n'
                 '   See the paragraph on "__hash__()" dla some important '
                 'notes on\n'
                 '   creating *hashable* objects which support custom '
                 'comparison\n'
                 '   operations oraz are usable jako dictionary keys.\n'
                 '\n'
                 '   There are no swapped-argument versions of these methods '
                 '(to be used\n'
                 '   when the left argument does nie support the operation '
                 'but the right\n'
                 '   argument does); rather, "__lt__()" oraz "__gt__()" are '
                 "each other's\n"
                 '   reflection, "__le__()" oraz "__ge__()" are each other\'s '
                 'reflection,\n'
                 '   oraz "__eq__()" oraz "__ne__()" are their own reflection. '
                 'If the\n'
                 "   operands are of different types, oraz right operand's "
                 'type jest a\n'
                 "   direct albo indirect subclass of the left operand's type, "
                 'the\n'
                 '   reflected method of the right operand has priority, '
                 'otherwise the\n'
                 "   left operand's method has priority.  Virtual "
                 'subclassing jest not\n'
                 '   considered.\n'
                 '\n'
                 'object.__hash__(self)\n'
                 '\n'
                 '   Called by built-in function "hash()" oraz dla operations '
                 'on members\n'
                 '   of hashed collections including "set", "frozenset", oraz '
                 '"dict".\n'
                 '   "__hash__()" should zwróć an integer.  The only '
                 'required property\n'
                 '   jest that objects which compare equal have the same hash '
                 'value; it is\n'
                 '   advised to somehow mix together (e.g. using exclusive '
                 'or) the hash\n'
                 '   values dla the components of the object that also play '
                 'a part in\n'
                 '   comparison of objects.\n'
                 '\n'
                 '   Note: "hash()" truncates the value returned z an '
                 "object's\n"
                 '     custom "__hash__()" method to the size of a '
                 '"Py_ssize_t".  This\n'
                 '     jest typically 8 bytes on 64-bit builds oraz 4 bytes on '
                 '32-bit\n'
                 '     builds. If an object\'s   "__hash__()" must '
                 'interoperate on builds\n'
                 '     of different bit sizes, be sure to check the width on '
                 'all\n'
                 '     supported builds.  An easy way to do this jest przy '
                 '"python -c\n'
                 '     "zaimportuj sys; print(sys.hash_info.width)""\n'
                 '\n'
                 '   If a klasa does nie define an "__eq__()" method it '
                 'should not\n'
                 '   define a "__hash__()" operation either; jeżeli it defines '
                 '"__eq__()"\n'
                 '   but nie "__hash__()", its instances will nie be usable '
                 'as items in\n'
                 '   hashable collections.  If a klasa defines mutable '
                 'objects and\n'
                 '   implements an "__eq__()" method, it should nie '
                 'implement\n'
                 '   "__hash__()", since the implementation of hashable '
                 'collections\n'
                 "   requires that a key's hash value jest immutable (jeżeli the "
                 "object's hash\n"
                 '   value changes, it will be w the wrong hash bucket).\n'
                 '\n'
                 '   User-defined classes have "__eq__()" oraz "__hash__()" '
                 'methods by\n'
                 '   default; przy them, all objects compare unequal (wyjąwszy '
                 'with\n'
                 '   themselves) oraz "x.__hash__()" returns an appropriate '
                 'value such\n'
                 '   that "x == y" implies both that "x jest y" oraz "hash(x) '
                 '== hash(y)".\n'
                 '\n'
                 '   A klasa that overrides "__eq__()" oraz does nie define '
                 '"__hash__()"\n'
                 '   will have its "__hash__()" implicitly set to "Nic".  '
                 'When the\n'
                 '   "__hash__()" method of a klasa jest "Nic", instances of '
                 'the class\n'
                 '   will podnieś an appropriate "TypeError" when a program '
                 'attempts to\n'
                 '   retrieve their hash value, oraz will also be correctly '
                 'identified as\n'
                 '   unhashable when checking "isinstance(obj, '
                 'collections.Hashable").\n'
                 '\n'
                 '   If a klasa that overrides "__eq__()" needs to retain '
                 'the\n'
                 '   implementation of "__hash__()" z a parent class, the '
                 'interpreter\n'
                 '   must be told this explicitly by setting "__hash__ =\n'
                 '   <ParentClass>.__hash__".\n'
                 '\n'
                 '   If a klasa that does nie override "__eq__()" wishes to '
                 'suppress\n'
                 '   hash support, it should include "__hash__ = Nic" w '
                 'the class\n'
                 '   definition. A klasa which defines its own "__hash__()" '
                 'that\n'
                 '   explicitly podnieśs a "TypeError" would be incorrectly '
                 'identified as\n'
                 '   hashable by an "isinstance(obj, collections.Hashable)" '
                 'call.\n'
                 '\n'
                 '   Note: By default, the "__hash__()" values of str, bytes '
                 'and\n'
                 '     datetime objects are "salted" przy an unpredictable '
                 'random value.\n'
                 '     Although they remain constant within an individual '
                 'Python\n'
                 '     process, they are nie predictable between repeated '
                 'invocations of\n'
                 '     Python.This jest intended to provide protection against '
                 'a denial-\n'
                 '     of-service caused by carefully-chosen inputs that '
                 'exploit the\n'
                 '     worst case performance of a dict insertion, O(n^2) '
                 'complexity.\n'
                 '     See '
                 'http://www.ocert.org/advisories/ocert-2011-003.html for\n'
                 '     details.Changing hash values affects the iteration '
                 'order of\n'
                 '     dicts, sets oraz other mappings.  Python has never '
                 'made guarantees\n'
                 '     about this ordering (and it typically varies between '
                 '32-bit and\n'
                 '     64-bit builds).See also "PYTHONHASHSEED".\n'
                 '\n'
                 '   Changed w version 3.3: Hash randomization jest enabled '
                 'by default.\n'
                 '\n'
                 'object.__bool__(self)\n'
                 '\n'
                 '   Called to implement truth value testing oraz the '
                 'built-in operation\n'
                 '   "bool()"; should zwróć "Nieprawda" albo "Prawda".  When this '
                 'method jest not\n'
                 '   defined, "__len__()" jest called, jeżeli it jest defined, oraz '
                 'the object is\n'
                 '   considered true jeżeli its result jest nonzero.  If a klasa '
                 'defines\n'
                 '   neither "__len__()" nor "__bool__()", all its instances '
                 'are\n'
                 '   considered true.\n'
                 '\n'
                 '\n'
                 'Customizing attribute access\n'
                 '============================\n'
                 '\n'
                 'The following methods can be defined to customize the '
                 'meaning of\n'
                 'attribute access (use of, assignment to, albo deletion of '
                 '"x.name") for\n'
                 'class instances.\n'
                 '\n'
                 'object.__getattr__(self, name)\n'
                 '\n'
                 '   Called when an attribute lookup has nie found the '
                 'attribute w the\n'
                 '   usual places (i.e. it jest nie an instance attribute nor '
                 'is it found\n'
                 '   w the klasa tree dla "self").  "name" jest the attribute '
                 'name. This\n'
                 '   method should zwróć the (computed) attribute value albo '
                 'raise an\n'
                 '   "AttributeError" exception.\n'
                 '\n'
                 '   Note that jeżeli the attribute jest found through the normal '
                 'mechanism,\n'
                 '   "__getattr__()" jest nie called.  (This jest an intentional '
                 'asymmetry\n'
                 '   between "__getattr__()" oraz "__setattr__()".) This jest '
                 'done both for\n'
                 '   efficiency reasons oraz because otherwise '
                 '"__getattr__()" would have\n'
                 '   no way to access other attributes of the instance.  '
                 'Note that at\n'
                 '   least dla instance variables, you can fake total '
                 'control by not\n'
                 '   inserting any values w the instance attribute '
                 'dictionary (but\n'
                 '   instead inserting them w another object).  See the\n'
                 '   "__getattribute__()" method below dla a way to actually '
                 'get total\n'
                 '   control over attribute access.\n'
                 '\n'
                 'object.__getattribute__(self, name)\n'
                 '\n'
                 '   Called unconditionally to implement attribute accesses '
                 'for\n'
                 '   instances of the class. If the klasa also defines '
                 '"__getattr__()",\n'
                 '   the latter will nie be called unless '
                 '"__getattribute__()" either\n'
                 '   calls it explicitly albo podnieśs an "AttributeError". This '
                 'method\n'
                 '   should zwróć the (computed) attribute value albo podnieś '
                 'an\n'
                 '   "AttributeError" exception. In order to avoid infinite '
                 'recursion in\n'
                 '   this method, its implementation should always call the '
                 'base class\n'
                 '   method przy the same name to access any attributes it '
                 'needs, for\n'
                 '   example, "object.__getattribute__(self, name)".\n'
                 '\n'
                 '   Note: This method may still be bypassed when looking up '
                 'special\n'
                 '     methods jako the result of implicit invocation via '
                 'language syntax\n'
                 '     albo built-in functions. See *Special method lookup*.\n'
                 '\n'
                 'object.__setattr__(self, name, value)\n'
                 '\n'
                 '   Called when an attribute assignment jest attempted.  This '
                 'is called\n'
                 '   instead of the normal mechanism (i.e. store the value '
                 'in the\n'
                 '   instance dictionary). *name* jest the attribute name, '
                 '*value* jest the\n'
                 '   value to be assigned to it.\n'
                 '\n'
                 '   If "__setattr__()" wants to assign to an instance '
                 'attribute, it\n'
                 '   should call the base klasa method przy the same name, '
                 'dla example,\n'
                 '   "object.__setattr__(self, name, value)".\n'
                 '\n'
                 'object.__delattr__(self, name)\n'
                 '\n'
                 '   Like "__setattr__()" but dla attribute deletion instead '
                 'of\n'
                 '   assignment.  This should only be implemented jeżeli "usuń '
                 'obj.name" is\n'
                 '   meaningful dla the object.\n'
                 '\n'
                 'object.__dir__(self)\n'
                 '\n'
                 '   Called when "dir()" jest called on the object. A sequence '
                 'must be\n'
                 '   returned. "dir()" converts the returned sequence to a '
                 'list and\n'
                 '   sorts it.\n'
                 '\n'
                 '\n'
                 'Implementing Descriptors\n'
                 '------------------------\n'
                 '\n'
                 'The following methods only apply when an instance of the '
                 'class\n'
                 'containing the method (a so-called *descriptor* class) '
                 'appears w an\n'
                 '*owner* klasa (the descriptor must be w either the '
                 "owner's class\n"
                 'dictionary albo w the klasa dictionary dla one of its '
                 'parents).  In the\n'
                 'examples below, "the attribute" refers to the attribute '
                 'whose name is\n'
                 'the key of the property w the owner class\' "__dict__".\n'
                 '\n'
                 'object.__get__(self, instance, owner)\n'
                 '\n'
                 '   Called to get the attribute of the owner klasa (class '
                 'attribute\n'
                 '   access) albo of an instance of that klasa (instance '
                 'attribute\n'
                 '   access). *owner* jest always the owner class, dopóki '
                 '*instance* jest the\n'
                 '   instance that the attribute was accessed through, albo '
                 '"Nic" when\n'
                 '   the attribute jest accessed through the *owner*.  This '
                 'method should\n'
                 '   zwróć the (computed) attribute value albo podnieś an '
                 '"AttributeError"\n'
                 '   exception.\n'
                 '\n'
                 'object.__set__(self, instance, value)\n'
                 '\n'
                 '   Called to set the attribute on an instance *instance* '
                 'of the owner\n'
                 '   klasa to a new value, *value*.\n'
                 '\n'
                 'object.__delete__(self, instance)\n'
                 '\n'
                 '   Called to delete the attribute on an instance '
                 '*instance* of the\n'
                 '   owner class.\n'
                 '\n'
                 'The attribute "__objclass__" jest interpreted by the '
                 '"inspect" module as\n'
                 'specifying the klasa where this object was defined '
                 '(setting this\n'
                 'appropriately can assist w runtime introspection of '
                 'dynamic class\n'
                 'attributes). For callables, it may indicate that an '
                 'instance of the\n'
                 'given type (or a subclass) jest expected albo required jako the '
                 'first\n'
                 'positional argument (dla example, CPython sets this '
                 'attribute for\n'
                 'unbound methods that are implemented w C).\n'
                 '\n'
                 '\n'
                 'Invoking Descriptors\n'
                 '--------------------\n'
                 '\n'
                 'In general, a descriptor jest an object attribute przy '
                 '"binding\n'
                 'behavior", one whose attribute access has been overridden '
                 'by methods\n'
                 'in the descriptor protocol:  "__get__()", "__set__()", '
                 'and\n'
                 '"__delete__()". If any of those methods are defined dla an '
                 'object, it\n'
                 'is said to be a descriptor.\n'
                 '\n'
                 'The default behavior dla attribute access jest to get, set, '
                 'or delete\n'
                 "the attribute z an object's dictionary. For instance, "
                 '"a.x" has a\n'
                 'lookup chain starting przy "a.__dict__[\'x\']", then\n'
                 '"type(a).__dict__[\'x\']", oraz continuing through the base '
                 'classes of\n'
                 '"type(a)" excluding metaclasses.\n'
                 '\n'
                 'However, jeżeli the looked-up value jest an object defining one '
                 'of the\n'
                 'descriptor methods, then Python may override the default '
                 'behavior and\n'
                 'invoke the descriptor method instead.  Where this occurs '
                 'in the\n'
                 'precedence chain depends on which descriptor methods were '
                 'defined and\n'
                 'how they were called.\n'
                 '\n'
                 'The starting point dla descriptor invocation jest a binding, '
                 '"a.x". How\n'
                 'the arguments are assembled depends on "a":\n'
                 '\n'
                 'Direct Call\n'
                 '   The simplest oraz least common call jest when user code '
                 'directly\n'
                 '   invokes a descriptor method:    "x.__get__(a)".\n'
                 '\n'
                 'Instance Binding\n'
                 '   If binding to an object instance, "a.x" jest transformed '
                 'into the\n'
                 '   call: "type(a).__dict__[\'x\'].__get__(a, type(a))".\n'
                 '\n'
                 'Class Binding\n'
                 '   If binding to a class, "A.x" jest transformed into the '
                 'call:\n'
                 '   "A.__dict__[\'x\'].__get__(Nic, A)".\n'
                 '\n'
                 'Super Binding\n'
                 '   If "a" jest an instance of "super", then the binding '
                 '"super(B,\n'
                 '   obj).m()" searches "obj.__class__.__mro__" dla the base '
                 'class "A"\n'
                 '   immediately preceding "B" oraz then invokes the '
                 'descriptor przy the\n'
                 '   call: "A.__dict__[\'m\'].__get__(obj, obj.__class__)".\n'
                 '\n'
                 'For instance bindings, the precedence of descriptor '
                 'invocation depends\n'
                 'on the which descriptor methods are defined.  A descriptor '
                 'can define\n'
                 'any combination of "__get__()", "__set__()" oraz '
                 '"__delete__()".  If it\n'
                 'does nie define "__get__()", then accessing the attribute '
                 'will return\n'
                 'the descriptor object itself unless there jest a value w '
                 "the object's\n"
                 'instance dictionary.  If the descriptor defines '
                 '"__set__()" and/or\n'
                 '"__delete__()", it jest a data descriptor; jeżeli it defines '
                 'neither, it is\n'
                 'a non-data descriptor.  Normally, data descriptors define '
                 'both\n'
                 '"__get__()" oraz "__set__()", dopóki non-data descriptors '
                 'have just the\n'
                 '"__get__()" method.  Data descriptors przy "__set__()" oraz '
                 '"__get__()"\n'
                 'defined always override a redefinition w an instance '
                 'dictionary.  In\n'
                 'contrast, non-data descriptors can be overridden by '
                 'instances.\n'
                 '\n'
                 'Python methods (including "staticmethod()" oraz '
                 '"classmethod()") are\n'
                 'implemented jako non-data descriptors.  Accordingly, '
                 'instances can\n'
                 'redefine oraz override methods.  This allows individual '
                 'instances to\n'
                 'acquire behaviors that differ z other instances of the '
                 'same class.\n'
                 '\n'
                 'The "property()" function jest implemented jako a data '
                 'descriptor.\n'
                 'Accordingly, instances cannot override the behavior of a '
                 'property.\n'
                 '\n'
                 '\n'
                 '__slots__\n'
                 '---------\n'
                 '\n'
                 'By default, instances of classes have a dictionary dla '
                 'attribute\n'
                 'storage.  This wastes space dla objects having very few '
                 'instance\n'
                 'variables.  The space consumption can become acute when '
                 'creating large\n'
                 'numbers of instances.\n'
                 '\n'
                 'The default can be overridden by defining *__slots__* w a '
                 'class\n'
                 'definition. The *__slots__* declaration takes a sequence '
                 'of instance\n'
                 'variables oraz reserves just enough space w each instance '
                 'to hold a\n'
                 'value dla each variable.  Space jest saved because '
                 '*__dict__* jest not\n'
                 'created dla each instance.\n'
                 '\n'
                 'object.__slots__\n'
                 '\n'
                 '   This klasa variable can be assigned a string, iterable, '
                 'or sequence\n'
                 '   of strings przy variable names used by instances.  '
                 '*__slots__*\n'
                 '   reserves space dla the declared variables oraz prevents '
                 'the\n'
                 '   automatic creation of *__dict__* oraz *__weakref__* dla '
                 'each\n'
                 '   instance.\n'
                 '\n'
                 '\n'
                 'Notes on using *__slots__*\n'
                 '~~~~~~~~~~~~~~~~~~~~~~~~~~\n'
                 '\n'
                 '* When inheriting z a klasa without *__slots__*, the '
                 '*__dict__*\n'
                 '  attribute of that klasa will always be accessible, so a '
                 '*__slots__*\n'
                 '  definition w the subclass jest meaningless.\n'
                 '\n'
                 '* Without a *__dict__* variable, instances cannot be '
                 'assigned new\n'
                 '  variables nie listed w the *__slots__* definition.  '
                 'Attempts to\n'
                 '  assign to an unlisted variable name podnieśs '
                 '"AttributeError". If\n'
                 '  dynamic assignment of new variables jest desired, then '
                 'add\n'
                 '  "\'__dict__\'" to the sequence of strings w the '
                 '*__slots__*\n'
                 '  declaration.\n'
                 '\n'
                 '* Without a *__weakref__* variable dla each instance, '
                 'classes\n'
                 '  defining *__slots__* do nie support weak references to '
                 'its\n'
                 '  instances. If weak reference support jest needed, then '
                 'add\n'
                 '  "\'__weakref__\'" to the sequence of strings w the '
                 '*__slots__*\n'
                 '  declaration.\n'
                 '\n'
                 '* *__slots__* are implemented at the klasa level by '
                 'creating\n'
                 '  descriptors (*Implementing Descriptors*) dla each '
                 'variable name.  As\n'
                 '  a result, klasa attributes cannot be used to set default '
                 'values for\n'
                 '  instance variables defined by *__slots__*; otherwise, '
                 'the class\n'
                 '  attribute would overwrite the descriptor assignment.\n'
                 '\n'
                 '* The action of a *__slots__* declaration jest limited to '
                 'the class\n'
                 '  where it jest defined.  As a result, subclasses will have '
                 'a *__dict__*\n'
                 '  unless they also define *__slots__* (which must only '
                 'contain names\n'
                 '  of any *additional* slots).\n'
                 '\n'
                 '* If a klasa defines a slot also defined w a base class, '
                 'the\n'
                 '  instance variable defined by the base klasa slot jest '
                 'inaccessible\n'
                 '  (wyjąwszy by retrieving its descriptor directly z the '
                 'base class).\n'
                 '  This renders the meaning of the program undefined.  In '
                 'the future, a\n'
                 '  check may be added to prevent this.\n'
                 '\n'
                 '* Nicmpty *__slots__* does nie work dla classes derived '
                 'from\n'
                 '  "variable-length" built-in types such jako "int", "bytes" '
                 'and "tuple".\n'
                 '\n'
                 '* Any non-string iterable may be assigned to *__slots__*. '
                 'Mappings\n'
                 '  may also be used; however, w the future, special '
                 'meaning may be\n'
                 '  assigned to the values corresponding to each key.\n'
                 '\n'
                 '* *__class__* assignment works only jeżeli both classes have '
                 'the same\n'
                 '  *__slots__*.\n'
                 '\n'
                 '\n'
                 'Customizing klasa creation\n'
                 '==========================\n'
                 '\n'
                 'By default, classes are constructed using "type()". The '
                 'class body is\n'
                 'executed w a new namespace oraz the klasa name jest bound '
                 'locally to the\n'
                 'result of "type(name, bases, namespace)".\n'
                 '\n'
                 'The klasa creation process can be customised by dalejing '
                 'the\n'
                 '"metaclass" keyword argument w the klasa definition line, '
                 'or by\n'
                 'inheriting z an existing klasa that included such an '
                 'argument. In\n'
                 'the following example, both "MyClass" oraz "MySubclass" are '
                 'instances\n'
                 'of "Meta":\n'
                 '\n'
                 '   klasa Meta(type):\n'
                 '       dalej\n'
                 '\n'
                 '   klasa MyClass(metaclass=Meta):\n'
                 '       dalej\n'
                 '\n'
                 '   klasa MySubclass(MyClass):\n'
                 '       dalej\n'
                 '\n'
                 'Any other keyword arguments that are specified w the '
                 'class definition\n'
                 'are dalejed through to all metaclass operations described '
                 'below.\n'
                 '\n'
                 'When a klasa definition jest executed, the following steps '
                 'occur:\n'
                 '\n'
                 '* the appropriate metaclass jest determined\n'
                 '\n'
                 '* the klasa namespace jest prepared\n'
                 '\n'
                 '* the klasa body jest executed\n'
                 '\n'
                 '* the klasa object jest created\n'
                 '\n'
                 '\n'
                 'Determining the appropriate metaclass\n'
                 '-------------------------------------\n'
                 '\n'
                 'The appropriate metaclass dla a klasa definition jest '
                 'determined as\n'
                 'follows:\n'
                 '\n'
                 '* jeżeli no bases oraz no explicit metaclass are given, then '
                 '"type()" is\n'
                 '  used\n'
                 '\n'
                 '* jeżeli an explicit metaclass jest given oraz it jest *not* an '
                 'instance of\n'
                 '  "type()", then it jest used directly jako the metaclass\n'
                 '\n'
                 '* jeżeli an instance of "type()" jest given jako the explicit '
                 'metaclass, or\n'
                 '  bases are defined, then the most derived metaclass jest '
                 'used\n'
                 '\n'
                 'The most derived metaclass jest selected z the explicitly '
                 'specified\n'
                 'metaclass (jeżeli any) oraz the metaclasses (i.e. "type(cls)") '
                 'of all\n'
                 'specified base classes. The most derived metaclass jest one '
                 'which jest a\n'
                 'subtype of *all* of these candidate metaclasses. If none '
                 'of the\n'
                 'candidate metaclasses meets that criterion, then the klasa '
                 'definition\n'
                 'will fail przy "TypeError".\n'
                 '\n'
                 '\n'
                 'Preparing the klasa namespace\n'
                 '-----------------------------\n'
                 '\n'
                 'Once the appropriate metaclass has been identified, then '
                 'the class\n'
                 'namespace jest prepared. If the metaclass has a '
                 '"__prepare__" attribute,\n'
                 'it jest called jako "namespace = metaclass.__prepare__(name, '
                 'bases,\n'
                 '**kwds)" (where the additional keyword arguments, jeżeli any, '
                 'come from\n'
                 'the klasa definition).\n'
                 '\n'
                 'If the metaclass has no "__prepare__" attribute, then the '
                 'class\n'
                 'namespace jest initialised jako an empty "dict()" instance.\n'
                 '\n'
                 'See also: **PEP 3115** - Metaclasses w Python 3000\n'
                 '\n'
                 '     Introduced the "__prepare__" namespace hook\n'
                 '\n'
                 '\n'
                 'Executing the klasa body\n'
                 '------------------------\n'
                 '\n'
                 'The klasa body jest executed (approximately) jako "exec(body, '
                 'globals(),\n'
                 'namespace)". The key difference z a normal call to '
                 '"exec()" jest that\n'
                 'lexical scoping allows the klasa body (including any '
                 'methods) to\n'
                 'reference names z the current oraz outer scopes when the '
                 'class\n'
                 'definition occurs inside a function.\n'
                 '\n'
                 'However, even when the klasa definition occurs inside the '
                 'function,\n'
                 'methods defined inside the klasa still cannot see names '
                 'defined at the\n'
                 'class scope. Class variables must be accessed through the '
                 'first\n'
                 'parameter of instance albo klasa methods, oraz cannot be '
                 'accessed at all\n'
                 'z static methods.\n'
                 '\n'
                 '\n'
                 'Creating the klasa object\n'
                 '-------------------------\n'
                 '\n'
                 'Once the klasa namespace has been populated by executing '
                 'the class\n'
                 'body, the klasa object jest created by calling '
                 '"metaclass(name, bases,\n'
                 'namespace, **kwds)" (the additional keywords dalejed here '
                 'are the same\n'
                 'as those dalejed to "__prepare__").\n'
                 '\n'
                 'This klasa object jest the one that will be referenced by '
                 'the zero-\n'
                 'argument form of "super()". "__class__" jest an implicit '
                 'closure\n'
                 'reference created by the compiler jeżeli any methods w a '
                 'class body refer\n'
                 'to either "__class__" albo "super". This allows the zero '
                 'argument form\n'
                 'of "super()" to correctly identify the klasa being defined '
                 'based on\n'
                 'lexical scoping, dopóki the klasa albo instance that was used '
                 'to make the\n'
                 'current call jest identified based on the first argument '
                 'passed to the\n'
                 'method.\n'
                 '\n'
                 'After the klasa object jest created, it jest dalejed to the '
                 'class\n'
                 'decorators included w the klasa definition (jeżeli any) oraz '
                 'the resulting\n'
                 'object jest bound w the local namespace jako the defined '
                 'class.\n'
                 '\n'
                 'See also: **PEP 3135** - New super\n'
                 '\n'
                 '     Describes the implicit "__class__" closure reference\n'
                 '\n'
                 '\n'
                 'Metaclass example\n'
                 '-----------------\n'
                 '\n'
                 'The potential uses dla metaclasses are boundless. Some '
                 'ideas that have\n'
                 'been explored include logging, interface checking, '
                 'automatic\n'
                 'delegation, automatic property creation, proxies, '
                 'frameworks, and\n'
                 'automatic resource locking/synchronization.\n'
                 '\n'
                 'Here jest an example of a metaclass that uses an\n'
                 '"collections.OrderedDict" to remember the order that klasa '
                 'variables\n'
                 'are defined:\n'
                 '\n'
                 '   klasa OrderedClass(type):\n'
                 '\n'
                 '        @classmethod\n'
                 '        def __prepare__(metacls, name, bases, **kwds):\n'
                 '           zwróć collections.OrderedDict()\n'
                 '\n'
                 '        def __new__(cls, name, bases, namespace, **kwds):\n'
                 '           result = type.__new__(cls, name, bases, '
                 'dict(namespace))\n'
                 '           result.members = tuple(namespace)\n'
                 '           zwróć result\n'
                 '\n'
                 '   klasa A(metaclass=OrderedClass):\n'
                 '       def one(self): dalej\n'
                 '       def two(self): dalej\n'
                 '       def three(self): dalej\n'
                 '       def four(self): dalej\n'
                 '\n'
                 '   >>> A.members\n'
                 "   ('__module__', 'one', 'two', 'three', 'four')\n"
                 '\n'
                 'When the klasa definition dla *A* gets executed, the '
                 'process begins\n'
                 'przy calling the metaclass\'s "__prepare__()" method which '
                 'returns an\n'
                 'empty "collections.OrderedDict".  That mapping records the '
                 'methods and\n'
                 'attributes of *A* jako they are defined within the body of '
                 'the class\n'
                 'statement. Once those definitions are executed, the '
                 'ordered dictionary\n'
                 'is fully populated oraz the metaclass\'s "__new__()" method '
                 'gets\n'
                 'invoked.  That method builds the new type oraz it saves the '
                 'ordered\n'
                 'dictionary keys w an attribute called "members".\n'
                 '\n'
                 '\n'
                 'Customizing instance oraz subclass checks\n'
                 '========================================\n'
                 '\n'
                 'The following methods are used to override the default '
                 'behavior of the\n'
                 '"isinstance()" oraz "issubclass()" built-in functions.\n'
                 '\n'
                 'In particular, the metaclass "abc.ABCMeta" implements '
                 'these methods in\n'
                 'order to allow the addition of Abstract Base Classes '
                 '(ABCs) as\n'
                 '"virtual base classes" to any klasa albo type (including '
                 'built-in\n'
                 'types), including other ABCs.\n'
                 '\n'
                 'class.__instancecheck__(self, instance)\n'
                 '\n'
                 '   Return true jeżeli *instance* should be considered a '
                 '(direct or\n'
                 '   indirect) instance of *class*. If defined, called to '
                 'implement\n'
                 '   "isinstance(instance, class)".\n'
                 '\n'
                 'class.__subclasscheck__(self, subclass)\n'
                 '\n'
                 '   Return true jeżeli *subclass* should be considered a '
                 '(direct or\n'
                 '   indirect) subclass of *class*.  If defined, called to '
                 'implement\n'
                 '   "issubclass(subclass, class)".\n'
                 '\n'
                 'Note that these methods are looked up on the type '
                 '(metaclass) of a\n'
                 'class.  They cannot be defined jako klasa methods w the '
                 'actual class.\n'
                 'This jest consistent przy the lookup of special methods that '
                 'are called\n'
                 'on instances, only w this case the instance jest itself a '
                 'class.\n'
                 '\n'
                 'See also: **PEP 3119** - Introducing Abstract Base '
                 'Classes\n'
                 '\n'
                 '     Includes the specification dla customizing '
                 '"isinstance()" and\n'
                 '     "issubclass()" behavior through "__instancecheck__()" '
                 'and\n'
                 '     "__subclasscheck__()", przy motivation dla this '
                 'functionality in\n'
                 '     the context of adding Abstract Base Classes (see the '
                 '"abc"\n'
                 '     module) to the language.\n'
                 '\n'
                 '\n'
                 'Emulating callable objects\n'
                 '==========================\n'
                 '\n'
                 'object.__call__(self[, args...])\n'
                 '\n'
                 '   Called when the instance jest "called" jako a function; jeżeli '
                 'this method\n'
                 '   jest defined, "x(arg1, arg2, ...)" jest a shorthand for\n'
                 '   "x.__call__(arg1, arg2, ...)".\n'
                 '\n'
                 '\n'
                 'Emulating container types\n'
                 '=========================\n'
                 '\n'
                 'The following methods can be defined to implement '
                 'container objects.\n'
                 'Containers usually are sequences (such jako lists albo tuples) '
                 'or mappings\n'
                 '(like dictionaries), but can represent other containers jako '
                 'well.  The\n'
                 'first set of methods jest used either to emulate a sequence '
                 'or to\n'
                 'emulate a mapping; the difference jest that dla a sequence, '
                 'the\n'
                 'allowable keys should be the integers *k* dla which "0 <= '
                 'k < N" where\n'
                 '*N* jest the length of the sequence, albo slice objects, which '
                 'define a\n'
                 'range of items.  It jest also recommended that mappings '
                 'provide the\n'
                 'methods "keys()", "values()", "items()", "get()", '
                 '"clear()",\n'
                 '"setdefault()", "pop()", "popitem()", "copy()", oraz '
                 '"update()"\n'
                 "behaving similar to those dla Python's standard dictionary "
                 'objects.\n'
                 'The "collections" module provides a "MutableMapping" '
                 'abstract base\n'
                 'class to help create those methods z a base set of '
                 '"__getitem__()",\n'
                 '"__setitem__()", "__delitem__()", oraz "keys()". Mutable '
                 'sequences\n'
                 'should provide methods "append()", "count()", "index()", '
                 '"extend()",\n'
                 '"insert()", "pop()", "remove()", "reverse()" oraz "sort()", '
                 'like Python\n'
                 'standard list objects.  Finally, sequence types should '
                 'implement\n'
                 'addition (meaning concatenation) oraz multiplication '
                 '(meaning\n'
                 'repetition) by defining the methods "__add__()", '
                 '"__radd__()",\n'
                 '"__iadd__()", "__mul__()", "__rmul__()" oraz "__imul__()" '
                 'described\n'
                 'below; they should nie define other numerical operators.  '
                 'It is\n'
                 'recommended that both mappings oraz sequences implement '
                 'the\n'
                 '"__contains__()" method to allow efficient use of the "in" '
                 'operator;\n'
                 'dla mappings, "in" should search the mapping\'s keys; dla '
                 'sequences, it\n'
                 'should search through the values.  It jest further '
                 'recommended that both\n'
                 'mappings oraz sequences implement the "__iter__()" method '
                 'to allow\n'
                 'efficient iteration through the container; dla mappings, '
                 '"__iter__()"\n'
                 'should be the same jako "keys()"; dla sequences, it should '
                 'iterate\n'
                 'through the values.\n'
                 '\n'
                 'object.__len__(self)\n'
                 '\n'
                 '   Called to implement the built-in function "len()".  '
                 'Should return\n'
                 '   the length of the object, an integer ">=" 0.  Also, an '
                 'object that\n'
                 '   doesn\'t define a "__bool__()" method oraz whose '
                 '"__len__()" method\n'
                 '   returns zero jest considered to be false w a Boolean '
                 'context.\n'
                 '\n'
                 'object.__length_hint__(self)\n'
                 '\n'
                 '   Called to implement "operator.length_hint()". Should '
                 'return an\n'
                 '   estimated length dla the object (which may be greater '
                 'or less than\n'
                 '   the actual length). The length must be an integer ">=" '
                 '0. This\n'
                 '   method jest purely an optimization oraz jest never required '
                 'for\n'
                 '   correctness.\n'
                 '\n'
                 '   New w version 3.4.\n'
                 '\n'
                 'Note: Slicing jest done exclusively przy the following three '
                 'methods.\n'
                 '  A call like\n'
                 '\n'
                 '     a[1:2] = b\n'
                 '\n'
                 '  jest translated to\n'
                 '\n'
                 '     a[slice(1, 2, Nic)] = b\n'
                 '\n'
                 '  oraz so forth.  Missing slice items are always filled w '
                 'przy "Nic".\n'
                 '\n'
                 'object.__getitem__(self, key)\n'
                 '\n'
                 '   Called to implement evaluation of "self[key]". For '
                 'sequence types,\n'
                 '   the accepted keys should be integers oraz slice '
                 'objects.  Note that\n'
                 '   the special interpretation of negative indexes (jeżeli the '
                 'class wishes\n'
                 '   to emulate a sequence type) jest up to the '
                 '"__getitem__()" method. If\n'
                 '   *key* jest of an inappropriate type, "TypeError" may be '
                 'raised; jeżeli of\n'
                 '   a value outside the set of indexes dla the sequence '
                 '(after any\n'
                 '   special interpretation of negative values), '
                 '"IndexError" should be\n'
                 '   podnieśd. For mapping types, jeżeli *key* jest missing (nie w '
                 'the\n'
                 '   container), "KeyError" should be podnieśd.\n'
                 '\n'
                 '   Note: "for" loops expect that an "IndexError" will be '
                 'raised for\n'
                 '     illegal indexes to allow proper detection of the end '
                 'of the\n'
                 '     sequence.\n'
                 '\n'
                 'object.__missing__(self, key)\n'
                 '\n'
                 '   Called by "dict"."__getitem__()" to implement '
                 '"self[key]" dla dict\n'
                 '   subclasses when key jest nie w the dictionary.\n'
                 '\n'
                 'object.__setitem__(self, key, value)\n'
                 '\n'
                 '   Called to implement assignment to "self[key]".  Same '
                 'note jako for\n'
                 '   "__getitem__()".  This should only be implemented dla '
                 'mappings if\n'
                 '   the objects support changes to the values dla keys, albo '
                 'jeżeli new keys\n'
                 '   can be added, albo dla sequences jeżeli elements can be '
                 'replaced.  The\n'
                 '   same exceptions should be podnieśd dla improper *key* '
                 'values jako for\n'
                 '   the "__getitem__()" method.\n'
                 '\n'
                 'object.__delitem__(self, key)\n'
                 '\n'
                 '   Called to implement deletion of "self[key]".  Same note '
                 'as for\n'
                 '   "__getitem__()".  This should only be implemented dla '
                 'mappings if\n'
                 '   the objects support removal of keys, albo dla sequences '
                 'jeżeli elements\n'
                 '   can be removed z the sequence.  The same exceptions '
                 'should be\n'
                 '   podnieśd dla improper *key* values jako dla the '
                 '"__getitem__()" method.\n'
                 '\n'
                 'object.__iter__(self)\n'
                 '\n'
                 '   This method jest called when an iterator jest required dla '
                 'a container.\n'
                 '   This method should zwróć a new iterator object that '
                 'can iterate\n'
                 '   over all the objects w the container.  For mappings, '
                 'it should\n'
                 '   iterate over the keys of the container.\n'
                 '\n'
                 '   Iterator objects also need to implement this method; '
                 'they are\n'
                 '   required to zwróć themselves.  For more information on '
                 'iterator\n'
                 '   objects, see *Iterator Types*.\n'
                 '\n'
                 'object.__reversed__(self)\n'
                 '\n'
                 '   Called (jeżeli present) by the "reversed()" built-in to '
                 'implement\n'
                 '   reverse iteration.  It should zwróć a new iterator '
                 'object that\n'
                 '   iterates over all the objects w the container w '
                 'reverse order.\n'
                 '\n'
                 '   If the "__reversed__()" method jest nie provided, the '
                 '"reversed()"\n'
                 '   built-in will fall back to using the sequence protocol '
                 '("__len__()"\n'
                 '   oraz "__getitem__()").  Objects that support the '
                 'sequence protocol\n'
                 '   should only provide "__reversed__()" jeżeli they can '
                 'provide an\n'
                 '   implementation that jest more efficient than the one '
                 'provided by\n'
                 '   "reversed()".\n'
                 '\n'
                 'The membership test operators ("in" oraz "not in") are '
                 'normally\n'
                 'implemented jako an iteration through a sequence.  However, '
                 'container\n'
                 'objects can supply the following special method przy a '
                 'more efficient\n'
                 'implementation, which also does nie require the object be '
                 'a sequence.\n'
                 '\n'
                 'object.__contains__(self, item)\n'
                 '\n'
                 '   Called to implement membership test operators.  Should '
                 'return true\n'
                 '   jeżeli *item* jest w *self*, false otherwise.  For mapping '
                 'objects, this\n'
                 '   should consider the keys of the mapping rather than the '
                 'values or\n'
                 '   the key-item pairs.\n'
                 '\n'
                 '   For objects that don\'t define "__contains__()", the '
                 'membership test\n'
                 '   first tries iteration via "__iter__()", then the old '
                 'sequence\n'
                 '   iteration protocol via "__getitem__()", see *this '
                 'section w the\n'
                 '   language reference*.\n'
                 '\n'
                 '\n'
                 'Emulating numeric types\n'
                 '=======================\n'
                 '\n'
                 'The following methods can be defined to emulate numeric '
                 'objects.\n'
                 'Methods corresponding to operations that are nie supported '
                 'by the\n'
                 'particular kind of number implemented (e.g., bitwise '
                 'operations for\n'
                 'non-integral numbers) should be left undefined.\n'
                 '\n'
                 'object.__add__(self, other)\n'
                 'object.__sub__(self, other)\n'
                 'object.__mul__(self, other)\n'
                 'object.__matmul__(self, other)\n'
                 'object.__truediv__(self, other)\n'
                 'object.__floordiv__(self, other)\n'
                 'object.__mod__(self, other)\n'
                 'object.__divmod__(self, other)\n'
                 'object.__pow__(self, other[, modulo])\n'
                 'object.__lshift__(self, other)\n'
                 'object.__rshift__(self, other)\n'
                 'object.__and__(self, other)\n'
                 'object.__xor__(self, other)\n'
                 'object.__or__(self, other)\n'
                 '\n'
                 '   These methods are called to implement the binary '
                 'arithmetic\n'
                 '   operations ("+", "-", "*", "@", "/", "//", "%", '
                 '"divmod()",\n'
                 '   "pow()", "**", "<<", ">>", "&", "^", "|").  For '
                 'instance, to\n'
                 '   evaluate the expression "x + y", where *x* jest an '
                 'instance of a\n'
                 '   klasa that has an "__add__()" method, "x.__add__(y)" jest '
                 'called.\n'
                 '   The "__divmod__()" method should be the equivalent to '
                 'using\n'
                 '   "__floordiv__()" oraz "__mod__()"; it should nie be '
                 'related to\n'
                 '   "__truediv__()".  Note that "__pow__()" should be '
                 'defined to accept\n'
                 '   an optional third argument jeżeli the ternary version of '
                 'the built-in\n'
                 '   "pow()" function jest to be supported.\n'
                 '\n'
                 '   If one of those methods does nie support the operation '
                 'przy the\n'
                 '   supplied arguments, it should zwróć "NotImplemented".\n'
                 '\n'
                 'object.__radd__(self, other)\n'
                 'object.__rsub__(self, other)\n'
                 'object.__rmul__(self, other)\n'
                 'object.__rmatmul__(self, other)\n'
                 'object.__rtruediv__(self, other)\n'
                 'object.__rfloordiv__(self, other)\n'
                 'object.__rmod__(self, other)\n'
                 'object.__rdivmod__(self, other)\n'
                 'object.__rpow__(self, other)\n'
                 'object.__rlshift__(self, other)\n'
                 'object.__rrshift__(self, other)\n'
                 'object.__rand__(self, other)\n'
                 'object.__rxor__(self, other)\n'
                 'object.__ror__(self, other)\n'
                 '\n'
                 '   These methods are called to implement the binary '
                 'arithmetic\n'
                 '   operations ("+", "-", "*", "@", "/", "//", "%", '
                 '"divmod()",\n'
                 '   "pow()", "**", "<<", ">>", "&", "^", "|") przy '
                 'reflected (swapped)\n'
                 '   operands.  These functions are only called jeżeli the left '
                 'operand does\n'
                 '   nie support the corresponding operation oraz the '
                 'operands are of\n'
                 '   different types. [2] For instance, to evaluate the '
                 'expression "x -\n'
                 '   y", where *y* jest an instance of a klasa that has an '
                 '"__rsub__()"\n'
                 '   method, "y.__rsub__(x)" jest called jeżeli "x.__sub__(y)" '
                 'returns\n'
                 '   *NotImplemented*.\n'
                 '\n'
                 '   Note that ternary "pow()" will nie try calling '
                 '"__rpow__()" (the\n'
                 '   coercion rules would become too complicated).\n'
                 '\n'
                 "   Note: If the right operand's type jest a subclass of the "
                 'left\n'
                 "     operand's type oraz that subclass provides the "
                 'reflected method\n'
                 '     dla the operation, this method will be called before '
                 'the left\n'
                 "     operand's non-reflected method.  This behavior allows "
                 'subclasses\n'
                 "     to override their ancestors' operations.\n"
                 '\n'
                 'object.__iadd__(self, other)\n'
                 'object.__isub__(self, other)\n'
                 'object.__imul__(self, other)\n'
                 'object.__imatmul__(self, other)\n'
                 'object.__itruediv__(self, other)\n'
                 'object.__ifloordiv__(self, other)\n'
                 'object.__imod__(self, other)\n'
                 'object.__ipow__(self, other[, modulo])\n'
                 'object.__ilshift__(self, other)\n'
                 'object.__irshift__(self, other)\n'
                 'object.__iand__(self, other)\n'
                 'object.__ixor__(self, other)\n'
                 'object.__ior__(self, other)\n'
                 '\n'
                 '   These methods are called to implement the augmented '
                 'arithmetic\n'
                 '   assignments ("+=", "-=", "*=", "@=", "/=", "//=", "%=", '
                 '"**=",\n'
                 '   "<<=", ">>=", "&=", "^=", "|=").  These methods should '
                 'attempt to\n'
                 '   do the operation in-place (modifying *self*) oraz zwróć '
                 'the result\n'
                 '   (which could be, but does nie have to be, *self*).  If '
                 'a specific\n'
                 '   method jest nie defined, the augmented assignment falls '
                 'back to the\n'
                 '   normal methods.  For instance, jeżeli *x* jest an instance of '
                 'a class\n'
                 '   przy an "__iadd__()" method, "x += y" jest equivalent to '
                 '"x =\n'
                 '   x.__iadd__(y)" . Otherwise, "x.__add__(y)" oraz '
                 '"y.__radd__(x)" are\n'
                 '   considered, jako przy the evaluation of "x + y". In '
                 'certain\n'
                 '   situations, augmented assignment can result w '
                 'unexpected errors\n'
                 "   (see *Why does a_tuple[i] += ['item'] podnieś an "
                 'exception when the\n'
                 '   addition works?*), but this behavior jest w fact part of '
                 'the data\n'
                 '   model.\n'
                 '\n'
                 'object.__neg__(self)\n'
                 'object.__pos__(self)\n'
                 'object.__abs__(self)\n'
                 'object.__invert__(self)\n'
                 '\n'
                 '   Called to implement the unary arithmetic operations '
                 '("-", "+",\n'
                 '   "abs()" oraz "~").\n'
                 '\n'
                 'object.__complex__(self)\n'
                 'object.__int__(self)\n'
                 'object.__float__(self)\n'
                 'object.__round__(self[, n])\n'
                 '\n'
                 '   Called to implement the built-in functions "complex()", '
                 '"int()",\n'
                 '   "float()" oraz "round()".  Should zwróć a value of the '
                 'appropriate\n'
                 '   type.\n'
                 '\n'
                 'object.__index__(self)\n'
                 '\n'
                 '   Called to implement "operator.index()", oraz whenever '
                 'Python needs\n'
                 '   to losslessly convert the numeric object to an integer '
                 'object (such\n'
                 '   jako w slicing, albo w the built-in "bin()", "hex()" oraz '
                 '"oct()"\n'
                 '   functions). Presence of this method indicates that the '
                 'numeric\n'
                 '   object jest an integer type.  Must zwróć an integer.\n'
                 '\n'
                 '   Note: In order to have a coherent integer type class, '
                 'when\n'
                 '     "__index__()" jest defined "__int__()" should also be '
                 'defined, and\n'
                 '     both should zwróć the same value.\n'
                 '\n'
                 '\n'
                 'With Statement Context Managers\n'
                 '===============================\n'
                 '\n'
                 'A *context manager* jest an object that defines the runtime '
                 'context to\n'
                 'be established when executing a "with" statement. The '
                 'context manager\n'
                 'handles the entry into, oraz the exit from, the desired '
                 'runtime context\n'
                 'dla the execution of the block of code.  Context managers '
                 'are normally\n'
                 'invoked using the "with" statement (described w section '
                 '*The with\n'
                 'statement*), but can also be used by directly invoking '
                 'their methods.\n'
                 '\n'
                 'Typical uses of context managers include saving oraz '
                 'restoring various\n'
                 'kinds of global state, locking oraz unlocking resources, '
                 'closing opened\n'
                 'files, etc.\n'
                 '\n'
                 'For more information on context managers, see *Context '
                 'Manager Types*.\n'
                 '\n'
                 'object.__enter__(self)\n'
                 '\n'
                 '   Enter the runtime context related to this object. The '
                 '"with"\n'
                 "   statement will bind this method's zwróć value to the "
                 'target(s)\n'
                 '   specified w the "as" clause of the statement, jeżeli any.\n'
                 '\n'
                 'object.__exit__(self, exc_type, exc_value, traceback)\n'
                 '\n'
                 '   Exit the runtime context related to this object. The '
                 'parameters\n'
                 '   describe the exception that caused the context to be '
                 'exited. If the\n'
                 '   context was exited without an exception, all three '
                 'arguments will\n'
                 '   be "Nic".\n'
                 '\n'
                 '   If an exception jest supplied, oraz the method wishes to '
                 'suppress the\n'
                 '   exception (i.e., prevent it z being propagated), it '
                 'should\n'
                 '   zwróć a true value. Otherwise, the exception will be '
                 'processed\n'
                 '   normally upon exit z this method.\n'
                 '\n'
                 '   Note that "__exit__()" methods should nie reraise the '
                 'passed-in\n'
                 "   exception; this jest the caller's responsibility.\n"
                 '\n'
                 'See also: **PEP 0343** - The "with" statement\n'
                 '\n'
                 '     The specification, background, oraz examples dla the '
                 'Python "with"\n'
                 '     statement.\n'
                 '\n'
                 '\n'
                 'Special method lookup\n'
                 '=====================\n'
                 '\n'
                 'For custom classes, implicit invocations of special '
                 'methods are only\n'
                 "guaranteed to work correctly jeżeli defined on an object's "
                 'type, nie in\n'
                 "the object's instance dictionary.  That behaviour jest the "
                 'reason why\n'
                 'the following code podnieśs an exception:\n'
                 '\n'
                 '   >>> klasa C:\n'
                 '   ...     dalej\n'
                 '   ...\n'
                 '   >>> c = C()\n'
                 '   >>> c.__len__ = lambda: 5\n'
                 '   >>> len(c)\n'
                 '   Traceback (most recent call last):\n'
                 '     File "<stdin>", line 1, w <module>\n'
                 "   TypeError: object of type 'C' has no len()\n"
                 '\n'
                 'The rationale behind this behaviour lies przy a number of '
                 'special\n'
                 'methods such jako "__hash__()" oraz "__repr__()" that are '
                 'implemented by\n'
                 'all objects, including type objects. If the implicit '
                 'lookup of these\n'
                 'methods used the conventional lookup process, they would '
                 'fail when\n'
                 'invoked on the type object itself:\n'
                 '\n'
                 '   >>> 1 .__hash__() == hash(1)\n'
                 '   Prawda\n'
                 '   >>> int.__hash__() == hash(int)\n'
                 '   Traceback (most recent call last):\n'
                 '     File "<stdin>", line 1, w <module>\n'
                 "   TypeError: descriptor '__hash__' of 'int' object needs "
                 'an argument\n'
                 '\n'
                 'Incorrectly attempting to invoke an unbound method of a '
                 'class w this\n'
                 "way jest sometimes referred to jako 'metaclass confusion', oraz "
                 'is avoided\n'
                 'by bypassing the instance when looking up special '
                 'methods:\n'
                 '\n'
                 '   >>> type(1).__hash__(1) == hash(1)\n'
                 '   Prawda\n'
                 '   >>> type(int).__hash__(int) == hash(int)\n'
                 '   Prawda\n'
                 '\n'
                 'In addition to bypassing any instance attributes w the '
                 'interest of\n'
                 'correctness, implicit special method lookup generally also '
                 'bypasses\n'
                 'the "__getattribute__()" method even of the object\'s '
                 'metaclass:\n'
                 '\n'
                 '   >>> klasa Meta(type):\n'
                 '   ...     def __getattribute__(*args):\n'
                 '   ...         print("Metaclass getattribute invoked")\n'
                 '   ...         zwróć type.__getattribute__(*args)\n'
                 '   ...\n'
                 '   >>> klasa C(object, metaclass=Meta):\n'
                 '   ...     def __len__(self):\n'
                 '   ...         zwróć 10\n'
                 '   ...     def __getattribute__(*args):\n'
                 '   ...         print("Class getattribute invoked")\n'
                 '   ...         zwróć object.__getattribute__(*args)\n'
                 '   ...\n'
                 '   >>> c = C()\n'
                 '   >>> c.__len__()                 # Explicit lookup via '
                 'instance\n'
                 '   Class getattribute invoked\n'
                 '   10\n'
                 '   >>> type(c).__len__(c)          # Explicit lookup via '
                 'type\n'
                 '   Metaclass getattribute invoked\n'
                 '   10\n'
                 '   >>> len(c)                      # Implicit lookup\n'
                 '   10\n'
                 '\n'
                 'Bypassing the "__getattribute__()" machinery w this '
                 'fashion provides\n'
                 'significant scope dla speed optimisations within the '
                 'interpreter, at\n'
                 'the cost of some flexibility w the handling of special '
                 'methods (the\n'
                 'special method *must* be set on the klasa object itself w '
                 'order to be\n'
                 'consistently invoked by the interpreter).\n',
 'string-methods': '\n'
                   'String Methods\n'
                   '**************\n'
                   '\n'
                   'Strings implement all of the *common* sequence '
                   'operations, along with\n'
                   'the additional methods described below.\n'
                   '\n'
                   'Strings also support two styles of string formatting, '
                   'one providing a\n'
                   'large degree of flexibility oraz customization (see '
                   '"str.format()",\n'
                   '*Format String Syntax* oraz *String Formatting*) oraz the '
                   'other based on\n'
                   'C "printf" style formatting that handles a narrower '
                   'range of types and\n'
                   'is slightly harder to use correctly, but jest often faster '
                   'dla the cases\n'
                   'it can handle (*printf-style String Formatting*).\n'
                   '\n'
                   'The *Text Processing Services* section of the standard '
                   'library covers\n'
                   'a number of other modules that provide various text '
                   'related utilities\n'
                   '(including regular expression support w the "re" '
                   'module).\n'
                   '\n'
                   'str.capitalize()\n'
                   '\n'
                   '   Return a copy of the string przy its first character '
                   'capitalized\n'
                   '   oraz the rest lowercased.\n'
                   '\n'
                   'str.casefold()\n'
                   '\n'
                   '   Return a casefolded copy of the string. Casefolded '
                   'strings may be\n'
                   '   used dla caseless matching.\n'
                   '\n'
                   '   Casefolding jest similar to lowercasing but more '
                   'aggressive because\n'
                   '   it jest intended to remove all case distinctions w a '
                   'string. For\n'
                   '   example, the German lowercase letter "\'ß\'" jest '
                   'equivalent to ""ss"".\n'
                   '   Since it jest already lowercase, "lower()" would do '
                   'nothing to "\'ß\'";\n'
                   '   "casefold()" converts it to ""ss"".\n'
                   '\n'
                   '   The casefolding algorithm jest described w section '
                   '3.13 of the\n'
                   '   Unicode Standard.\n'
                   '\n'
                   '   New w version 3.3.\n'
                   '\n'
                   'str.center(width[, fillchar])\n'
                   '\n'
                   '   Return centered w a string of length *width*. '
                   'Padding jest done\n'
                   '   using the specified *fillchar* (default jest an ASCII '
                   'space). The\n'
                   '   original string jest returned jeżeli *width* jest less than '
                   'or equal to\n'
                   '   "len(s)".\n'
                   '\n'
                   'str.count(sub[, start[, end]])\n'
                   '\n'
                   '   Return the number of non-overlapping occurrences of '
                   'substring *sub*\n'
                   '   w the range [*start*, *end*].  Optional arguments '
                   '*start* and\n'
                   '   *end* are interpreted jako w slice notation.\n'
                   '\n'
                   'str.encode(encoding="utf-8", errors="strict")\n'
                   '\n'
                   '   Return an encoded version of the string jako a bytes '
                   'object. Default\n'
                   '   encoding jest "\'utf-8\'". *errors* may be given to set '
                   'a different\n'
                   '   error handling scheme. The default dla *errors* jest '
                   '"\'strict\'",\n'
                   '   meaning that encoding errors podnieś a "UnicodeError". '
                   'Other possible\n'
                   '   values are "\'ignore\'", "\'replace\'", '
                   '"\'xmlcharrefreplace\'",\n'
                   '   "\'backslashreplace\'" oraz any other name registered '
                   'via\n'
                   '   "codecs.register_error()", see section *Error '
                   'Handlers*. For a list\n'
                   '   of possible encodings, see section *Standard '
                   'Encodings*.\n'
                   '\n'
                   '   Changed w version 3.1: Support dla keyword arguments '
                   'added.\n'
                   '\n'
                   'str.endswith(suffix[, start[, end]])\n'
                   '\n'
                   '   Return "Prawda" jeżeli the string ends przy the specified '
                   '*suffix*,\n'
                   '   otherwise zwróć "Nieprawda".  *suffix* can also be a '
                   'tuple of suffixes\n'
                   '   to look for.  With optional *start*, test beginning '
                   'at that\n'
                   '   position.  With optional *end*, stop comparing at '
                   'that position.\n'
                   '\n'
                   'str.expandtabs(tabsize=8)\n'
                   '\n'
                   '   Return a copy of the string where all tab characters '
                   'are replaced\n'
                   '   by one albo more spaces, depending on the current '
                   'column oraz the\n'
                   '   given tab size.  Tab positions occur every *tabsize* '
                   'characters\n'
                   '   (default jest 8, giving tab positions at columns 0, 8, '
                   '16 oraz so on).\n'
                   '   To expand the string, the current column jest set to '
                   'zero oraz the\n'
                   '   string jest examined character by character.  If the '
                   'character jest a\n'
                   '   tab ("\\t"), one albo more space characters are '
                   'inserted w the result\n'
                   '   until the current column jest equal to the next tab '
                   'position. (The\n'
                   '   tab character itself jest nie copied.)  If the '
                   'character jest a newline\n'
                   '   ("\\n") albo zwróć ("\\r"), it jest copied oraz the '
                   'current column is\n'
                   '   reset to zero.  Any other character jest copied '
                   'unchanged oraz the\n'
                   '   current column jest incremented by one regardless of '
                   'how the\n'
                   '   character jest represented when printed.\n'
                   '\n'
                   "   >>> '01\\t012\\t0123\\t01234'.expandtabs()\n"
                   "   '01      012     0123    01234'\n"
                   "   >>> '01\\t012\\t0123\\t01234'.expandtabs(4)\n"
                   "   '01  012 0123    01234'\n"
                   '\n'
                   'str.find(sub[, start[, end]])\n'
                   '\n'
                   '   Return the lowest index w the string where substring '
                   '*sub* is\n'
                   '   found, such that *sub* jest contained w the slice '
                   '"s[start:end]".\n'
                   '   Optional arguments *start* oraz *end* are interpreted '
                   'as w slice\n'
                   '   notation.  Return "-1" jeżeli *sub* jest nie found.\n'
                   '\n'
                   '   Note: The "find()" method should be used only jeżeli you '
                   'need to know\n'
                   '     the position of *sub*.  To check jeżeli *sub* jest a '
                   'substring albo not,\n'
                   '     use the "in" operator:\n'
                   '\n'
                   "        >>> 'Py' w 'Python'\n"
                   '        Prawda\n'
                   '\n'
                   'str.format(*args, **kwargs)\n'
                   '\n'
                   '   Perform a string formatting operation.  The string on '
                   'which this\n'
                   '   method jest called can contain literal text albo '
                   'replacement fields\n'
                   '   delimited by braces "{}".  Each replacement field '
                   'contains either\n'
                   '   the numeric index of a positional argument, albo the '
                   'name of a\n'
                   '   keyword argument.  Returns a copy of the string where '
                   'each\n'
                   '   replacement field jest replaced przy the string value '
                   'of the\n'
                   '   corresponding argument.\n'
                   '\n'
                   '   >>> "The sum of 1 + 2 jest {0}".format(1+2)\n'
                   "   'The sum of 1 + 2 jest 3'\n"
                   '\n'
                   '   See *Format String Syntax* dla a description of the '
                   'various\n'
                   '   formatting options that can be specified w format '
                   'strings.\n'
                   '\n'
                   'str.format_map(mapping)\n'
                   '\n'
                   '   Similar to "str.format(**mapping)", wyjąwszy that '
                   '"mapping" jest used\n'
                   '   directly oraz nie copied to a "dict".  This jest useful '
                   'jeżeli dla example\n'
                   '   "mapping" jest a dict subclass:\n'
                   '\n'
                   '   >>> klasa Default(dict):\n'
                   '   ...     def __missing__(self, key):\n'
                   '   ...         zwróć key\n'
                   '   ...\n'
                   "   >>> '{name} was born w "
                   "{country}'.format_map(Default(name='Guido'))\n"
                   "   'Guido was born w country'\n"
                   '\n'
                   '   New w version 3.2.\n'
                   '\n'
                   'str.index(sub[, start[, end]])\n'
                   '\n'
                   '   Like "find()", but podnieś "ValueError" when the '
                   'substring jest not\n'
                   '   found.\n'
                   '\n'
                   'str.isalnum()\n'
                   '\n'
                   '   Return true jeżeli all characters w the string are '
                   'alphanumeric and\n'
                   '   there jest at least one character, false otherwise.  A '
                   'character "c"\n'
                   '   jest alphanumeric jeżeli one of the following returns '
                   '"Prawda":\n'
                   '   "c.isalpha()", "c.isdecimal()", "c.isdigit()", albo '
                   '"c.isnumeric()".\n'
                   '\n'
                   'str.isalpha()\n'
                   '\n'
                   '   Return true jeżeli all characters w the string are '
                   'alphabetic and\n'
                   '   there jest at least one character, false otherwise.  '
                   'Alphabetic\n'
                   '   characters are those characters defined w the '
                   'Unicode character\n'
                   '   database jako "Letter", i.e., those przy general '
                   'category property\n'
                   '   being one of "Lm", "Lt", "Lu", "Ll", albo "Lo".  Note '
                   'that this is\n'
                   '   different z the "Alphabetic" property defined w '
                   'the Unicode\n'
                   '   Standard.\n'
                   '\n'
                   'str.isdecimal()\n'
                   '\n'
                   '   Return true jeżeli all characters w the string are '
                   'decimal characters\n'
                   '   oraz there jest at least one character, false otherwise. '
                   'Decimal\n'
                   '   characters are those z general category "Nd". This '
                   'category\n'
                   '   includes digit characters, oraz all characters that '
                   'can be used to\n'
                   '   form decimal-radix numbers, e.g. U+0660, ARABIC-INDIC '
                   'DIGIT ZERO.\n'
                   '\n'
                   'str.isdigit()\n'
                   '\n'
                   '   Return true jeżeli all characters w the string are '
                   'digits oraz there is\n'
                   '   at least one character, false otherwise.  Digits '
                   'include decimal\n'
                   '   characters oraz digits that need special handling, '
                   'such jako the\n'
                   '   compatibility superscript digits.  Formally, a digit '
                   'is a character\n'
                   '   that has the property value Numeric_Type=Digit or\n'
                   '   Numeric_Type=Decimal.\n'
                   '\n'
                   'str.isidentifier()\n'
                   '\n'
                   '   Return true jeżeli the string jest a valid identifier '
                   'according to the\n'
                   '   language definition, section *Identifiers oraz '
                   'keywords*.\n'
                   '\n'
                   '   Use "keyword.iskeyword()" to test dla reserved '
                   'identifiers such as\n'
                   '   "def" oraz "class".\n'
                   '\n'
                   'str.islower()\n'
                   '\n'
                   '   Return true jeżeli all cased characters [4] w the string '
                   'are lowercase\n'
                   '   oraz there jest at least one cased character, false '
                   'otherwise.\n'
                   '\n'
                   'str.isnumeric()\n'
                   '\n'
                   '   Return true jeżeli all characters w the string are '
                   'numeric characters,\n'
                   '   oraz there jest at least one character, false otherwise. '
                   'Numeric\n'
                   '   characters include digit characters, oraz all '
                   'characters that have\n'
                   '   the Unicode numeric value property, e.g. U+2155, '
                   'VULGAR FRACTION\n'
                   '   ONE FIFTH.  Formally, numeric characters are those '
                   'przy the\n'
                   '   property value Numeric_Type=Digit, '
                   'Numeric_Type=Decimal or\n'
                   '   Numeric_Type=Numeric.\n'
                   '\n'
                   'str.isprintable()\n'
                   '\n'
                   '   Return true jeżeli all characters w the string are '
                   'printable albo the\n'
                   '   string jest empty, false otherwise.  Nonprintable '
                   'characters are\n'
                   '   those characters defined w the Unicode character '
                   'database as\n'
                   '   "Other" albo "Separator", excepting the ASCII space '
                   '(0x20) which is\n'
                   '   considered printable.  (Note that printable '
                   'characters w this\n'
                   '   context are those which should nie be escaped when '
                   '"repr()" is\n'
                   '   invoked on a string.  It has no bearing on the '
                   'handling of strings\n'
                   '   written to "sys.stdout" albo "sys.stderr".)\n'
                   '\n'
                   'str.isspace()\n'
                   '\n'
                   '   Return true jeżeli there are only whitespace characters '
                   'in the string\n'
                   '   oraz there jest at least one character, false '
                   'otherwise.  Whitespace\n'
                   '   characters  are those characters defined w the '
                   'Unicode character\n'
                   '   database jako "Other" albo "Separator" oraz those przy '
                   'bidirectional\n'
                   '   property being one of "WS", "B", albo "S".\n'
                   '\n'
                   'str.istitle()\n'
                   '\n'
                   '   Return true jeżeli the string jest a titlecased string oraz '
                   'there jest at\n'
                   '   least one character, dla example uppercase characters '
                   'may only\n'
                   '   follow uncased characters oraz lowercase characters '
                   'only cased ones.\n'
                   '   Return false otherwise.\n'
                   '\n'
                   'str.isupper()\n'
                   '\n'
                   '   Return true jeżeli all cased characters [4] w the string '
                   'are uppercase\n'
                   '   oraz there jest at least one cased character, false '
                   'otherwise.\n'
                   '\n'
                   'str.join(iterable)\n'
                   '\n'
                   '   Return a string which jest the concatenation of the '
                   'strings w the\n'
                   '   *iterable* *iterable*.  A "TypeError" will be podnieśd '
                   'jeżeli there are\n'
                   '   any non-string values w *iterable*, including '
                   '"bytes" objects.\n'
                   '   The separator between elements jest the string '
                   'providing this method.\n'
                   '\n'
                   'str.ljust(width[, fillchar])\n'
                   '\n'
                   '   Return the string left justified w a string of '
                   'length *width*.\n'
                   '   Padding jest done using the specified *fillchar* '
                   '(default jest an ASCII\n'
                   '   space). The original string jest returned jeżeli *width* jest '
                   'less than or\n'
                   '   equal to "len(s)".\n'
                   '\n'
                   'str.lower()\n'
                   '\n'
                   '   Return a copy of the string przy all the cased '
                   'characters [4]\n'
                   '   converted to lowercase.\n'
                   '\n'
                   '   The lowercasing algorithm used jest described w '
                   'section 3.13 of the\n'
                   '   Unicode Standard.\n'
                   '\n'
                   'str.lstrip([chars])\n'
                   '\n'
                   '   Return a copy of the string przy leading characters '
                   'removed.  The\n'
                   '   *chars* argument jest a string specifying the set of '
                   'characters to be\n'
                   '   removed.  If omitted albo "Nic", the *chars* argument '
                   'defaults to\n'
                   '   removing whitespace.  The *chars* argument jest nie a '
                   'prefix; rather,\n'
                   '   all combinations of its values are stripped:\n'
                   '\n'
                   "      >>> '   spacious   '.lstrip()\n"
                   "      'spacious   '\n"
                   "      >>> 'www.example.com'.lstrip('cmowz.')\n"
                   "      'example.com'\n"
                   '\n'
                   'static str.maketrans(x[, y[, z]])\n'
                   '\n'
                   '   This static method returns a translation table usable '
                   'for\n'
                   '   "str.translate()".\n'
                   '\n'
                   '   If there jest only one argument, it must be a '
                   'dictionary mapping\n'
                   '   Unicode ordinals (integers) albo characters (strings of '
                   'length 1) to\n'
                   '   Unicode ordinals, strings (of arbitrary lengths) albo '
                   'Nic.\n'
                   '   Character keys will then be converted to ordinals.\n'
                   '\n'
                   '   If there are two arguments, they must be strings of '
                   'equal length,\n'
                   '   oraz w the resulting dictionary, each character w x '
                   'will be mapped\n'
                   '   to the character at the same position w y.  If there '
                   'is a third\n'
                   '   argument, it must be a string, whose characters will '
                   'be mapped to\n'
                   '   Nic w the result.\n'
                   '\n'
                   'str.partition(sep)\n'
                   '\n'
                   '   Split the string at the first occurrence of *sep*, '
                   'and zwróć a\n'
                   '   3-tuple containing the part before the separator, the '
                   'separator\n'
                   '   itself, oraz the part after the separator.  If the '
                   'separator jest not\n'
                   '   found, zwróć a 3-tuple containing the string itself, '
                   'followed by\n'
                   '   two empty strings.\n'
                   '\n'
                   'str.replace(old, new[, count])\n'
                   '\n'
                   '   Return a copy of the string przy all occurrences of '
                   'substring *old*\n'
                   '   replaced by *new*.  If the optional argument *count* '
                   'is given, only\n'
                   '   the first *count* occurrences are replaced.\n'
                   '\n'
                   'str.rfind(sub[, start[, end]])\n'
                   '\n'
                   '   Return the highest index w the string where '
                   'substring *sub* is\n'
                   '   found, such that *sub* jest contained within '
                   '"s[start:end]".\n'
                   '   Optional arguments *start* oraz *end* are interpreted '
                   'as w slice\n'
                   '   notation.  Return "-1" on failure.\n'
                   '\n'
                   'str.rindex(sub[, start[, end]])\n'
                   '\n'
                   '   Like "rfind()" but podnieśs "ValueError" when the '
                   'substring *sub* is\n'
                   '   nie found.\n'
                   '\n'
                   'str.rjust(width[, fillchar])\n'
                   '\n'
                   '   Return the string right justified w a string of '
                   'length *width*.\n'
                   '   Padding jest done using the specified *fillchar* '
                   '(default jest an ASCII\n'
                   '   space). The original string jest returned jeżeli *width* jest '
                   'less than or\n'
                   '   equal to "len(s)".\n'
                   '\n'
                   'str.rpartition(sep)\n'
                   '\n'
                   '   Split the string at the last occurrence of *sep*, oraz '
                   'return a\n'
                   '   3-tuple containing the part before the separator, the '
                   'separator\n'
                   '   itself, oraz the part after the separator.  If the '
                   'separator jest not\n'
                   '   found, zwróć a 3-tuple containing two empty strings, '
                   'followed by\n'
                   '   the string itself.\n'
                   '\n'
                   'str.rsplit(sep=Nic, maxsplit=-1)\n'
                   '\n'
                   '   Return a list of the words w the string, using *sep* '
                   'as the\n'
                   '   delimiter string. If *maxsplit* jest given, at most '
                   '*maxsplit* splits\n'
                   '   are done, the *rightmost* ones.  If *sep* jest nie '
                   'specified or\n'
                   '   "Nic", any whitespace string jest a separator.  Except '
                   'dla splitting\n'
                   '   z the right, "rsplit()" behaves like "split()" '
                   'which is\n'
                   '   described w detail below.\n'
                   '\n'
                   'str.rstrip([chars])\n'
                   '\n'
                   '   Return a copy of the string przy trailing characters '
                   'removed.  The\n'
                   '   *chars* argument jest a string specifying the set of '
                   'characters to be\n'
                   '   removed.  If omitted albo "Nic", the *chars* argument '
                   'defaults to\n'
                   '   removing whitespace.  The *chars* argument jest nie a '
                   'suffix; rather,\n'
                   '   all combinations of its values are stripped:\n'
                   '\n'
                   "      >>> '   spacious   '.rstrip()\n"
                   "      '   spacious'\n"
                   "      >>> 'mississippi'.rstrip('ipz')\n"
                   "      'mississ'\n"
                   '\n'
                   'str.split(sep=Nic, maxsplit=-1)\n'
                   '\n'
                   '   Return a list of the words w the string, using *sep* '
                   'as the\n'
                   '   delimiter string.  If *maxsplit* jest given, at most '
                   '*maxsplit*\n'
                   '   splits are done (thus, the list will have at most '
                   '"maxsplit+1"\n'
                   '   elements).  If *maxsplit* jest nie specified albo "-1", '
                   'then there is\n'
                   '   no limit on the number of splits (all possible splits '
                   'are made).\n'
                   '\n'
                   '   If *sep* jest given, consecutive delimiters are nie '
                   'grouped together\n'
                   '   oraz are deemed to delimit empty strings (dla '
                   'example,\n'
                   '   "\'1,,2\'.split(\',\')" returns "[\'1\', \'\', '
                   '\'2\']").  The *sep* argument\n'
                   '   may consist of multiple characters (dla example,\n'
                   '   "\'1<>2<>3\'.split(\'<>\')" returns "[\'1\', \'2\', '
                   '\'3\']"). Splitting an\n'
                   '   empty string przy a specified separator returns '
                   '"[\'\']".\n'
                   '\n'
                   '   For example:\n'
                   '\n'
                   "      >>> '1,2,3'.split(',')\n"
                   "      ['1', '2', '3']\n"
                   "      >>> '1,2,3'.split(',', maxsplit=1)\n"
                   "      ['1', '2,3']\n"
                   "      >>> '1,2,,3,'.split(',')\n"
                   "      ['1', '2', '', '3', '']\n"
                   '\n'
                   '   If *sep* jest nie specified albo jest "Nic", a different '
                   'splitting\n'
                   '   algorithm jest applied: runs of consecutive whitespace '
                   'are regarded\n'
                   '   jako a single separator, oraz the result will contain no '
                   'empty strings\n'
                   '   at the start albo end jeżeli the string has leading albo '
                   'trailing\n'
                   '   whitespace.  Consequently, splitting an empty string '
                   'or a string\n'
                   '   consisting of just whitespace przy a "Nic" separator '
                   'returns "[]".\n'
                   '\n'
                   '   For example:\n'
                   '\n'
                   "      >>> '1 2 3'.split()\n"
                   "      ['1', '2', '3']\n"
                   "      >>> '1 2 3'.split(maxsplit=1)\n"
                   "      ['1', '2 3']\n"
                   "      >>> '   1   2   3   '.split()\n"
                   "      ['1', '2', '3']\n"
                   '\n'
                   'str.splitlines([keepends])\n'
                   '\n'
                   '   Return a list of the lines w the string, przerwijing at '
                   'line\n'
                   '   boundaries.  Line przerwijs are nie included w the '
                   'resulting list\n'
                   '   unless *keepends* jest given oraz true.\n'
                   '\n'
                   '   This method splits on the following line boundaries.  '
                   'In\n'
                   '   particular, the boundaries are a superset of '
                   '*universal newlines*.\n'
                   '\n'
                   '   '
                   '+-------------------------+-------------------------------+\n'
                   '   | Representation          | '
                   'Description                   |\n'
                   '   '
                   '+=========================+===============================+\n'
                   '   | "\\n"                    | Line '
                   'Feed                     |\n'
                   '   '
                   '+-------------------------+-------------------------------+\n'
                   '   | "\\r"                    | Carriage '
                   'Return               |\n'
                   '   '
                   '+-------------------------+-------------------------------+\n'
                   '   | "\\r\\n"                  | Carriage Return + Line '
                   'Feed   |\n'
                   '   '
                   '+-------------------------+-------------------------------+\n'
                   '   | "\\v" albo "\\x0b"          | Line '
                   'Tabulation               |\n'
                   '   '
                   '+-------------------------+-------------------------------+\n'
                   '   | "\\f" albo "\\x0c"          | Form '
                   'Feed                     |\n'
                   '   '
                   '+-------------------------+-------------------------------+\n'
                   '   | "\\x1c"                  | File '
                   'Separator                |\n'
                   '   '
                   '+-------------------------+-------------------------------+\n'
                   '   | "\\x1d"                  | Group '
                   'Separator               |\n'
                   '   '
                   '+-------------------------+-------------------------------+\n'
                   '   | "\\x1e"                  | Record '
                   'Separator              |\n'
                   '   '
                   '+-------------------------+-------------------------------+\n'
                   '   | "\\x85"                  | Next Line (C1 Control '
                   'Code)   |\n'
                   '   '
                   '+-------------------------+-------------------------------+\n'
                   '   | "\\u2028"                | Line '
                   'Separator                |\n'
                   '   '
                   '+-------------------------+-------------------------------+\n'
                   '   | "\\u2029"                | Paragraph '
                   'Separator           |\n'
                   '   '
                   '+-------------------------+-------------------------------+\n'
                   '\n'
                   '   Changed w version 3.2: "\\v" oraz "\\f" added to list '
                   'of line\n'
                   '   boundaries.\n'
                   '\n'
                   '   For example:\n'
                   '\n'
                   "      >>> 'ab c\\n\\nde fg\\rkl\\r\\n'.splitlines()\n"
                   "      ['ab c', '', 'de fg', 'kl']\n"
                   "      >>> 'ab c\\n\\nde "
                   "fg\\rkl\\r\\n'.splitlines(keepends=Prawda)\n"
                   "      ['ab c\\n', '\\n', 'de fg\\r', 'kl\\r\\n']\n"
                   '\n'
                   '   Unlike "split()" when a delimiter string *sep* jest '
                   'given, this\n'
                   '   method returns an empty list dla the empty string, '
                   'and a terminal\n'
                   '   line przerwij does nie result w an extra line:\n'
                   '\n'
                   '      >>> "".splitlines()\n'
                   '      []\n'
                   '      >>> "One line\\n".splitlines()\n'
                   "      ['One line']\n"
                   '\n'
                   '   For comparison, "split(\'\\n\')" gives:\n'
                   '\n'
                   "      >>> ''.split('\\n')\n"
                   "      ['']\n"
                   "      >>> 'Two lines\\n'.split('\\n')\n"
                   "      ['Two lines', '']\n"
                   '\n'
                   'str.startswith(prefix[, start[, end]])\n'
                   '\n'
                   '   Return "Prawda" jeżeli string starts przy the *prefix*, '
                   'otherwise return\n'
                   '   "Nieprawda". *prefix* can also be a tuple of prefixes to '
                   'look for.\n'
                   '   With optional *start*, test string beginning at that '
                   'position.\n'
                   '   With optional *end*, stop comparing string at that '
                   'position.\n'
                   '\n'
                   'str.strip([chars])\n'
                   '\n'
                   '   Return a copy of the string przy the leading oraz '
                   'trailing\n'
                   '   characters removed. The *chars* argument jest a string '
                   'specifying the\n'
                   '   set of characters to be removed. If omitted albo '
                   '"Nic", the *chars*\n'
                   '   argument defaults to removing whitespace. The *chars* '
                   'argument is\n'
                   '   nie a prefix albo suffix; rather, all combinations of '
                   'its values are\n'
                   '   stripped:\n'
                   '\n'
                   "      >>> '   spacious   '.strip()\n"
                   "      'spacious'\n"
                   "      >>> 'www.example.com'.strip('cmowz.')\n"
                   "      'example'\n"
                   '\n'
                   '   The outermost leading oraz trailing *chars* argument '
                   'values are\n'
                   '   stripped z the string. Characters are removed z '
                   'the leading\n'
                   '   end until reaching a string character that jest nie '
                   'contained w the\n'
                   '   set of characters w *chars*. A similar action takes '
                   'place on the\n'
                   '   trailing end. For example:\n'
                   '\n'
                   "      >>> comment_string = '#....... Section 3.2.1 Issue "
                   "#32 .......'\n"
                   "      >>> comment_string.strip('.#! ')\n"
                   "      'Section 3.2.1 Issue #32'\n"
                   '\n'
                   'str.swapcase()\n'
                   '\n'
                   '   Return a copy of the string przy uppercase characters '
                   'converted to\n'
                   '   lowercase oraz vice versa. Note that it jest nie '
                   'necessarily true that\n'
                   '   "s.swapcase().swapcase() == s".\n'
                   '\n'
                   'str.title()\n'
                   '\n'
                   '   Return a titlecased version of the string where words '
                   'start przy an\n'
                   '   uppercase character oraz the remaining characters are '
                   'lowercase.\n'
                   '\n'
                   '   For example:\n'
                   '\n'
                   "      >>> 'Hello world'.title()\n"
                   "      'Hello World'\n"
                   '\n'
                   '   The algorithm uses a simple language-independent '
                   'definition of a\n'
                   '   word jako groups of consecutive letters.  The '
                   'definition works in\n'
                   '   many contexts but it means that apostrophes w '
                   'contractions and\n'
                   '   possessives form word boundaries, which may nie be '
                   'the desired\n'
                   '   result:\n'
                   '\n'
                   '      >>> "they\'re bill\'s friends z the '
                   'UK".title()\n'
                   '      "They\'Re Bill\'S Friends From The Uk"\n'
                   '\n'
                   '   A workaround dla apostrophes can be constructed using '
                   'regular\n'
                   '   expressions:\n'
                   '\n'
                   '      >>> zaimportuj re\n'
                   '      >>> def titlecase(s):\n'
                   '      ...     zwróć re.sub(r"[A-Za-z]+(\'[A-Za-z]+)?",\n'
                   '      ...                   lambda mo: '
                   'mo.group(0)[0].upper() +\n'
                   '      ...                              '
                   'mo.group(0)[1:].lower(),\n'
                   '      ...                   s)\n'
                   '      ...\n'
                   '      >>> titlecase("they\'re bill\'s friends.")\n'
                   '      "They\'re Bill\'s Friends."\n'
                   '\n'
                   'str.translate(table)\n'
                   '\n'
                   '   Return a copy of the string w which each character '
                   'has been mapped\n'
                   '   through the given translation table.  The table must '
                   'be an object\n'
                   '   that implements indexing via "__getitem__()", '
                   'typically a *mapping*\n'
                   '   albo *sequence*.  When indexed by a Unicode ordinal (an '
                   'integer), the\n'
                   '   table object can do any of the following: zwróć a '
                   'Unicode ordinal\n'
                   '   albo a string, to map the character to one albo more '
                   'other characters;\n'
                   '   zwróć "Nic", to delete the character z the '
                   'return string; or\n'
                   '   podnieś a "LookupError" exception, to map the character '
                   'to itself.\n'
                   '\n'
                   '   You can use "str.maketrans()" to create a translation '
                   'map from\n'
                   '   character-to-character mappings w different '
                   'formats.\n'
                   '\n'
                   '   See also the "codecs" module dla a more flexible '
                   'approach to custom\n'
                   '   character mappings.\n'
                   '\n'
                   'str.upper()\n'
                   '\n'
                   '   Return a copy of the string przy all the cased '
                   'characters [4]\n'
                   '   converted to uppercase.  Note that '
                   '"str.upper().isupper()" might be\n'
                   '   "Nieprawda" jeżeli "s" contains uncased characters albo jeżeli the '
                   'Unicode\n'
                   '   category of the resulting character(s) jest nie "Lu" '
                   '(Letter,\n'
                   '   uppercase), but e.g. "Lt" (Letter, titlecase).\n'
                   '\n'
                   '   The uppercasing algorithm used jest described w '
                   'section 3.13 of the\n'
                   '   Unicode Standard.\n'
                   '\n'
                   'str.zfill(width)\n'
                   '\n'
                   '   Return a copy of the string left filled przy ASCII '
                   '"\'0\'" digits to\n'
                   '   make a string of length *width*. A leading sign '
                   'prefix\n'
                   '   ("\'+\'"/"\'-\'") jest handled by inserting the padding '
                   '*after* the sign\n'
                   '   character rather than before. The original string jest '
                   'returned if\n'
                   '   *width* jest less than albo equal to "len(s)".\n'
                   '\n'
                   '   For example:\n'
                   '\n'
                   '      >>> "42".zfill(5)\n'
                   "      '00042'\n"
                   '      >>> "-42".zfill(5)\n'
                   "      '-0042'\n",
 'strings': '\n'
            'String oraz Bytes literals\n'
            '*************************\n'
            '\n'
            'String literals are described by the following lexical '
            'definitions:\n'
            '\n'
            '   stringliteral   ::= [stringprefix](shortstring | '
            'longstring)\n'
            '   stringprefix    ::= "r" | "u" | "R" | "U"\n'
            '   shortstring     ::= "\'" shortstringitem* "\'" | \'"\' '
            'shortstringitem* \'"\'\n'
            '   longstring      ::= "\'\'\'" longstringitem* "\'\'\'" | '
            '\'"""\' longstringitem* \'"""\'\n'
            '   shortstringitem ::= shortstringchar | stringescapeseq\n'
            '   longstringitem  ::= longstringchar | stringescapeseq\n'
            '   shortstringchar ::= <any source character wyjąwszy "\\" albo '
            'newline albo the quote>\n'
            '   longstringchar  ::= <any source character wyjąwszy "\\">\n'
            '   stringescapeseq ::= "\\" <any source character>\n'
            '\n'
            '   bytesliteral   ::= bytesprefix(shortbytes | longbytes)\n'
            '   bytesprefix    ::= "b" | "B" | "br" | "Br" | "bR" | "BR" | '
            '"rb" | "rB" | "Rb" | "RB"\n'
            '   shortbytes     ::= "\'" shortbytesitem* "\'" | \'"\' '
            'shortbytesitem* \'"\'\n'
            '   longbytes      ::= "\'\'\'" longbytesitem* "\'\'\'" | '
            '\'"""\' longbytesitem* \'"""\'\n'
            '   shortbytesitem ::= shortbyteschar | bytesescapeseq\n'
            '   longbytesitem  ::= longbyteschar | bytesescapeseq\n'
            '   shortbyteschar ::= <any ASCII character wyjąwszy "\\" albo '
            'newline albo the quote>\n'
            '   longbyteschar  ::= <any ASCII character wyjąwszy "\\">\n'
            '   bytesescapeseq ::= "\\" <any ASCII character>\n'
            '\n'
            'One syntactic restriction nie indicated by these productions jest '
            'that\n'
            'whitespace jest nie allowed between the "stringprefix" albo '
            '"bytesprefix"\n'
            'and the rest of the literal. The source character set jest '
            'defined by\n'
            'the encoding declaration; it jest UTF-8 jeżeli no encoding '
            'declaration is\n'
            'given w the source file; see section *Encoding declarations*.\n'
            '\n'
            'In plain English: Both types of literals can be enclosed w '
            'matching\n'
            'single quotes ("\'") albo double quotes (""").  They can also be '
            'enclosed\n'
            'in matching groups of three single albo double quotes (these are\n'
            'generally referred to jako *triple-quoted strings*).  The '
            'backslash\n'
            '("\\") character jest used to escape characters that otherwise '
            'have a\n'
            'special meaning, such jako newline, backslash itself, albo the '
            'quote\n'
            'character.\n'
            '\n'
            'Bytes literals are always prefixed przy "\'b\'" albo "\'B\'"; '
            'they produce\n'
            'an instance of the "bytes" type instead of the "str" type.  '
            'They may\n'
            'only contain ASCII characters; bytes przy a numeric value of '
            '128 or\n'
            'greater must be expressed przy escapes.\n'
            '\n'
            'As of Python 3.3 it jest possible again to prefix string literals '
            'przy a\n'
            '"u" prefix to simplify maintenance of dual 2.x oraz 3.x '
            'codebases.\n'
            '\n'
            'Both string oraz bytes literals may optionally be prefixed przy '
            'a\n'
            'letter "\'r\'" albo "\'R\'"; such strings are called *raw '
            'strings* oraz treat\n'
            'backslashes jako literal characters.  As a result, w string '
            'literals,\n'
            '"\'\\U\'" oraz "\'\\u\'" escapes w raw strings are nie treated '
            'specially.\n'
            "Given that Python 2.x's raw unicode literals behave differently "
            'than\n'
            'Python 3.x\'s the "\'ur\'" syntax jest nie supported.\n'
            '\n'
            'New w version 3.3: The "\'rb\'" prefix of raw bytes literals '
            'has been\n'
            'added jako a synonym of "\'br\'".\n'
            '\n'
            'New w version 3.3: Support dla the unicode legacy literal\n'
            '("u\'value\'") was reintroduced to simplify the maintenance of '
            'dual\n'
            'Python 2.x oraz 3.x codebases. See **PEP 414** dla more '
            'information.\n'
            '\n'
            'In triple-quoted literals, unescaped newlines oraz quotes are '
            'allowed\n'
            '(and are retained), wyjąwszy that three unescaped quotes w a '
            'row\n'
            'terminate the literal.  (A "quote" jest the character used to '
            'open the\n'
            'literal, i.e. either "\'" albo """.)\n'
            '\n'
            'Unless an "\'r\'" albo "\'R\'" prefix jest present, escape '
            'sequences w string\n'
            'and bytes literals are interpreted according to rules similar '
            'to those\n'
            'used by Standard C.  The recognized escape sequences are:\n'
            '\n'
            '+-------------------+-----------------------------------+---------+\n'
            '| Escape Sequence   | Meaning                           | '
            'Notes   |\n'
            '+===================+===================================+=========+\n'
            '| "\\newline"        | Backslash oraz newline ignored     '
            '|         |\n'
            '+-------------------+-----------------------------------+---------+\n'
            '| "\\\\"              | Backslash ("\\")                   '
            '|         |\n'
            '+-------------------+-----------------------------------+---------+\n'
            '| "\\\'"              | Single quote ("\'")                '
            '|         |\n'
            '+-------------------+-----------------------------------+---------+\n'
            '| "\\""              | Double quote (""")                '
            '|         |\n'
            '+-------------------+-----------------------------------+---------+\n'
            '| "\\a"              | ASCII Bell (BEL)                  '
            '|         |\n'
            '+-------------------+-----------------------------------+---------+\n'
            '| "\\b"              | ASCII Backspace (BS)              '
            '|         |\n'
            '+-------------------+-----------------------------------+---------+\n'
            '| "\\f"              | ASCII Formfeed (FF)               '
            '|         |\n'
            '+-------------------+-----------------------------------+---------+\n'
            '| "\\n"              | ASCII Linefeed (LF)               '
            '|         |\n'
            '+-------------------+-----------------------------------+---------+\n'
            '| "\\r"              | ASCII Carriage Return (CR)        '
            '|         |\n'
            '+-------------------+-----------------------------------+---------+\n'
            '| "\\t"              | ASCII Horizontal Tab (TAB)        '
            '|         |\n'
            '+-------------------+-----------------------------------+---------+\n'
            '| "\\v"              | ASCII Vertical Tab (VT)           '
            '|         |\n'
            '+-------------------+-----------------------------------+---------+\n'
            '| "\\ooo"            | Character przy octal value *ooo*  | '
            '(1,3)   |\n'
            '+-------------------+-----------------------------------+---------+\n'
            '| "\\xhh"            | Character przy hex value *hh*     | '
            '(2,3)   |\n'
            '+-------------------+-----------------------------------+---------+\n'
            '\n'
            'Escape sequences only recognized w string literals are:\n'
            '\n'
            '+-------------------+-----------------------------------+---------+\n'
            '| Escape Sequence   | Meaning                           | '
            'Notes   |\n'
            '+===================+===================================+=========+\n'
            '| "\\N{name}"        | Character named *name* w the     | '
            '(4)     |\n'
            '|                   | Unicode database                  '
            '|         |\n'
            '+-------------------+-----------------------------------+---------+\n'
            '| "\\uxxxx"          | Character przy 16-bit hex value   | '
            '(5)     |\n'
            '|                   | *xxxx*                            '
            '|         |\n'
            '+-------------------+-----------------------------------+---------+\n'
            '| "\\Uxxxxxxxx"      | Character przy 32-bit hex value   | '
            '(6)     |\n'
            '|                   | *xxxxxxxx*                        '
            '|         |\n'
            '+-------------------+-----------------------------------+---------+\n'
            '\n'
            'Notes:\n'
            '\n'
            '1. As w Standard C, up to three octal digits are accepted.\n'
            '\n'
            '2. Unlike w Standard C, exactly two hex digits are required.\n'
            '\n'
            '3. In a bytes literal, hexadecimal oraz octal escapes denote '
            'the\n'
            '   byte przy the given value. In a string literal, these '
            'escapes\n'
            '   denote a Unicode character przy the given value.\n'
            '\n'
            '4. Changed w version 3.3: Support dla name aliases [1] has '
            'been\n'
            '   added.\n'
            '\n'
            '5. Individual code units which form parts of a surrogate pair '
            'can\n'
            '   be encoded using this escape sequence.  Exactly four hex '
            'digits are\n'
            '   required.\n'
            '\n'
            '6. Any Unicode character can be encoded this way.  Exactly '
            'eight\n'
            '   hex digits are required.\n'
            '\n'
            'Unlike Standard C, all unrecognized escape sequences are left '
            'in the\n'
            'string unchanged, i.e., *the backslash jest left w the result*.  '
            '(This\n'
            'behavior jest useful when debugging: jeżeli an escape sequence jest '
            'mistyped,\n'
            'the resulting output jest more easily recognized jako broken.)  It '
            'is also\n'
            'important to note that the escape sequences only recognized w '
            'string\n'
            'literals fall into the category of unrecognized escapes dla '
            'bytes\n'
            'literals.\n'
            '\n'
            'Even w a raw literal, quotes can be escaped przy a backslash, '
            'but the\n'
            'backslash remains w the result; dla example, "r"\\""" jest a '
            'valid\n'
            'string literal consisting of two characters: a backslash oraz a '
            'double\n'
            'quote; "r"\\"" jest nie a valid string literal (even a raw string '
            'cannot\n'
            'end w an odd number of backslashes).  Specifically, *a raw '
            'literal\n'
            'cannot end w a single backslash* (since the backslash would '
            'escape\n'
            'the following quote character).  Note also that a single '
            'backslash\n'
            'followed by a newline jest interpreted jako those two characters jako '
            'part\n'
            'of the literal, *not* jako a line continuation.\n',
 'subscriptions': '\n'
                  'Subscriptions\n'
                  '*************\n'
                  '\n'
                  'A subscription selects an item of a sequence (string, '
                  'tuple albo list)\n'
                  'or mapping (dictionary) object:\n'
                  '\n'
                  '   subscription ::= primary "[" expression_list "]"\n'
                  '\n'
                  'The primary must evaluate to an object that supports '
                  'subscription\n'
                  '(lists albo dictionaries dla example).  User-defined '
                  'objects can support\n'
                  'subscription by defining a "__getitem__()" method.\n'
                  '\n'
                  'For built-in objects, there are two types of objects that '
                  'support\n'
                  'subscription:\n'
                  '\n'
                  'If the primary jest a mapping, the expression list must '
                  'evaluate to an\n'
                  'object whose value jest one of the keys of the mapping, oraz '
                  'the\n'
                  'subscription selects the value w the mapping that '
                  'corresponds to that\n'
                  'key.  (The expression list jest a tuple wyjąwszy jeżeli it has '
                  'exactly one\n'
                  'item.)\n'
                  '\n'
                  'If the primary jest a sequence, the expression (list) must '
                  'evaluate to\n'
                  'an integer albo a slice (as discussed w the following '
                  'section).\n'
                  '\n'
                  'The formal syntax makes no special provision dla negative '
                  'indices in\n'
                  'sequences; however, built-in sequences all provide a '
                  '"__getitem__()"\n'
                  'method that interprets negative indices by adding the '
                  'length of the\n'
                  'sequence to the index (so that "x[-1]" selects the last '
                  'item of "x").\n'
                  'The resulting value must be a nonnegative integer less '
                  'than the number\n'
                  'of items w the sequence, oraz the subscription selects '
                  'the item whose\n'
                  'index jest that value (counting z zero). Since the '
                  'support for\n'
                  "negative indices oraz slicing occurs w the object's "
                  '"__getitem__()"\n'
                  'method, subclasses overriding this method will need to '
                  'explicitly add\n'
                  'that support.\n'
                  '\n'
                  "A string's items are characters.  A character jest nie a "
                  'separate data\n'
                  'type but a string of exactly one character.\n',
 'truth': '\n'
          'Truth Value Testing\n'
          '*******************\n'
          '\n'
          'Any object can be tested dla truth value, dla use w an "if" or\n'
          '"while" condition albo jako operand of the Boolean operations below. '
          'The\n'
          'following values are considered false:\n'
          '\n'
          '* "Nic"\n'
          '\n'
          '* "Nieprawda"\n'
          '\n'
          '* zero of any numeric type, dla example, "0", "0.0", "0j".\n'
          '\n'
          '* any empty sequence, dla example, "\'\'", "()", "[]".\n'
          '\n'
          '* any empty mapping, dla example, "{}".\n'
          '\n'
          '* instances of user-defined classes, jeżeli the klasa defines a\n'
          '  "__bool__()" albo "__len__()" method, when that method returns '
          'the\n'
          '  integer zero albo "bool" value "Nieprawda". [1]\n'
          '\n'
          'All other values are considered true --- so objects of many types '
          'are\n'
          'always true.\n'
          '\n'
          'Operations oraz built-in functions that have a Boolean result '
          'always\n'
          'return "0" albo "Nieprawda" dla false oraz "1" albo "Prawda" dla true, '
          'unless\n'
          'otherwise stated. (Important exception: the Boolean operations '
          '"or"\n'
          'and "and" always zwróć one of their operands.)\n',
 'try': '\n'
        'The "try" statement\n'
        '*******************\n'
        '\n'
        'The "try" statement specifies exception handlers and/or cleanup '
        'code\n'
        'dla a group of statements:\n'
        '\n'
        '   try_stmt  ::= try1_stmt | try2_stmt\n'
        '   try1_stmt ::= "try" ":" suite\n'
        '                 ("except" [expression ["as" identifier]] ":" '
        'suite)+\n'
        '                 ["inaczej" ":" suite]\n'
        '                 ["finally" ":" suite]\n'
        '   try2_stmt ::= "try" ":" suite\n'
        '                 "finally" ":" suite\n'
        '\n'
        'The "except" clause(s) specify one albo more exception handlers. When '
        'no\n'
        'exception occurs w the "try" clause, no exception handler is\n'
        'executed. When an exception occurs w the "try" suite, a search dla '
        'an\n'
        'exception handler jest started.  This search inspects the wyjąwszy '
        'clauses\n'
        'in turn until one jest found that matches the exception.  An '
        'expression-\n'
        'less wyjąwszy clause, jeżeli present, must be last; it matches any\n'
        'exception.  For an wyjąwszy clause przy an expression, that '
        'expression\n'
        'is evaluated, oraz the clause matches the exception jeżeli the '
        'resulting\n'
        'object jest "compatible" przy the exception.  An object jest '
        'compatible\n'
        'przy an exception jeżeli it jest the klasa albo a base klasa of the '
        'exception\n'
        'object albo a tuple containing an item compatible przy the '
        'exception.\n'
        '\n'
        'If no wyjąwszy clause matches the exception, the search dla an '
        'exception\n'
        'handler continues w the surrounding code oraz on the invocation '
        'stack.\n'
        '[1]\n'
        '\n'
        'If the evaluation of an expression w the header of an wyjąwszy '
        'clause\n'
        'raises an exception, the original search dla a handler jest canceled '
        'and\n'
        'a search starts dla the new exception w the surrounding code oraz '
        'on\n'
        'the call stack (it jest treated jako jeżeli the entire "try" statement '
        'raised\n'
        'the exception).\n'
        '\n'
        'When a matching wyjąwszy clause jest found, the exception jest assigned '
        'to\n'
        'the target specified after the "as" keyword w that wyjąwszy clause, '
        'if\n'
        "present, oraz the wyjąwszy clause's suite jest executed.  All except\n"
        'clauses must have an executable block.  When the end of this block '
        'is\n'
        'reached, execution continues normally after the entire try '
        'statement.\n'
        '(This means that jeżeli two nested handlers exist dla the same '
        'exception,\n'
        'and the exception occurs w the try clause of the inner handler, '
        'the\n'
        'outer handler will nie handle the exception.)\n'
        '\n'
        'When an exception has been assigned using "as target", it jest '
        'cleared\n'
        'at the end of the wyjąwszy clause.  This jest jako if\n'
        '\n'
        '   wyjąwszy E jako N:\n'
        '       foo\n'
        '\n'
        'was translated to\n'
        '\n'
        '   wyjąwszy E jako N:\n'
        '       spróbuj:\n'
        '           foo\n'
        '       w_końcu:\n'
        '           usuń N\n'
        '\n'
        'This means the exception must be assigned to a different name to '
        'be\n'
        'able to refer to it after the wyjąwszy clause.  Exceptions are '
        'cleared\n'
        'because przy the traceback attached to them, they form a reference\n'
        'cycle przy the stack frame, keeping all locals w that frame alive\n'
        'until the next garbage collection occurs.\n'
        '\n'
        "Before an wyjąwszy clause's suite jest executed, details about the\n"
        'exception are stored w the "sys" module oraz can be accessed via\n'
        '"sys.exc_info()". "sys.exc_info()" returns a 3-tuple consisting of '
        'the\n'
        'exception class, the exception instance oraz a traceback object '
        '(see\n'
        'section *The standard type hierarchy*) identifying the point w '
        'the\n'
        'program where the exception occurred.  "sys.exc_info()" values are\n'
        'restored to their previous values (before the call) when returning\n'
        'z a function that handled an exception.\n'
        '\n'
        'The optional "inaczej" clause jest executed jeżeli oraz when control flows '
        'off\n'
        'the end of the "try" clause. [2] Exceptions w the "inaczej" clause '
        'are\n'
        'not handled by the preceding "except" clauses.\n'
        '\n'
        'If "finally" jest present, it specifies a \'cleanup\' handler.  The '
        '"try"\n'
        'clause jest executed, including any "except" oraz "inaczej" clauses.  If '
        'an\n'
        'exception occurs w any of the clauses oraz jest nie handled, the\n'
        'exception jest temporarily saved. The "finally" clause jest executed.  '
        'If\n'
        'there jest a saved exception it jest re-raised at the end of the '
        '"finally"\n'
        'clause.  If the "finally" clause podnieśs another exception, the '
        'saved\n'
        'exception jest set jako the context of the new exception. If the '
        '"finally"\n'
        'clause executes a "return" albo "break" statement, the saved '
        'exception\n'
        'is discarded:\n'
        '\n'
        '   >>> def f():\n'
        '   ...     spróbuj:\n'
        '   ...         1/0\n'
        '   ...     w_końcu:\n'
        '   ...         zwróć 42\n'
        '   ...\n'
        '   >>> f()\n'
        '   42\n'
        '\n'
        'The exception information jest nie available to the program during\n'
        'execution of the "finally" clause.\n'
        '\n'
        'When a "return", "break" albo "continue" statement jest executed w '
        'the\n'
        '"try" suite of a "try"..."finally" statement, the "finally" clause '
        'is\n'
        'also executed \'on the way out.\' A "continue" statement jest illegal '
        'in\n'
        'the "finally" clause. (The reason jest a problem przy the current\n'
        'implementation --- this restriction may be lifted w the future).\n'
        '\n'
        'The zwróć value of a function jest determined by the last "return"\n'
        'statement executed.  Since the "finally" clause always executes, a\n'
        '"return" statement executed w the "finally" clause will always be '
        'the\n'
        'last one executed:\n'
        '\n'
        '   >>> def foo():\n'
        '   ...     spróbuj:\n'
        "   ...         zwróć 'try'\n"
        '   ...     w_końcu:\n'
        "   ...         zwróć 'finally'\n"
        '   ...\n'
        '   >>> foo()\n'
        "   'finally'\n"
        '\n'
        'Additional information on exceptions can be found w section\n'
        '*Exceptions*, oraz information on using the "raise" statement to\n'
        'generate exceptions may be found w section *The podnieś statement*.\n',
 'types': '\n'
          'The standard type hierarchy\n'
          '***************************\n'
          '\n'
          'Below jest a list of the types that are built into Python.  '
          'Extension\n'
          'modules (written w C, Java, albo other languages, depending on '
          'the\n'
          'implementation) can define additional types.  Future versions of\n'
          'Python may add types to the type hierarchy (e.g., rational '
          'numbers,\n'
          'efficiently stored arrays of integers, etc.), although such '
          'additions\n'
          'will often be provided via the standard library instead.\n'
          '\n'
          'Some of the type descriptions below contain a paragraph listing\n'
          "'special attributes.'  These are attributes that provide access "
          'to the\n'
          'implementation oraz are nie intended dla general use.  Their '
          'definition\n'
          'may change w the future.\n'
          '\n'
          'Nic\n'
          '   This type has a single value.  There jest a single object przy '
          'this\n'
          '   value. This object jest accessed through the built-in name '
          '"Nic". It\n'
          '   jest used to signify the absence of a value w many situations, '
          'e.g.,\n'
          "   it jest returned z functions that don't explicitly return\n"
          '   anything. Its truth value jest false.\n'
          '\n'
          'NotImplemented\n'
          '   This type has a single value.  There jest a single object przy '
          'this\n'
          '   value. This object jest accessed through the built-in name\n'
          '   "NotImplemented". Numeric methods oraz rich comparison methods\n'
          '   should zwróć this value jeżeli they do nie implement the '
          'operation for\n'
          '   the operands provided.  (The interpreter will then try the\n'
          '   reflected operation, albo some other fallback, depending on the\n'
          '   operator.)  Its truth value jest true.\n'
          '\n'
          '   See *Implementing the arithmetic operations* dla more '
          'details.\n'
          '\n'
          'Ellipsis\n'
          '   This type has a single value.  There jest a single object przy '
          'this\n'
          '   value. This object jest accessed through the literal "..." albo '
          'the\n'
          '   built-in name "Ellipsis".  Its truth value jest true.\n'
          '\n'
          '"numbers.Number"\n'
          '   These are created by numeric literals oraz returned jako results '
          'by\n'
          '   arithmetic operators oraz arithmetic built-in functions.  '
          'Numeric\n'
          '   objects are immutable; once created their value never '
          'changes.\n'
          '   Python numbers are of course strongly related to mathematical\n'
          '   numbers, but subject to the limitations of numerical '
          'representation\n'
          '   w computers.\n'
          '\n'
          '   Python distinguishes between integers, floating point numbers, '
          'and\n'
          '   complex numbers:\n'
          '\n'
          '   "numbers.Integral"\n'
          '      These represent elements z the mathematical set of '
          'integers\n'
          '      (positive oraz negative).\n'
          '\n'
          '      There are two types of integers:\n'
          '\n'
          '      Integers ("int")\n'
          '\n'
          '         These represent numbers w an unlimited range, subject '
          'to\n'
          '         available (virtual) memory only.  For the purpose of '
          'shift\n'
          '         oraz mask operations, a binary representation jest assumed, '
          'and\n'
          "         negative numbers are represented w a variant of 2's\n"
          '         complement which gives the illusion of an infinite '
          'string of\n'
          '         sign bits extending to the left.\n'
          '\n'
          '      Booleans ("bool")\n'
          '         These represent the truth values Nieprawda oraz Prawda.  The '
          'two\n'
          '         objects representing the values "Nieprawda" oraz "Prawda" are '
          'the\n'
          '         only Boolean objects. The Boolean type jest a subtype of '
          'the\n'
          '         integer type, oraz Boolean values behave like the values '
          '0 and\n'
          '         1, respectively, w almost all contexts, the exception '
          'being\n'
          '         that when converted to a string, the strings ""Nieprawda"" '
          'or\n'
          '         ""Prawda"" are returned, respectively.\n'
          '\n'
          '      The rules dla integer representation are intended to give '
          'the\n'
          '      most meaningful interpretation of shift oraz mask '
          'operations\n'
          '      involving negative integers.\n'
          '\n'
          '   "numbers.Real" ("float")\n'
          '      These represent machine-level double precision floating '
          'point\n'
          '      numbers. You are at the mercy of the underlying machine\n'
          '      architecture (and C albo Java implementation) dla the '
          'accepted\n'
          '      range oraz handling of overflow. Python does nie support '
          'single-\n'
          '      precision floating point numbers; the savings w processor '
          'and\n'
          '      memory usage that are usually the reason dla using these '
          'are\n'
          '      dwarfed by the overhead of using objects w Python, so '
          'there is\n'
          '      no reason to complicate the language przy two kinds of '
          'floating\n'
          '      point numbers.\n'
          '\n'
          '   "numbers.Complex" ("complex")\n'
          '      These represent complex numbers jako a pair of machine-level\n'
          '      double precision floating point numbers.  The same caveats '
          'apply\n'
          '      jako dla floating point numbers. The real oraz imaginary parts '
          'of a\n'
          '      complex number "z" can be retrieved through the read-only\n'
          '      attributes "z.real" oraz "z.imag".\n'
          '\n'
          'Sequences\n'
          '   These represent finite ordered sets indexed by non-negative\n'
          '   numbers. The built-in function "len()" returns the number of '
          'items\n'
          '   of a sequence. When the length of a sequence jest *n*, the index '
          'set\n'
          '   contains the numbers 0, 1, ..., *n*-1.  Item *i* of sequence '
          '*a* is\n'
          '   selected by "a[i]".\n'
          '\n'
          '   Sequences also support slicing: "a[i:j]" selects all items '
          'with\n'
          '   index *k* such that *i* "<=" *k* "<" *j*.  When used jako an\n'
          '   expression, a slice jest a sequence of the same type.  This '
          'implies\n'
          '   that the index set jest renumbered so that it starts at 0.\n'
          '\n'
          '   Some sequences also support "extended slicing" przy a third '
          '"step"\n'
          '   parameter: "a[i:j:k]" selects all items of *a* przy index *x* '
          'where\n'
          '   "x = i + n*k", *n* ">=" "0" oraz *i* "<=" *x* "<" *j*.\n'
          '\n'
          '   Sequences are distinguished according to their mutability:\n'
          '\n'
          '   Immutable sequences\n'
          '      An object of an immutable sequence type cannot change once '
          'it is\n'
          '      created.  (If the object contains references to other '
          'objects,\n'
          '      these other objects may be mutable oraz may be changed; '
          'however,\n'
          '      the collection of objects directly referenced by an '
          'immutable\n'
          '      object cannot change.)\n'
          '\n'
          '      The following types are immutable sequences:\n'
          '\n'
          '      Strings\n'
          '         A string jest a sequence of values that represent Unicode '
          'code\n'
          '         points. All the code points w the range "U+0000 - '
          'U+10FFFF"\n'
          "         can be represented w a string.  Python doesn't have a "
          '"char"\n'
          '         type; instead, every code point w the string jest '
          'represented\n'
          '         jako a string object przy length "1".  The built-in '
          'function\n'
          '         "ord()" converts a code point z its string form to '
          'an\n'
          '         integer w the range "0 - 10FFFF"; "chr()" converts an\n'
          '         integer w the range "0 - 10FFFF" to the corresponding '
          'length\n'
          '         "1" string object. "str.encode()" can be used to convert '
          'a\n'
          '         "str" to "bytes" using the given text encoding, and\n'
          '         "bytes.decode()" can be used to achieve the opposite.\n'
          '\n'
          '      Tuples\n'
          '         The items of a tuple are arbitrary Python objects. '
          'Tuples of\n'
          '         two albo more items are formed by comma-separated lists '
          'of\n'
          "         expressions.  A tuple of one item (a 'singleton') can "
          'be\n'
          '         formed by affixing a comma to an expression (an '
          'expression by\n'
          '         itself does nie create a tuple, since parentheses must '
          'be\n'
          '         usable dla grouping of expressions).  An empty tuple can '
          'be\n'
          '         formed by an empty pair of parentheses.\n'
          '\n'
          '      Bytes\n'
          '         A bytes object jest an immutable array.  The items are '
          '8-bit\n'
          '         bytes, represented by integers w the range 0 <= x < '
          '256.\n'
          '         Bytes literals (like "b\'abc\'") oraz the built-in '
          'function\n'
          '         "bytes()" can be used to construct bytes objects.  '
          'Also,\n'
          '         bytes objects can be decoded to strings via the '
          '"decode()"\n'
          '         method.\n'
          '\n'
          '   Mutable sequences\n'
          '      Mutable sequences can be changed after they are created.  '
          'The\n'
          '      subscription oraz slicing notations can be used jako the '
          'target of\n'
          '      assignment oraz "del" (delete) statements.\n'
          '\n'
          '      There are currently two intrinsic mutable sequence types:\n'
          '\n'
          '      Lists\n'
          '         The items of a list are arbitrary Python objects.  Lists '
          'are\n'
          '         formed by placing a comma-separated list of expressions '
          'in\n'
          '         square brackets. (Note that there are no special cases '
          'needed\n'
          '         to form lists of length 0 albo 1.)\n'
          '\n'
          '      Byte Arrays\n'
          '         A bytearray object jest a mutable array. They are created '
          'by\n'
          '         the built-in "bytearray()" constructor.  Aside z '
          'being\n'
          '         mutable (and hence unhashable), byte arrays otherwise '
          'provide\n'
          '         the same interface oraz functionality jako immutable bytes\n'
          '         objects.\n'
          '\n'
          '      The extension module "array" provides an additional example '
          'of a\n'
          '      mutable sequence type, jako does the "collections" module.\n'
          '\n'
          'Set types\n'
          '   These represent unordered, finite sets of unique, immutable\n'
          '   objects. As such, they cannot be indexed by any subscript. '
          'However,\n'
          '   they can be iterated over, oraz the built-in function "len()"\n'
          '   returns the number of items w a set. Common uses dla sets are '
          'fast\n'
          '   membership testing, removing duplicates z a sequence, and\n'
          '   computing mathematical operations such jako intersection, '
          'union,\n'
          '   difference, oraz symmetric difference.\n'
          '\n'
          '   For set elements, the same immutability rules apply jako for\n'
          '   dictionary keys. Note that numeric types obey the normal rules '
          'for\n'
          '   numeric comparison: jeżeli two numbers compare equal (e.g., "1" '
          'and\n'
          '   "1.0"), only one of them can be contained w a set.\n'
          '\n'
          '   There are currently two intrinsic set types:\n'
          '\n'
          '   Sets\n'
          '      These represent a mutable set. They are created by the '
          'built-in\n'
          '      "set()" constructor oraz can be modified afterwards by '
          'several\n'
          '      methods, such jako "add()".\n'
          '\n'
          '   Frozen sets\n'
          '      These represent an immutable set.  They are created by the\n'
          '      built-in "frozenset()" constructor.  As a frozenset jest '
          'immutable\n'
          '      oraz *hashable*, it can be used again jako an element of '
          'another\n'
          '      set, albo jako a dictionary key.\n'
          '\n'
          'Mappings\n'
          '   These represent finite sets of objects indexed by arbitrary '
          'index\n'
          '   sets. The subscript notation "a[k]" selects the item indexed '
          'by "k"\n'
          '   z the mapping "a"; this can be used w expressions oraz jako '
          'the\n'
          '   target of assignments albo "del" statements. The built-in '
          'function\n'
          '   "len()" returns the number of items w a mapping.\n'
          '\n'
          '   There jest currently a single intrinsic mapping type:\n'
          '\n'
          '   Dictionaries\n'
          '      These represent finite sets of objects indexed by nearly\n'
          '      arbitrary values.  The only types of values nie acceptable '
          'as\n'
          '      keys are values containing lists albo dictionaries albo other\n'
          '      mutable types that are compared by value rather than by '
          'object\n'
          '      identity, the reason being that the efficient '
          'implementation of\n'
          "      dictionaries requires a key's hash value to remain "
          'constant.\n'
          '      Numeric types used dla keys obey the normal rules dla '
          'numeric\n'
          '      comparison: jeżeli two numbers compare equal (e.g., "1" oraz '
          '"1.0")\n'
          '      then they can be used interchangeably to index the same\n'
          '      dictionary entry.\n'
          '\n'
          '      Dictionaries are mutable; they can be created by the '
          '"{...}"\n'
          '      notation (see section *Dictionary displays*).\n'
          '\n'
          '      The extension modules "dbm.ndbm" oraz "dbm.gnu" provide\n'
          '      additional examples of mapping types, jako does the '
          '"collections"\n'
          '      module.\n'
          '\n'
          'Callable types\n'
          '   These are the types to which the function call operation (see\n'
          '   section *Calls*) can be applied:\n'
          '\n'
          '   User-defined functions\n'
          '      A user-defined function object jest created by a function\n'
          '      definition (see section *Function definitions*).  It should '
          'be\n'
          '      called przy an argument list containing the same number of '
          'items\n'
          "      jako the function's formal parameter list.\n"
          '\n'
          '      Special attributes:\n'
          '\n'
          '      '
          '+---------------------------+---------------------------------+-------------+\n'
          '      | Attribute                 | '
          'Meaning                         |             |\n'
          '      '
          '+===========================+=================================+=============+\n'
          '      | "__doc__"                 | The function\'s '
          'documentation    | Writable    |\n'
          '      |                           | string, albo "Nic" '
          'jeżeli            |             |\n'
          '      |                           | unavailable; nie inherited '
          'by   |             |\n'
          '      |                           | '
          'subclasses                      |             |\n'
          '      '
          '+---------------------------+---------------------------------+-------------+\n'
          '      | "__name__"                | The function\'s '
          'name             | Writable    |\n'
          '      '
          '+---------------------------+---------------------------------+-------------+\n'
          '      | "__qualname__"            | The function\'s *qualified '
          'name* | Writable    |\n'
          '      |                           | New w version '
          '3.3.             |             |\n'
          '      '
          '+---------------------------+---------------------------------+-------------+\n'
          '      | "__module__"              | The name of the module '
          'the      | Writable    |\n'
          '      |                           | function was defined in, '
          'or     |             |\n'
          '      |                           | "Nic" jeżeli '
          'unavailable.          |             |\n'
          '      '
          '+---------------------------+---------------------------------+-------------+\n'
          '      | "__defaults__"            | A tuple containing '
          'default      | Writable    |\n'
          '      |                           | argument values dla '
          'those       |             |\n'
          '      |                           | arguments that have '
          'defaults,   |             |\n'
          '      |                           | albo "Nic" jeżeli no arguments '
          'have  |             |\n'
          '      |                           | a default '
          'value                 |             |\n'
          '      '
          '+---------------------------+---------------------------------+-------------+\n'
          '      | "__code__"                | The code object '
          'representing    | Writable    |\n'
          '      |                           | the compiled function '
          'body.     |             |\n'
          '      '
          '+---------------------------+---------------------------------+-------------+\n'
          '      | "__globals__"             | A reference to the '
          'dictionary   | Read-only   |\n'
          '      |                           | that holds the '
          "function's       |             |\n"
          '      |                           | global variables --- the '
          'global |             |\n'
          '      |                           | namespace of the module '
          'in      |             |\n'
          '      |                           | which the function was '
          'defined. |             |\n'
          '      '
          '+---------------------------+---------------------------------+-------------+\n'
          '      | "__dict__"                | The namespace '
          'supporting        | Writable    |\n'
          '      |                           | arbitrary function '
          'attributes.  |             |\n'
          '      '
          '+---------------------------+---------------------------------+-------------+\n'
          '      | "__closure__"             | "Nic" albo a tuple of cells '
          'that | Read-only   |\n'
          '      |                           | contain bindings dla '
          'the        |             |\n'
          "      |                           | function's free "
          'variables.      |             |\n'
          '      '
          '+---------------------------+---------------------------------+-------------+\n'
          '      | "__annotations__"         | A dict containing '
          'annotations   | Writable    |\n'
          '      |                           | of parameters.  The keys of '
          'the |             |\n'
          '      |                           | dict are the parameter '
          'names,   |             |\n'
          '      |                           | oraz "\'return\'" dla the '
          'return   |             |\n'
          '      |                           | annotation, jeżeli '
          'provided.        |             |\n'
          '      '
          '+---------------------------+---------------------------------+-------------+\n'
          '      | "__kwdefaults__"          | A dict containing defaults '
          'dla  | Writable    |\n'
          '      |                           | keyword-only '
          'parameters.        |             |\n'
          '      '
          '+---------------------------+---------------------------------+-------------+\n'
          '\n'
          '      Most of the attributes labelled "Writable" check the type '
          'of the\n'
          '      assigned value.\n'
          '\n'
          '      Function objects also support getting oraz setting '
          'arbitrary\n'
          '      attributes, which can be used, dla example, to attach '
          'metadata\n'
          '      to functions.  Regular attribute dot-notation jest used to '
          'get and\n'
          '      set such attributes. *Note that the current implementation '
          'only\n'
          '      supports function attributes on user-defined functions. '
          'Function\n'
          '      attributes on built-in functions may be supported w the\n'
          '      future.*\n'
          '\n'
          "      Additional information about a function's definition can "
          'be\n'
          '      retrieved z its code object; see the description of '
          'internal\n'
          '      types below.\n'
          '\n'
          '   Instance methods\n'
          '      An instance method object combines a class, a klasa '
          'instance and\n'
          '      any callable object (normally a user-defined function).\n'
          '\n'
          '      Special read-only attributes: "__self__" jest the klasa '
          'instance\n'
          '      object, "__func__" jest the function object; "__doc__" jest '
          'the\n'
          '      method\'s documentation (same jako "__func__.__doc__"); '
          '"__name__"\n'
          '      jest the method name (same jako "__func__.__name__"); '
          '"__module__"\n'
          '      jest the name of the module the method was defined in, albo '
          '"Nic"\n'
          '      jeżeli unavailable.\n'
          '\n'
          '      Methods also support accessing (but nie setting) the '
          'arbitrary\n'
          '      function attributes on the underlying function object.\n'
          '\n'
          '      User-defined method objects may be created when getting an\n'
          '      attribute of a klasa (perhaps via an instance of that '
          'class), if\n'
          '      that attribute jest a user-defined function object albo a '
          'class\n'
          '      method object.\n'
          '\n'
          '      When an instance method object jest created by retrieving a '
          'user-\n'
          '      defined function object z a klasa via one of its '
          'instances,\n'
          '      its "__self__" attribute jest the instance, oraz the method '
          'object\n'
          '      jest said to be bound.  The new method\'s "__func__" '
          'attribute is\n'
          '      the original function object.\n'
          '\n'
          '      When a user-defined method object jest created by retrieving\n'
          '      another method object z a klasa albo instance, the '
          'behaviour is\n'
          '      the same jako dla a function object, wyjąwszy that the '
          '"__func__"\n'
          '      attribute of the new instance jest nie the original method '
          'object\n'
          '      but its "__func__" attribute.\n'
          '\n'
          '      When an instance method object jest created by retrieving a '
          'class\n'
          '      method object z a klasa albo instance, its "__self__" '
          'attribute\n'
          '      jest the klasa itself, oraz its "__func__" attribute jest the\n'
          '      function object underlying the klasa method.\n'
          '\n'
          '      When an instance method object jest called, the underlying\n'
          '      function ("__func__") jest called, inserting the klasa '
          'instance\n'
          '      ("__self__") w front of the argument list.  For instance, '
          'when\n'
          '      "C" jest a klasa which contains a definition dla a function '
          '"f()",\n'
          '      oraz "x" jest an instance of "C", calling "x.f(1)" jest '
          'equivalent to\n'
          '      calling "C.f(x, 1)".\n'
          '\n'
          '      When an instance method object jest derived z a klasa '
          'method\n'
          '      object, the "class instance" stored w "__self__" will '
          'actually\n'
          '      be the klasa itself, so that calling either "x.f(1)" albo '
          '"C.f(1)"\n'
          '      jest equivalent to calling "f(C,1)" where "f" jest the '
          'underlying\n'
          '      function.\n'
          '\n'
          '      Note that the transformation z function object to '
          'instance\n'
          '      method object happens each time the attribute jest retrieved '
          'from\n'
          '      the instance.  In some cases, a fruitful optimization jest '
          'to\n'
          '      assign the attribute to a local variable oraz call that '
          'local\n'
          '      variable. Also notice that this transformation only happens '
          'for\n'
          '      user-defined functions; other callable objects (and all '
          'non-\n'
          '      callable objects) are retrieved without transformation.  It '
          'is\n'
          '      also important to note that user-defined functions which '
          'are\n'
          '      attributes of a klasa instance are nie converted to bound\n'
          '      methods; this *only* happens when the function jest an '
          'attribute\n'
          '      of the class.\n'
          '\n'
          '   Generator functions\n'
          '      A function albo method which uses the "uzyskaj" statement (see\n'
          '      section *The uzyskaj statement*) jest called a *generator '
          'function*.\n'
          '      Such a function, when called, always returns an iterator '
          'object\n'
          '      which can be used to execute the body of the function:  '
          'calling\n'
          '      the iterator\'s "iterator.__next__()" method will cause '
          'the\n'
          '      function to execute until it provides a value using the '
          '"uzyskaj"\n'
          '      statement.  When the function executes a "return" statement '
          'or\n'
          '      falls off the end, a "StopIteration" exception jest podnieśd '
          'and the\n'
          '      iterator will have reached the end of the set of values to '
          'be\n'
          '      returned.\n'
          '\n'
          '   Coroutine functions\n'
          '      A function albo method which jest defined using "async def" is\n'
          '      called a *coroutine function*.  Such a function, when '
          'called,\n'
          '      returns a *coroutine* object.  It may contain "await"\n'
          '      expressions, jako well jako "async with" oraz "async for" '
          'statements.\n'
          '      See also the *Coroutine Objects* section.\n'
          '\n'
          '   Built-in functions\n'
          '      A built-in function object jest a wrapper around a C '
          'function.\n'
          '      Examples of built-in functions are "len()" oraz '
          '"math.sin()"\n'
          '      ("math" jest a standard built-in module). The number oraz type '
          'of\n'
          '      the arguments are determined by the C function. Special '
          'read-\n'
          '      only attributes: "__doc__" jest the function\'s '
          'documentation\n'
          '      string, albo "Nic" jeżeli unavailable; "__name__" jest the '
          "function's\n"
          '      name; "__self__" jest set to "Nic" (but see the next item);\n'
          '      "__module__" jest the name of the module the function was '
          'defined\n'
          '      w albo "Nic" jeżeli unavailable.\n'
          '\n'
          '   Built-in methods\n'
          '      This jest really a different disguise of a built-in function, '
          'this\n'
          '      time containing an object dalejed to the C function jako an\n'
          '      implicit extra argument.  An example of a built-in method '
          'is\n'
          '      "alist.append()", assuming *alist* jest a list object. In '
          'this\n'
          '      case, the special read-only attribute "__self__" jest set to '
          'the\n'
          '      object denoted by *alist*.\n'
          '\n'
          '   Classes\n'
          '      Classes are callable.  These objects normally act jako '
          'factories\n'
          '      dla new instances of themselves, but variations are '
          'possible for\n'
          '      klasa types that override "__new__()".  The arguments of '
          'the\n'
          '      call are dalejed to "__new__()" and, w the typical case, '
          'to\n'
          '      "__init__()" to initialize the new instance.\n'
          '\n'
          '   Class Instances\n'
          '      Instances of arbitrary classes can be made callable by '
          'defining\n'
          '      a "__call__()" method w their class.\n'
          '\n'
          'Modules\n'
          '   Modules are a basic organizational unit of Python code, oraz '
          'are\n'
          '   created by the *zaimportuj system* jako invoked either by the '
          '"import"\n'
          '   statement (see "import"), albo by calling functions such as\n'
          '   "importlib.import_module()" oraz built-in "__import__()".  A '
          'module\n'
          '   object has a namespace implemented by a dictionary object '
          '(this is\n'
          '   the dictionary referenced by the "__globals__" attribute of\n'
          '   functions defined w the module).  Attribute references are\n'
          '   translated to lookups w this dictionary, e.g., "m.x" jest '
          'equivalent\n'
          '   to "m.__dict__["x"]". A module object does nie contain the '
          'code\n'
          "   object used to initialize the module (since it isn't needed "
          'once\n'
          '   the initialization jest done).\n'
          '\n'
          "   Attribute assignment updates the module's namespace "
          'dictionary,\n'
          '   e.g., "m.x = 1" jest equivalent to "m.__dict__["x"] = 1".\n'
          '\n'
          '   Special read-only attribute: "__dict__" jest the module\'s '
          'namespace\n'
          '   jako a dictionary object.\n'
          '\n'
          '   **CPython implementation detail:** Because of the way CPython\n'
          '   clears module dictionaries, the module dictionary will be '
          'cleared\n'
          '   when the module falls out of scope even jeżeli the dictionary '
          'still has\n'
          '   live references.  To avoid this, copy the dictionary albo keep '
          'the\n'
          '   module around dopóki using its dictionary directly.\n'
          '\n'
          '   Predefined (writable) attributes: "__name__" jest the module\'s '
          'name;\n'
          '   "__doc__" jest the module\'s documentation string, albo "Nic" if\n'
          '   unavailable; "__file__" jest the pathname of the file z which '
          'the\n'
          '   module was loaded, jeżeli it was loaded z a file. The '
          '"__file__"\n'
          '   attribute may be missing dla certain types of modules, such jako '
          'C\n'
          '   modules that are statically linked into the interpreter; for\n'
          '   extension modules loaded dynamically z a shared library, it '
          'is\n'
          '   the pathname of the shared library file.\n'
          '\n'
          'Custom classes\n'
          '   Custom klasa types are typically created by klasa definitions '
          '(see\n'
          '   section *Class definitions*).  A klasa has a namespace '
          'implemented\n'
          '   by a dictionary object. Class attribute references are '
          'translated\n'
          '   to lookups w this dictionary, e.g., "C.x" jest translated to\n'
          '   "C.__dict__["x"]" (although there are a number of hooks which '
          'allow\n'
          '   dla other means of locating attributes). When the attribute '
          'name is\n'
          '   nie found there, the attribute search continues w the base\n'
          '   classes. This search of the base classes uses the C3 method\n'
          '   resolution order which behaves correctly even w the presence '
          'of\n'
          "   'diamond' inheritance structures where there are multiple\n"
          '   inheritance paths leading back to a common ancestor. '
          'Additional\n'
          '   details on the C3 MRO used by Python can be found w the\n'
          '   documentation accompanying the 2.3 release at\n'
          '   https://www.python.org/download/releases/2.3/mro/.\n'
          '\n'
          '   When a klasa attribute reference (dla klasa "C", say) would '
          'uzyskaj a\n'
          '   klasa method object, it jest transformed into an instance '
          'method\n'
          '   object whose "__self__" attributes jest "C".  When it would '
          'uzyskaj a\n'
          '   static method object, it jest transformed into the object '
          'wrapped by\n'
          '   the static method object. See section *Implementing '
          'Descriptors*\n'
          '   dla another way w which attributes retrieved z a klasa '
          'may\n'
          '   differ z those actually contained w its "__dict__".\n'
          '\n'
          "   Class attribute assignments update the class's dictionary, "
          'never\n'
          '   the dictionary of a base class.\n'
          '\n'
          '   A klasa object can be called (see above) to uzyskaj a klasa '
          'instance\n'
          '   (see below).\n'
          '\n'
          '   Special attributes: "__name__" jest the klasa name; "__module__" '
          'is\n'
          '   the module name w which the klasa was defined; "__dict__" jest '
          'the\n'
          '   dictionary containing the class\'s namespace; "__bases__" jest a '
          'tuple\n'
          '   (possibly empty albo a singleton) containing the base classes, '
          'in the\n'
          '   order of their occurrence w the base klasa list; "__doc__" jest '
          'the\n'
          "   class's documentation string, albo Nic jeżeli undefined.\n"
          '\n'
          'Class instances\n'
          '   A klasa instance jest created by calling a klasa object (see '
          'above).\n'
          '   A klasa instance has a namespace implemented jako a dictionary '
          'which\n'
          '   jest the first place w which attribute references are '
          'searched.\n'
          "   When an attribute jest nie found there, oraz the instance's klasa "
          'has\n'
          '   an attribute by that name, the search continues przy the '
          'class\n'
          '   attributes.  If a klasa attribute jest found that jest a '
          'user-defined\n'
          '   function object, it jest transformed into an instance method '
          'object\n'
          '   whose "__self__" attribute jest the instance.  Static method '
          'and\n'
          '   klasa method objects are also transformed; see above under\n'
          '   "Classes".  See section *Implementing Descriptors* dla another '
          'way\n'
          '   w which attributes of a klasa retrieved via its instances '
          'may\n'
          "   differ z the objects actually stored w the class's "
          '"__dict__".\n'
          "   If no klasa attribute jest found, oraz the object's klasa has a\n"
          '   "__getattr__()" method, that jest called to satisfy the lookup.\n'
          '\n'
          "   Attribute assignments oraz deletions update the instance's\n"
          "   dictionary, never a class's dictionary.  If the klasa has a\n"
          '   "__setattr__()" albo "__delattr__()" method, this jest called '
          'instead\n'
          '   of updating the instance dictionary directly.\n'
          '\n'
          '   Class instances can pretend to be numbers, sequences, albo '
          'mappings\n'
          '   jeżeli they have methods przy certain special names.  See section\n'
          '   *Special method names*.\n'
          '\n'
          '   Special attributes: "__dict__" jest the attribute dictionary;\n'
          '   "__class__" jest the instance\'s class.\n'
          '\n'
          'I/O objects (also known jako file objects)\n'
          '   A *file object* represents an open file.  Various shortcuts '
          'are\n'
          '   available to create file objects: the "open()" built-in '
          'function,\n'
          '   oraz also "os.popen()", "os.fdopen()", oraz the "makefile()" '
          'method\n'
          '   of socket objects (and perhaps by other functions albo methods\n'
          '   provided by extension modules).\n'
          '\n'
          '   The objects "sys.stdin", "sys.stdout" oraz "sys.stderr" are\n'
          '   initialized to file objects corresponding to the '
          "interpreter's\n"
          '   standard input, output oraz error streams; they are all open w '
          'text\n'
          '   mode oraz therefore follow the interface defined by the\n'
          '   "io.TextIOBase" abstract class.\n'
          '\n'
          'Internal types\n'
          '   A few types used internally by the interpreter are exposed to '
          'the\n'
          '   user. Their definitions may change przy future versions of '
          'the\n'
          '   interpreter, but they are mentioned here dla completeness.\n'
          '\n'
          '   Code objects\n'
          '      Code objects represent *byte-compiled* executable Python '
          'code,\n'
          '      albo *bytecode*. The difference between a code object oraz a\n'
          '      function object jest that the function object contains an '
          'explicit\n'
          "      reference to the function's globals (the module w which it "
          'was\n'
          '      defined), dopóki a code object contains no context; also '
          'the\n'
          '      default argument values are stored w the function object, '
          'not\n'
          '      w the code object (because they represent values '
          'calculated at\n'
          '      run-time).  Unlike function objects, code objects are '
          'immutable\n'
          '      oraz contain no references (directly albo indirectly) to '
          'mutable\n'
          '      objects.\n'
          '\n'
          '      Special read-only attributes: "co_name" gives the function '
          'name;\n'
          '      "co_argcount" jest the number of positional arguments '
          '(including\n'
          '      arguments przy default values); "co_nlocals" jest the number '
          'of\n'
          '      local variables used by the function (including '
          'arguments);\n'
          '      "co_varnames" jest a tuple containing the names of the local\n'
          '      variables (starting przy the argument names); "co_cellvars" '
          'is a\n'
          '      tuple containing the names of local variables that are\n'
          '      referenced by nested functions; "co_freevars" jest a tuple\n'
          '      containing the names of free variables; "co_code" jest a '
          'string\n'
          '      representing the sequence of bytecode instructions; '
          '"co_consts"\n'
          '      jest a tuple containing the literals used by the bytecode;\n'
          '      "co_names" jest a tuple containing the names used by the '
          'bytecode;\n'
          '      "co_filename" jest the filename z which the code was '
          'compiled;\n'
          '      "co_firstlineno" jest the first line number of the function;\n'
          '      "co_lnotab" jest a string encoding the mapping z bytecode\n'
          '      offsets to line numbers (dla details see the source code of '
          'the\n'
          '      interpreter); "co_stacksize" jest the required stack size\n'
          '      (including local variables); "co_flags" jest an integer '
          'encoding a\n'
          '      number of flags dla the interpreter.\n'
          '\n'
          '      The following flag bits are defined dla "co_flags": bit '
          '"0x04"\n'
          '      jest set jeżeli the function uses the "*arguments" syntax to '
          'accept an\n'
          '      arbitrary number of positional arguments; bit "0x08" jest set '
          'if\n'
          '      the function uses the "**keywords" syntax to accept '
          'arbitrary\n'
          '      keyword arguments; bit "0x20" jest set jeżeli the function jest a\n'
          '      generator.\n'
          '\n'
          '      Future feature declarations ("z __future__ zaimportuj '
          'division")\n'
          '      also use bits w "co_flags" to indicate whether a code '
          'object\n'
          '      was compiled przy a particular feature enabled: bit '
          '"0x2000" is\n'
          '      set jeżeli the function was compiled przy future division '
          'enabled;\n'
          '      bits "0x10" oraz "0x1000" were used w earlier versions of\n'
          '      Python.\n'
          '\n'
          '      Other bits w "co_flags" are reserved dla internal use.\n'
          '\n'
          '      If a code object represents a function, the first item in\n'
          '      "co_consts" jest the documentation string of the function, '
          'or\n'
          '      "Nic" jeżeli undefined.\n'
          '\n'
          '   Frame objects\n'
          '      Frame objects represent execution frames.  They may occur '
          'in\n'
          '      traceback objects (see below).\n'
          '\n'
          '      Special read-only attributes: "f_back" jest to the previous '
          'stack\n'
          '      frame (towards the caller), albo "Nic" jeżeli this jest the '
          'bottom\n'
          '      stack frame; "f_code" jest the code object being executed w '
          'this\n'
          '      frame; "f_locals" jest the dictionary used to look up local\n'
          '      variables; "f_globals" jest used dla global variables;\n'
          '      "f_builtins" jest used dla built-in (intrinsic) names; '
          '"f_lasti"\n'
          '      gives the precise instruction (this jest an index into the\n'
          '      bytecode string of the code object).\n'
          '\n'
          '      Special writable attributes: "f_trace", jeżeli nie "Nic", jest '
          'a\n'
          '      function called at the start of each source code line (this '
          'is\n'
          '      used by the debugger); "f_lineno" jest the current line '
          'number of\n'
          '      the frame --- writing to this z within a trace function '
          'jumps\n'
          '      to the given line (only dla the bottom-most frame).  A '
          'debugger\n'
          '      can implement a Jump command (aka Set Next Statement) by '
          'writing\n'
          '      to f_lineno.\n'
          '\n'
          '      Frame objects support one method:\n'
          '\n'
          '      frame.clear()\n'
          '\n'
          '         This method clears all references to local variables '
          'held by\n'
          '         the frame.  Also, jeżeli the frame belonged to a generator, '
          'the\n'
          '         generator jest finalized.  This helps przerwij reference '
          'cycles\n'
          '         involving frame objects (dla example when catching an\n'
          '         exception oraz storing its traceback dla later use).\n'
          '\n'
          '         "RuntimeError" jest podnieśd jeżeli the frame jest currently '
          'executing.\n'
          '\n'
          '         New w version 3.4.\n'
          '\n'
          '   Traceback objects\n'
          '      Traceback objects represent a stack trace of an exception.  '
          'A\n'
          '      traceback object jest created when an exception occurs.  When '
          'the\n'
          '      search dla an exception handler unwinds the execution '
          'stack, at\n'
          '      each unwound level a traceback object jest inserted w front '
          'of\n'
          '      the current traceback.  When an exception handler jest '
          'entered,\n'
          '      the stack trace jest made available to the program. (See '
          'section\n'
          '      *The try statement*.) It jest accessible jako the third item of '
          'the\n'
          '      tuple returned by "sys.exc_info()". When the program '
          'contains no\n'
          '      suitable handler, the stack trace jest written (nicely '
          'formatted)\n'
          '      to the standard error stream; jeżeli the interpreter jest '
          'interactive,\n'
          '      it jest also made available to the user jako '
          '"sys.last_traceback".\n'
          '\n'
          '      Special read-only attributes: "tb_next" jest the next level '
          'in the\n'
          '      stack trace (towards the frame where the exception '
          'occurred), or\n'
          '      "Nic" jeżeli there jest no next level; "tb_frame" points to the\n'
          '      execution frame of the current level; "tb_lineno" gives the '
          'line\n'
          '      number where the exception occurred; "tb_lasti" indicates '
          'the\n'
          '      precise instruction.  The line number oraz last instruction '
          'in\n'
          '      the traceback may differ z the line number of its frame\n'
          '      object jeżeli the exception occurred w a "try" statement przy '
          'no\n'
          '      matching wyjąwszy clause albo przy a finally clause.\n'
          '\n'
          '   Slice objects\n'
          '      Slice objects are used to represent slices dla '
          '"__getitem__()"\n'
          '      methods.  They are also created by the built-in "slice()"\n'
          '      function.\n'
          '\n'
          '      Special read-only attributes: "start" jest the lower bound; '
          '"stop"\n'
          '      jest the upper bound; "step" jest the step value; each jest '
          '"Nic" if\n'
          '      omitted.  These attributes can have any type.\n'
          '\n'
          '      Slice objects support one method:\n'
          '\n'
          '      slice.indices(self, length)\n'
          '\n'
          '         This method takes a single integer argument *length* '
          'and\n'
          '         computes information about the slice that the slice '
          'object\n'
          '         would describe jeżeli applied to a sequence of *length* '
          'items.\n'
          '         It returns a tuple of three integers; respectively these '
          'are\n'
          '         the *start* oraz *stop* indices oraz the *step* albo stride\n'
          '         length of the slice. Missing albo out-of-bounds indices '
          'are\n'
          '         handled w a manner consistent przy regular slices.\n'
          '\n'
          '   Static method objects\n'
          '      Static method objects provide a way of defeating the\n'
          '      transformation of function objects to method objects '
          'described\n'
          '      above. A static method object jest a wrapper around any '
          'other\n'
          '      object, usually a user-defined method object. When a '
          'static\n'
          '      method object jest retrieved z a klasa albo a klasa '
          'instance, the\n'
          '      object actually returned jest the wrapped object, which jest '
          'not\n'
          '      subject to any further transformation. Static method '
          'objects are\n'
          '      nie themselves callable, although the objects they wrap '
          'usually\n'
          '      are. Static method objects are created by the built-in\n'
          '      "staticmethod()" constructor.\n'
          '\n'
          '   Class method objects\n'
          '      A klasa method object, like a static method object, jest a '
          'wrapper\n'
          '      around another object that alters the way w which that '
          'object\n'
          '      jest retrieved z classes oraz klasa instances. The '
          'behaviour of\n'
          '      klasa method objects upon such retrieval jest described '
          'above,\n'
          '      under "User-defined methods". Class method objects are '
          'created\n'
          '      by the built-in "classmethod()" constructor.\n',
 'typesfunctions': '\n'
                   'Functions\n'
                   '*********\n'
                   '\n'
                   'Function objects are created by function definitions.  '
                   'The only\n'
                   'operation on a function object jest to call it: '
                   '"func(argument-list)".\n'
                   '\n'
                   'There are really two flavors of function objects: '
                   'built-in functions\n'
                   'and user-defined functions.  Both support the same '
                   'operation (to call\n'
                   'the function), but the implementation jest different, '
                   'hence the\n'
                   'different object types.\n'
                   '\n'
                   'See *Function definitions* dla more information.\n',
 'typesmapping': '\n'
                 'Mapping Types --- "dict"\n'
                 '************************\n'
                 '\n'
                 'A *mapping* object maps *hashable* values to arbitrary '
                 'objects.\n'
                 'Mappings are mutable objects.  There jest currently only one '
                 'standard\n'
                 'mapping type, the *dictionary*.  (For other containers see '
                 'the built-\n'
                 'in "list", "set", oraz "tuple" classes, oraz the '
                 '"collections" module.)\n'
                 '\n'
                 "A dictionary's keys are *almost* arbitrary values.  Values "
                 'that are\n'
                 'not *hashable*, that is, values containing lists, '
                 'dictionaries or\n'
                 'other mutable types (that are compared by value rather '
                 'than by object\n'
                 'identity) may nie be used jako keys.  Numeric types used dla '
                 'keys obey\n'
                 'the normal rules dla numeric comparison: jeżeli two numbers '
                 'compare equal\n'
                 '(such jako "1" oraz "1.0") then they can be used '
                 'interchangeably to index\n'
                 'the same dictionary entry.  (Note however, that since '
                 'computers store\n'
                 'floating-point numbers jako approximations it jest usually '
                 'unwise to use\n'
                 'them jako dictionary keys.)\n'
                 '\n'
                 'Dictionaries can be created by placing a comma-separated '
                 'list of "key:\n'
                 'value" pairs within braces, dla example: "{\'jack\': 4098, '
                 "'sjoerd':\n"
                 '4127}" albo "{4098: \'jack\', 4127: \'sjoerd\'}", albo by the '
                 '"dict"\n'
                 'constructor.\n'
                 '\n'
                 'class klasa dict(**kwarg)\n'
                 'class klasa dict(mapping, **kwarg)\n'
                 'class klasa dict(iterable, **kwarg)\n'
                 '\n'
                 '   Return a new dictionary initialized z an optional '
                 'positional\n'
                 '   argument oraz a possibly empty set of keyword '
                 'arguments.\n'
                 '\n'
                 '   If no positional argument jest given, an empty dictionary '
                 'is created.\n'
                 '   If a positional argument jest given oraz it jest a mapping '
                 'object, a\n'
                 '   dictionary jest created przy the same key-value pairs jako '
                 'the mapping\n'
                 '   object.  Otherwise, the positional argument must be an '
                 '*iterable*\n'
                 '   object.  Each item w the iterable must itself be an '
                 'iterable with\n'
                 '   exactly two objects.  The first object of each item '
                 'becomes a key\n'
                 '   w the new dictionary, oraz the second object the '
                 'corresponding\n'
                 '   value.  If a key occurs more than once, the last value '
                 'dla that key\n'
                 '   becomes the corresponding value w the new dictionary.\n'
                 '\n'
                 '   If keyword arguments are given, the keyword arguments '
                 'and their\n'
                 '   values are added to the dictionary created z the '
                 'positional\n'
                 '   argument.  If a key being added jest already present, the '
                 'value from\n'
                 '   the keyword argument replaces the value z the '
                 'positional\n'
                 '   argument.\n'
                 '\n'
                 '   To illustrate, the following examples all zwróć a '
                 'dictionary equal\n'
                 '   to "{"one": 1, "two": 2, "three": 3}":\n'
                 '\n'
                 '      >>> a = dict(one=1, two=2, three=3)\n'
                 "      >>> b = {'one': 1, 'two': 2, 'three': 3}\n"
                 "      >>> c = dict(zip(['one', 'two', 'three'], [1, 2, "
                 '3]))\n'
                 "      >>> d = dict([('two', 2), ('one', 1), ('three', "
                 '3)])\n'
                 "      >>> e = dict({'three': 3, 'one': 1, 'two': 2})\n"
                 '      >>> a == b == c == d == e\n'
                 '      Prawda\n'
                 '\n'
                 '   Providing keyword arguments jako w the first example '
                 'only works for\n'
                 '   keys that are valid Python identifiers.  Otherwise, any '
                 'valid keys\n'
                 '   can be used.\n'
                 '\n'
                 '   These are the operations that dictionaries support (and '
                 'therefore,\n'
                 '   custom mapping types should support too):\n'
                 '\n'
                 '   len(d)\n'
                 '\n'
                 '      Return the number of items w the dictionary *d*.\n'
                 '\n'
                 '   d[key]\n'
                 '\n'
                 '      Return the item of *d* przy key *key*.  Raises a '
                 '"KeyError" if\n'
                 '      *key* jest nie w the map.\n'
                 '\n'
                 '      If a subclass of dict defines a method '
                 '"__missing__()" oraz *key*\n'
                 '      jest nie present, the "d[key]" operation calls that '
                 'method with\n'
                 '      the key *key* jako argument.  The "d[key]" operation '
                 'then returns\n'
                 '      albo podnieśs whatever jest returned albo podnieśd by the\n'
                 '      "__missing__(key)" call. No other operations albo '
                 'methods invoke\n'
                 '      "__missing__()". If "__missing__()" jest nie defined, '
                 '"KeyError"\n'
                 '      jest podnieśd. "__missing__()" must be a method; it '
                 'cannot be an\n'
                 '      instance variable:\n'
                 '\n'
                 '         >>> klasa Counter(dict):\n'
                 '         ...     def __missing__(self, key):\n'
                 '         ...         zwróć 0\n'
                 '         >>> c = Counter()\n'
                 "         >>> c['red']\n"
                 '         0\n'
                 "         >>> c['red'] += 1\n"
                 "         >>> c['red']\n"
                 '         1\n'
                 '\n'
                 '      The example above shows part of the implementation '
                 'of\n'
                 '      "collections.Counter".  A different "__missing__" '
                 'method jest used\n'
                 '      by "collections.defaultdict".\n'
                 '\n'
                 '   d[key] = value\n'
                 '\n'
                 '      Set "d[key]" to *value*.\n'
                 '\n'
                 '   usuń d[key]\n'
                 '\n'
                 '      Remove "d[key]" z *d*.  Raises a "KeyError" jeżeli '
                 '*key* jest not\n'
                 '      w the map.\n'
                 '\n'
                 '   key w d\n'
                 '\n'
                 '      Return "Prawda" jeżeli *d* has a key *key*, inaczej "Nieprawda".\n'
                 '\n'
                 '   key nie w d\n'
                 '\n'
                 '      Equivalent to "not key w d".\n'
                 '\n'
                 '   iter(d)\n'
                 '\n'
                 '      Return an iterator over the keys of the dictionary.  '
                 'This jest a\n'
                 '      shortcut dla "iter(d.keys())".\n'
                 '\n'
                 '   clear()\n'
                 '\n'
                 '      Remove all items z the dictionary.\n'
                 '\n'
                 '   copy()\n'
                 '\n'
                 '      Return a shallow copy of the dictionary.\n'
                 '\n'
                 '   classmethod fromkeys(seq[, value])\n'
                 '\n'
                 '      Create a new dictionary przy keys z *seq* oraz '
                 'values set to\n'
                 '      *value*.\n'
                 '\n'
                 '      "fromkeys()" jest a klasa method that returns a new '
                 'dictionary.\n'
                 '      *value* defaults to "Nic".\n'
                 '\n'
                 '   get(key[, default])\n'
                 '\n'
                 '      Return the value dla *key* jeżeli *key* jest w the '
                 'dictionary, inaczej\n'
                 '      *default*. If *default* jest nie given, it defaults to '
                 '"Nic", so\n'
                 '      that this method never podnieśs a "KeyError".\n'
                 '\n'
                 '   items()\n'
                 '\n'
                 '      Return a new view of the dictionary\'s items ("(key, '
                 'value)"\n'
                 '      pairs). See the *documentation of view objects*.\n'
                 '\n'
                 '   keys()\n'
                 '\n'
                 "      Return a new view of the dictionary's keys.  See "
                 'the\n'
                 '      *documentation of view objects*.\n'
                 '\n'
                 '   pop(key[, default])\n'
                 '\n'
                 '      If *key* jest w the dictionary, remove it oraz zwróć '
                 'its value,\n'
                 '      inaczej zwróć *default*.  If *default* jest nie given '
                 'and *key* is\n'
                 '      nie w the dictionary, a "KeyError" jest podnieśd.\n'
                 '\n'
                 '   popitem()\n'
                 '\n'
                 '      Remove oraz zwróć an arbitrary "(key, value)" pair '
                 'z the\n'
                 '      dictionary.\n'
                 '\n'
                 '      "popitem()" jest useful to destructively iterate over '
                 'a\n'
                 '      dictionary, jako often used w set algorithms.  If the '
                 'dictionary\n'
                 '      jest empty, calling "popitem()" podnieśs a "KeyError".\n'
                 '\n'
                 '   setdefault(key[, default])\n'
                 '\n'
                 '      If *key* jest w the dictionary, zwróć its value.  If '
                 'not, insert\n'
                 '      *key* przy a value of *default* oraz zwróć '
                 '*default*.  *default*\n'
                 '      defaults to "Nic".\n'
                 '\n'
                 '   update([other])\n'
                 '\n'
                 '      Update the dictionary przy the key/value pairs z '
                 '*other*,\n'
                 '      overwriting existing keys.  Return "Nic".\n'
                 '\n'
                 '      "update()" accepts either another dictionary object '
                 'or an\n'
                 '      iterable of key/value pairs (as tuples albo other '
                 'iterables of\n'
                 '      length two).  If keyword arguments are specified, '
                 'the dictionary\n'
                 '      jest then updated przy those key/value pairs: '
                 '"d.update(red=1,\n'
                 '      blue=2)".\n'
                 '\n'
                 '   values()\n'
                 '\n'
                 "      Return a new view of the dictionary's values.  See "
                 'the\n'
                 '      *documentation of view objects*.\n'
                 '\n'
                 '   Dictionaries compare equal jeżeli oraz only jeżeli they have the '
                 'same "(key,\n'
                 '   value)" pairs. Order comparisons (\'<\', \'<=\', '
                 "'>=', '>') podnieś\n"
                 '   "TypeError".\n'
                 '\n'
                 'See also: "types.MappingProxyType" can be used to create a '
                 'read-only\n'
                 '  view of a "dict".\n'
                 '\n'
                 '\n'
                 'Dictionary view objects\n'
                 '=======================\n'
                 '\n'
                 'The objects returned by "dict.keys()", "dict.values()" '
                 'and\n'
                 '"dict.items()" are *view objects*.  They provide a dynamic '
                 'view on the\n'
                 "dictionary's entries, which means that when the dictionary "
                 'changes,\n'
                 'the view reflects these changes.\n'
                 '\n'
                 'Dictionary views can be iterated over to uzyskaj their '
                 'respective data,\n'
                 'and support membership tests:\n'
                 '\n'
                 'len(dictview)\n'
                 '\n'
                 '   Return the number of entries w the dictionary.\n'
                 '\n'
                 'iter(dictview)\n'
                 '\n'
                 '   Return an iterator over the keys, values albo items '
                 '(represented as\n'
                 '   tuples of "(key, value)") w the dictionary.\n'
                 '\n'
                 '   Keys oraz values are iterated over w an arbitrary order '
                 'which is\n'
                 '   non-random, varies across Python implementations, oraz '
                 'depends on\n'
                 "   the dictionary's history of insertions oraz deletions. "
                 'If keys,\n'
                 '   values oraz items views are iterated over przy no '
                 'intervening\n'
                 '   modifications to the dictionary, the order of items '
                 'will directly\n'
                 '   correspond.  This allows the creation of "(value, key)" '
                 'pairs using\n'
                 '   "zip()": "pairs = zip(d.values(), d.keys())".  Another '
                 'way to\n'
                 '   create the same list jest "pairs = [(v, k) dla (k, v) w '
                 'd.items()]".\n'
                 '\n'
                 '   Iterating views dopóki adding albo deleting entries w the '
                 'dictionary\n'
                 '   may podnieś a "RuntimeError" albo fail to iterate over all '
                 'entries.\n'
                 '\n'
                 'x w dictview\n'
                 '\n'
                 '   Return "Prawda" jeżeli *x* jest w the underlying dictionary\'s '
                 'keys, values\n'
                 '   albo items (in the latter case, *x* should be a "(key, '
                 'value)"\n'
                 '   tuple).\n'
                 '\n'
                 'Keys views are set-like since their entries are unique oraz '
                 'hashable.\n'
                 'If all values are hashable, so that "(key, value)" pairs '
                 'are unique\n'
                 'and hashable, then the items view jest also set-like.  '
                 '(Values views are\n'
                 'not treated jako set-like since the entries are generally '
                 'not unique.)\n'
                 'For set-like views, all of the operations defined dla the '
                 'abstract\n'
                 'base klasa "collections.abc.Set" are available (dla '
                 'example, "==",\n'
                 '"<", albo "^").\n'
                 '\n'
                 'An example of dictionary view usage:\n'
                 '\n'
                 "   >>> dishes = {'eggs': 2, 'sausage': 1, 'bacon': 1, "
                 "'spam': 500}\n"
                 '   >>> keys = dishes.keys()\n'
                 '   >>> values = dishes.values()\n'
                 '\n'
                 '   >>> # iteration\n'
                 '   >>> n = 0\n'
                 '   >>> dla val w values:\n'
                 '   ...     n += val\n'
                 '   >>> print(n)\n'
                 '   504\n'
                 '\n'
                 '   >>> # keys oraz values are iterated over w the same '
                 'order\n'
                 '   >>> list(keys)\n'
                 "   ['eggs', 'bacon', 'sausage', 'spam']\n"
                 '   >>> list(values)\n'
                 '   [2, 1, 1, 500]\n'
                 '\n'
                 '   >>> # view objects are dynamic oraz reflect dict '
                 'changes\n'
                 "   >>> usuń dishes['eggs']\n"
                 "   >>> usuń dishes['sausage']\n"
                 '   >>> list(keys)\n'
                 "   ['spam', 'bacon']\n"
                 '\n'
                 '   >>> # set operations\n'
                 "   >>> keys & {'eggs', 'bacon', 'salad'}\n"
                 "   {'bacon'}\n"
                 "   >>> keys ^ {'sausage', 'juice'}\n"
                 "   {'juice', 'sausage', 'bacon', 'spam'}\n",
 'typesmethods': '\n'
                 'Methods\n'
                 '*******\n'
                 '\n'
                 'Methods are functions that are called using the attribute '
                 'notation.\n'
                 'There are two flavors: built-in methods (such jako '
                 '"append()" on lists)\n'
                 'and klasa instance methods.  Built-in methods are '
                 'described przy the\n'
                 'types that support them.\n'
                 '\n'
                 'If you access a method (a function defined w a klasa '
                 'namespace)\n'
                 'through an instance, you get a special object: a *bound '
                 'method* (also\n'
                 'called *instance method*) object. When called, it will add '
                 'the "self"\n'
                 'argument to the argument list.  Bound methods have two '
                 'special read-\n'
                 'only attributes: "m.__self__" jest the object on which the '
                 'method\n'
                 'operates, oraz "m.__func__" jest the function implementing '
                 'the method.\n'
                 'Calling "m(arg-1, arg-2, ..., arg-n)" jest completely '
                 'equivalent to\n'
                 'calling "m.__func__(m.__self__, arg-1, arg-2, ..., '
                 'arg-n)".\n'
                 '\n'
                 'Like function objects, bound method objects support '
                 'getting arbitrary\n'
                 'attributes.  However, since method attributes are actually '
                 'stored on\n'
                 'the underlying function object ("meth.__func__"), setting '
                 'method\n'
                 'attributes on bound methods jest disallowed.  Attempting to '
                 'set an\n'
                 'attribute on a method results w an "AttributeError" being '
                 'raised.  In\n'
                 'order to set a method attribute, you need to explicitly '
                 'set it on the\n'
                 'underlying function object:\n'
                 '\n'
                 '   >>> klasa C:\n'
                 '   ...     def method(self):\n'
                 '   ...         dalej\n'
                 '   ...\n'
                 '   >>> c = C()\n'
                 "   >>> c.method.whoami = 'my name jest method'  # can't set "
                 'on the method\n'
                 '   Traceback (most recent call last):\n'
                 '     File "<stdin>", line 1, w <module>\n'
                 "   AttributeError: 'method' object has no attribute "
                 "'whoami'\n"
                 "   >>> c.method.__func__.whoami = 'my name jest method'\n"
                 '   >>> c.method.whoami\n'
                 "   'my name jest method'\n"
                 '\n'
                 'See *The standard type hierarchy* dla more information.\n',
 'typesmodules': '\n'
                 'Modules\n'
                 '*******\n'
                 '\n'
                 'The only special operation on a module jest attribute '
                 'access: "m.name",\n'
                 'where *m* jest a module oraz *name* accesses a name defined '
                 "in *m*'s\n"
                 'symbol table. Module attributes can be assigned to.  (Note '
                 'that the\n'
                 '"import" statement jest not, strictly speaking, an operation '
                 'on a module\n'
                 'object; "zaimportuj foo" does nie require a module object '
                 'named *foo* to\n'
                 'exist, rather it requires an (external) *definition* dla a '
                 'module\n'
                 'named *foo* somewhere.)\n'
                 '\n'
                 'A special attribute of every module jest "__dict__". This jest '
                 'the\n'
                 "dictionary containing the module's symbol table. Modifying "
                 'this\n'
                 "dictionary will actually change the module's symbol table, "
                 'but direct\n'
                 'assignment to the "__dict__" attribute jest nie possible '
                 '(you can write\n'
                 '"m.__dict__[\'a\'] = 1", which defines "m.a" to be "1", '
                 "but you can't\n"
                 'write "m.__dict__ = {}").  Modifying "__dict__" directly '
                 'is not\n'
                 'recommended.\n'
                 '\n'
                 'Modules built into the interpreter are written like this: '
                 '"<module\n'
                 '\'sys\' (built-in)>".  If loaded z a file, they are '
                 'written as\n'
                 '"<module \'os\' z '
                 '\'/usr/local/lib/pythonX.Y/os.pyc\'>".\n',
 'typesseq': '\n'
             'Sequence Types --- "list", "tuple", "range"\n'
             '*******************************************\n'
             '\n'
             'There are three basic sequence types: lists, tuples, oraz '
             'range\n'
             'objects. Additional sequence types tailored dla processing of '
             '*binary\n'
             'data* oraz *text strings* are described w dedicated sections.\n'
             '\n'
             '\n'
             'Common Sequence Operations\n'
             '==========================\n'
             '\n'
             'The operations w the following table are supported by most '
             'sequence\n'
             'types, both mutable oraz immutable. The '
             '"collections.abc.Sequence" ABC\n'
             'is provided to make it easier to correctly implement these '
             'operations\n'
             'on custom sequence types.\n'
             '\n'
             'This table lists the sequence operations sorted w ascending '
             'priority.\n'
             'In the table, *s* oraz *t* are sequences of the same type, *n*, '
             '*i*,\n'
             '*j* oraz *k* are integers oraz *x* jest an arbitrary object that '
             'meets any\n'
             'type oraz value restrictions imposed by *s*.\n'
             '\n'
             'The "in" oraz "not in" operations have the same priorities jako '
             'the\n'
             'comparison operations. The "+" (concatenation) oraz "*" '
             '(repetition)\n'
             'operations have the same priority jako the corresponding '
             'numeric\n'
             'operations.\n'
             '\n'
             '+----------------------------+----------------------------------+------------+\n'
             '| Operation                  | '
             'Result                           | Notes      |\n'
             '+============================+==================================+============+\n'
             '| "x w s"                   | "Prawda" jeżeli an item of *s* '
             'is      | (1)        |\n'
             '|                            | equal to *x*, inaczej '
             '"Nieprawda"       |            |\n'
             '+----------------------------+----------------------------------+------------+\n'
             '| "x nie w s"               | "Nieprawda" jeżeli an item of *s* '
             'is     | (1)        |\n'
             '|                            | equal to *x*, inaczej '
             '"Prawda"        |            |\n'
             '+----------------------------+----------------------------------+------------+\n'
             '| "s + t"                    | the concatenation of *s* oraz '
             '*t* | (6)(7)     |\n'
             '+----------------------------+----------------------------------+------------+\n'
             '| "s * n" albo "n * s"         | *n* shallow copies of '
             '*s*        | (2)(7)     |\n'
             '|                            | '
             'concatenated                     |            |\n'
             '+----------------------------+----------------------------------+------------+\n'
             '| "s[i]"                     | *i*th item of *s*, origin '
             '0      | (3)        |\n'
             '+----------------------------+----------------------------------+------------+\n'
             '| "s[i:j]"                   | slice of *s* z *i* to '
             '*j*     | (3)(4)     |\n'
             '+----------------------------+----------------------------------+------------+\n'
             '| "s[i:j:k]"                 | slice of *s* z *i* to '
             '*j*     | (3)(5)     |\n'
             '|                            | przy step '
             '*k*                    |            |\n'
             '+----------------------------+----------------------------------+------------+\n'
             '| "len(s)"                   | length of '
             '*s*                    |            |\n'
             '+----------------------------+----------------------------------+------------+\n'
             '| "min(s)"                   | smallest item of '
             '*s*             |            |\n'
             '+----------------------------+----------------------------------+------------+\n'
             '| "max(s)"                   | largest item of '
             '*s*              |            |\n'
             '+----------------------------+----------------------------------+------------+\n'
             '| "s.index(x[, i[, j]])"     | index of the first occurrence '
             'of | (8)        |\n'
             '|                            | *x* w *s* (at albo after '
             'index    |            |\n'
             '|                            | *i* oraz before index '
             '*j*)        |            |\n'
             '+----------------------------+----------------------------------+------------+\n'
             '| "s.count(x)"               | total number of occurrences '
             'of   |            |\n'
             '|                            | *x* w '
             '*s*                       |            |\n'
             '+----------------------------+----------------------------------+------------+\n'
             '\n'
             'Sequences of the same type also support comparisons.  In '
             'particular,\n'
             'tuples oraz lists are compared lexicographically by comparing\n'
             'corresponding elements. This means that to compare equal, '
             'every\n'
             'element must compare equal oraz the two sequences must be of '
             'the same\n'
             'type oraz have the same length.  (For full details see '
             '*Comparisons* in\n'
             'the language reference.)\n'
             '\n'
             'Notes:\n'
             '\n'
             '1. While the "in" oraz "not in" operations are used only dla '
             'simple\n'
             '   containment testing w the general case, some specialised '
             'sequences\n'
             '   (such jako "str", "bytes" oraz "bytearray") also use them for\n'
             '   subsequence testing:\n'
             '\n'
             '      >>> "gg" w "eggs"\n'
             '      Prawda\n'
             '\n'
             '2. Values of *n* less than "0" are treated jako "0" (which '
             'uzyskajs an\n'
             '   empty sequence of the same type jako *s*).  Note also that '
             'the copies\n'
             '   are shallow; nested structures are nie copied.  This often '
             'haunts\n'
             '   new Python programmers; consider:\n'
             '\n'
             '      >>> lists = [[]] * 3\n'
             '      >>> lists\n'
             '      [[], [], []]\n'
             '      >>> lists[0].append(3)\n'
             '      >>> lists\n'
             '      [[3], [3], [3]]\n'
             '\n'
             '   What has happened jest that "[[]]" jest a one-element list '
             'containing\n'
             '   an empty list, so all three elements of "[[]] * 3" are '
             '(pointers\n'
             '   to) this single empty list.  Modifying any of the elements '
             'of\n'
             '   "lists" modifies this single list. You can create a list '
             'of\n'
             '   different lists this way:\n'
             '\n'
             '      >>> lists = [[] dla i w range(3)]\n'
             '      >>> lists[0].append(3)\n'
             '      >>> lists[1].append(5)\n'
             '      >>> lists[2].append(7)\n'
             '      >>> lists\n'
             '      [[3], [5], [7]]\n'
             '\n'
             '3. If *i* albo *j* jest negative, the index jest relative to the end '
             'of\n'
             '   the string: "len(s) + i" albo "len(s) + j" jest substituted.  '
             'But note\n'
             '   that "-0" jest still "0".\n'
             '\n'
             '4. The slice of *s* z *i* to *j* jest defined jako the sequence '
             'of\n'
             '   items przy index *k* such that "i <= k < j".  If *i* albo *j* '
             'is\n'
             '   greater than "len(s)", use "len(s)".  If *i* jest omitted albo '
             '"Nic",\n'
             '   use "0".  If *j* jest omitted albo "Nic", use "len(s)".  If '
             '*i* is\n'
             '   greater than albo equal to *j*, the slice jest empty.\n'
             '\n'
             '5. The slice of *s* z *i* to *j* przy step *k* jest defined '
             'as the\n'
             '   sequence of items przy index  "x = i + n*k" such that "0 <= '
             'n <\n'
             '   (j-i)/k".  In other words, the indices are "i", "i+k", '
             '"i+2*k",\n'
             '   "i+3*k" oraz so on, stopping when *j* jest reached (but never\n'
             '   including *j*).  If *i* albo *j* jest greater than "len(s)", '
             'use\n'
             '   "len(s)".  If *i* albo *j* are omitted albo "Nic", they become '
             '"end"\n'
             '   values (which end depends on the sign of *k*).  Note, *k* '
             'cannot be\n'
             '   zero. If *k* jest "Nic", it jest treated like "1".\n'
             '\n'
             '6. Concatenating immutable sequences always results w a new\n'
             '   object. This means that building up a sequence by repeated\n'
             '   concatenation will have a quadratic runtime cost w the '
             'total\n'
             '   sequence length. To get a linear runtime cost, you must '
             'switch to\n'
             '   one of the alternatives below:\n'
             '\n'
             '   * jeżeli concatenating "str" objects, you can build a list oraz '
             'use\n'
             '     "str.join()" at the end albo inaczej write to a "io.StringIO" '
             'instance\n'
             '     oraz retrieve its value when complete\n'
             '\n'
             '   * jeżeli concatenating "bytes" objects, you can similarly use\n'
             '     "bytes.join()" albo "io.BytesIO", albo you can do in-place\n'
             '     concatenation przy a "bytearray" object.  "bytearray" '
             'objects are\n'
             '     mutable oraz have an efficient overallocation mechanism\n'
             '\n'
             '   * jeżeli concatenating "tuple" objects, extend a "list" '
             'instead\n'
             '\n'
             '   * dla other types, investigate the relevant klasa '
             'documentation\n'
             '\n'
             '7. Some sequence types (such jako "range") only support item\n'
             "   sequences that follow specific patterns, oraz hence don't "
             'support\n'
             '   sequence concatenation albo repetition.\n'
             '\n'
             '8. "index" podnieśs "ValueError" when *x* jest nie found w *s*. '
             'When\n'
             '   supported, the additional arguments to the index method '
             'allow\n'
             '   efficient searching of subsections of the sequence. Passing '
             'the\n'
             '   extra arguments jest roughly equivalent to using '
             '"s[i:j].index(x)",\n'
             '   only without copying any data oraz przy the returned index '
             'being\n'
             '   relative to the start of the sequence rather than the start '
             'of the\n'
             '   slice.\n'
             '\n'
             '\n'
             'Immutable Sequence Types\n'
             '========================\n'
             '\n'
             'The only operation that immutable sequence types generally '
             'implement\n'
             'that jest nie also implemented by mutable sequence types jest '
             'support for\n'
             'the "hash()" built-in.\n'
             '\n'
             'This support allows immutable sequences, such jako "tuple" '
             'instances, to\n'
             'be used jako "dict" keys oraz stored w "set" oraz "frozenset" '
             'instances.\n'
             '\n'
             'Attempting to hash an immutable sequence that contains '
             'unhashable\n'
             'values will result w "TypeError".\n'
             '\n'
             '\n'
             'Mutable Sequence Types\n'
             '======================\n'
             '\n'
             'The operations w the following table are defined on mutable '
             'sequence\n'
             'types. The "collections.abc.MutableSequence" ABC jest provided '
             'to make\n'
             'it easier to correctly implement these operations on custom '
             'sequence\n'
             'types.\n'
             '\n'
             'In the table *s* jest an instance of a mutable sequence type, '
             '*t* jest any\n'
             'iterable object oraz *x* jest an arbitrary object that meets any '
             'type and\n'
             'value restrictions imposed by *s* (dla example, "bytearray" '
             'only\n'
             'accepts integers that meet the value restriction "0 <= x <= '
             '255").\n'
             '\n'
             '+--------------------------------+----------------------------------+-----------------------+\n'
             '| Operation                      | '
             'Result                           | Notes                 |\n'
             '+================================+==================================+=======================+\n'
             '| "s[i] = x"                     | item *i* of *s* jest replaced '
             'by   |                       |\n'
             '|                                | '
             '*x*                              |                       |\n'
             '+--------------------------------+----------------------------------+-----------------------+\n'
             '| "s[i:j] = t"                   | slice of *s* z *i* to '
             '*j* jest  |                       |\n'
             '|                                | replaced by the contents of '
             'the  |                       |\n'
             '|                                | iterable '
             '*t*                     |                       |\n'
             '+--------------------------------+----------------------------------+-----------------------+\n'
             '| "usuń s[i:j]"                   | same jako "s[i:j] = '
             '[]"            |                       |\n'
             '+--------------------------------+----------------------------------+-----------------------+\n'
             '| "s[i:j:k] = t"                 | the elements of "s[i:j:k]" '
             'are   | (1)                   |\n'
             '|                                | replaced by those of '
             '*t*         |                       |\n'
             '+--------------------------------+----------------------------------+-----------------------+\n'
             '| "usuń s[i:j:k]"                 | removes the elements '
             'of          |                       |\n'
             '|                                | "s[i:j:k]" z the '
             'list         |                       |\n'
             '+--------------------------------+----------------------------------+-----------------------+\n'
             '| "s.append(x)"                  | appends *x* to the end of '
             'the    |                       |\n'
             '|                                | sequence (same '
             'as                |                       |\n'
             '|                                | "s[len(s):len(s)] = '
             '[x]")        |                       |\n'
             '+--------------------------------+----------------------------------+-----------------------+\n'
             '| "s.clear()"                    | removes all items z "s" '
             '(same | (5)                   |\n'
             '|                                | jako "usuń '
             's[:]")                   |                       |\n'
             '+--------------------------------+----------------------------------+-----------------------+\n'
             '| "s.copy()"                     | creates a shallow copy of '
             '"s"    | (5)                   |\n'
             '|                                | (same jako '
             '"s[:]")                 |                       |\n'
             '+--------------------------------+----------------------------------+-----------------------+\n'
             '| "s.extend(t)"                  | extends *s* przy the '
             'contents of |                       |\n'
             '|                                | *t* (same jako '
             '"s[len(s):len(s)] = |                       |\n'
             '|                                | '
             't")                              |                       |\n'
             '+--------------------------------+----------------------------------+-----------------------+\n'
             '| "s.insert(i, x)"               | inserts *x* into *s* at '
             'the      |                       |\n'
             '|                                | index given by *i* (same '
             'as      |                       |\n'
             '|                                | "s[i:i] = '
             '[x]")                  |                       |\n'
             '+--------------------------------+----------------------------------+-----------------------+\n'
             '| "s.pop([i])"                   | retrieves the item at *i* '
             'and    | (2)                   |\n'
             '|                                | also removes it z '
             '*s*         |                       |\n'
             '+--------------------------------+----------------------------------+-----------------------+\n'
             '| "s.remove(x)"                  | remove the first item z '
             '*s*   | (3)                   |\n'
             '|                                | where "s[i] == '
             'x"                |                       |\n'
             '+--------------------------------+----------------------------------+-----------------------+\n'
             '| "s.reverse()"                  | reverses the items of *s* '
             'in     | (4)                   |\n'
             '|                                | '
             'place                            |                       |\n'
             '+--------------------------------+----------------------------------+-----------------------+\n'
             '\n'
             'Notes:\n'
             '\n'
             '1. *t* must have the same length jako the slice it jest '
             'replacing.\n'
             '\n'
             '2. The optional argument *i* defaults to "-1", so that by '
             'default\n'
             '   the last item jest removed oraz returned.\n'
             '\n'
             '3. "remove" podnieśs "ValueError" when *x* jest nie found w *s*.\n'
             '\n'
             '4. The "reverse()" method modifies the sequence w place for\n'
             '   economy of space when reversing a large sequence.  To '
             'remind users\n'
             '   that it operates by side effect, it does nie zwróć the '
             'reversed\n'
             '   sequence.\n'
             '\n'
             '5. "clear()" oraz "copy()" are included dla consistency przy '
             'the\n'
             "   interfaces of mutable containers that don't support "
             'slicing\n'
             '   operations (such jako "dict" oraz "set")\n'
             '\n'
             '   New w version 3.3: "clear()" oraz "copy()" methods.\n'
             '\n'
             '\n'
             'Lists\n'
             '=====\n'
             '\n'
             'Lists are mutable sequences, typically used to store '
             'collections of\n'
             'homogeneous items (where the precise degree of similarity will '
             'vary by\n'
             'application).\n'
             '\n'
             'class klasa list([iterable])\n'
             '\n'
             '   Lists may be constructed w several ways:\n'
             '\n'
             '   * Using a pair of square brackets to denote the empty list: '
             '"[]"\n'
             '\n'
             '   * Using square brackets, separating items przy commas: '
             '"[a]",\n'
             '     "[a, b, c]"\n'
             '\n'
             '   * Using a list comprehension: "[x dla x w iterable]"\n'
             '\n'
             '   * Using the type constructor: "list()" albo "list(iterable)"\n'
             '\n'
             '   The constructor builds a list whose items are the same oraz '
             'in the\n'
             "   same order jako *iterable*'s items.  *iterable* may be either "
             'a\n'
             '   sequence, a container that supports iteration, albo an '
             'iterator\n'
             '   object.  If *iterable* jest already a list, a copy jest made '
             'and\n'
             '   returned, similar to "iterable[:]". For example, '
             '"list(\'abc\')"\n'
             '   returns "[\'a\', \'b\', \'c\']" oraz "list( (1, 2, 3) )" '
             'returns "[1, 2,\n'
             '   3]". If no argument jest given, the constructor creates a new '
             'empty\n'
             '   list, "[]".\n'
             '\n'
             '   Many other operations also produce lists, including the '
             '"sorted()"\n'
             '   built-in.\n'
             '\n'
             '   Lists implement all of the *common* oraz *mutable* sequence\n'
             '   operations. Lists also provide the following additional '
             'method:\n'
             '\n'
             '   sort(*, key=Nic, reverse=Nic)\n'
             '\n'
             '      This method sorts the list w place, using only "<" '
             'comparisons\n'
             '      between items. Exceptions are nie suppressed - jeżeli any '
             'comparison\n'
             '      operations fail, the entire sort operation will fail '
             '(and the\n'
             '      list will likely be left w a partially modified '
             'state).\n'
             '\n'
             '      "sort()" accepts two arguments that can only be dalejed '
             'by\n'
             '      keyword (*keyword-only arguments*):\n'
             '\n'
             '      *key* specifies a function of one argument that jest used '
             'to\n'
             '      extract a comparison key z each list element (dla '
             'example,\n'
             '      "key=str.lower"). The key corresponding to each item w '
             'the list\n'
             '      jest calculated once oraz then used dla the entire sorting '
             'process.\n'
             '      The default value of "Nic" means that list items are '
             'sorted\n'
             '      directly without calculating a separate key value.\n'
             '\n'
             '      The "functools.cmp_to_key()" utility jest available to '
             'convert a\n'
             '      2.x style *cmp* function to a *key* function.\n'
             '\n'
             '      *reverse* jest a boolean value.  If set to "Prawda", then '
             'the list\n'
             '      elements are sorted jako jeżeli each comparison were '
             'reversed.\n'
             '\n'
             '      This method modifies the sequence w place dla economy '
             'of space\n'
             '      when sorting a large sequence.  To remind users that it '
             'operates\n'
             '      by side effect, it does nie zwróć the sorted sequence '
             '(use\n'
             '      "sorted()" to explicitly request a new sorted list '
             'instance).\n'
             '\n'
             '      The "sort()" method jest guaranteed to be stable.  A sort '
             'is\n'
             '      stable jeżeli it guarantees nie to change the relative order '
             'of\n'
             '      elements that compare equal --- this jest helpful dla '
             'sorting in\n'
             '      multiple dalejes (dla example, sort by department, then '
             'by salary\n'
             '      grade).\n'
             '\n'
             '      **CPython implementation detail:** While a list jest being '
             'sorted,\n'
             '      the effect of attempting to mutate, albo even inspect, the '
             'list is\n'
             '      undefined.  The C implementation of Python makes the '
             'list appear\n'
             '      empty dla the duration, oraz podnieśs "ValueError" jeżeli it '
             'can detect\n'
             '      that the list has been mutated during a sort.\n'
             '\n'
             '\n'
             'Tuples\n'
             '======\n'
             '\n'
             'Tuples are immutable sequences, typically used to store '
             'collections of\n'
             'heterogeneous data (such jako the 2-tuples produced by the '
             '"enumerate()"\n'
             'built-in). Tuples are also used dla cases where an immutable '
             'sequence\n'
             'of homogeneous data jest needed (such jako allowing storage w a '
             '"set" or\n'
             '"dict" instance).\n'
             '\n'
             'class klasa tuple([iterable])\n'
             '\n'
             '   Tuples may be constructed w a number of ways:\n'
             '\n'
             '   * Using a pair of parentheses to denote the empty tuple: '
             '"()"\n'
             '\n'
             '   * Using a trailing comma dla a singleton tuple: "a," albo '
             '"(a,)"\n'
             '\n'
             '   * Separating items przy commas: "a, b, c" albo "(a, b, c)"\n'
             '\n'
             '   * Using the "tuple()" built-in: "tuple()" albo '
             '"tuple(iterable)"\n'
             '\n'
             '   The constructor builds a tuple whose items are the same oraz '
             'in the\n'
             "   same order jako *iterable*'s items.  *iterable* may be either "
             'a\n'
             '   sequence, a container that supports iteration, albo an '
             'iterator\n'
             '   object.  If *iterable* jest already a tuple, it jest returned\n'
             '   unchanged. For example, "tuple(\'abc\')" returns "(\'a\', '
             '\'b\', \'c\')"\n'
             '   oraz "tuple( [1, 2, 3] )" returns "(1, 2, 3)". If no '
             'argument is\n'
             '   given, the constructor creates a new empty tuple, "()".\n'
             '\n'
             '   Note that it jest actually the comma which makes a tuple, nie '
             'the\n'
             '   parentheses. The parentheses are optional, wyjąwszy w the '
             'empty\n'
             '   tuple case, albo when they are needed to avoid syntactic '
             'ambiguity.\n'
             '   For example, "f(a, b, c)" jest a function call przy three '
             'arguments,\n'
             '   dopóki "f((a, b, c))" jest a function call przy a 3-tuple jako '
             'the sole\n'
             '   argument.\n'
             '\n'
             '   Tuples implement all of the *common* sequence operations.\n'
             '\n'
             'For heterogeneous collections of data where access by name jest '
             'clearer\n'
             'than access by index, "collections.namedtuple()" may be a '
             'more\n'
             'appropriate choice than a simple tuple object.\n'
             '\n'
             '\n'
             'Ranges\n'
             '======\n'
             '\n'
             'The "range" type represents an immutable sequence of numbers '
             'and is\n'
             'commonly used dla looping a specific number of times w "for" '
             'loops.\n'
             '\n'
             'class klasa range(stop)\n'
             'class klasa range(start, stop[, step])\n'
             '\n'
             '   The arguments to the range constructor must be integers '
             '(either\n'
             '   built-in "int" albo any object that implements the '
             '"__index__"\n'
             '   special method).  If the *step* argument jest omitted, it '
             'defaults to\n'
             '   "1". If the *start* argument jest omitted, it defaults to '
             '"0". If\n'
             '   *step* jest zero, "ValueError" jest podnieśd.\n'
             '\n'
             '   For a positive *step*, the contents of a range "r" are '
             'determined\n'
             '   by the formula "r[i] = start + step*i" where "i >= 0" oraz '
             '"r[i] <\n'
             '   stop".\n'
             '\n'
             '   For a negative *step*, the contents of the range are still\n'
             '   determined by the formula "r[i] = start + step*i", but the\n'
             '   constraints are "i >= 0" oraz "r[i] > stop".\n'
             '\n'
             '   A range object will be empty jeżeli "r[0]" does nie meet the '
             'value\n'
             '   constraint. Ranges do support negative indices, but these '
             'are\n'
             '   interpreted jako indexing z the end of the sequence '
             'determined by\n'
             '   the positive indices.\n'
             '\n'
             '   Ranges containing absolute values larger than "sys.maxsize" '
             'are\n'
             '   permitted but some features (such jako "len()") may podnieś\n'
             '   "OverflowError".\n'
             '\n'
             '   Range examples:\n'
             '\n'
             '      >>> list(range(10))\n'
             '      [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n'
             '      >>> list(range(1, 11))\n'
             '      [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n'
             '      >>> list(range(0, 30, 5))\n'
             '      [0, 5, 10, 15, 20, 25]\n'
             '      >>> list(range(0, 10, 3))\n'
             '      [0, 3, 6, 9]\n'
             '      >>> list(range(0, -10, -1))\n'
             '      [0, -1, -2, -3, -4, -5, -6, -7, -8, -9]\n'
             '      >>> list(range(0))\n'
             '      []\n'
             '      >>> list(range(1, 0))\n'
             '      []\n'
             '\n'
             '   Ranges implement all of the *common* sequence operations '
             'except\n'
             '   concatenation oraz repetition (due to the fact that range '
             'objects\n'
             '   can only represent sequences that follow a strict pattern '
             'and\n'
             '   repetition oraz concatenation will usually violate that '
             'pattern).\n'
             '\n'
             'The advantage of the "range" type over a regular "list" albo '
             '"tuple" is\n'
             'that a "range" object will always take the same (small) amount '
             'of\n'
             'memory, no matter the size of the range it represents (as it '
             'only\n'
             'stores the "start", "stop" oraz "step" values, calculating '
             'individual\n'
             'items oraz subranges jako needed).\n'
             '\n'
             'Range objects implement the "collections.abc.Sequence" ABC, '
             'and\n'
             'provide features such jako containment tests, element index '
             'lookup,\n'
             'slicing oraz support dla negative indices (see *Sequence Types '
             '---\n'
             'list, tuple, range*):\n'
             '\n'
             '>>> r = range(0, 20, 2)\n'
             '>>> r\n'
             'range(0, 20, 2)\n'
             '>>> 11 w r\n'
             'Nieprawda\n'
             '>>> 10 w r\n'
             'Prawda\n'
             '>>> r.index(10)\n'
             '5\n'
             '>>> r[5]\n'
             '10\n'
             '>>> r[:5]\n'
             'range(0, 10, 2)\n'
             '>>> r[-1]\n'
             '18\n'
             '\n'
             'Testing range objects dla equality przy "==" oraz "!=" compares '
             'them as\n'
             'sequences.  That is, two range objects are considered equal jeżeli '
             'they\n'
             'represent the same sequence of values.  (Note that two range '
             'objects\n'
             'that compare equal might have different "start", "stop" oraz '
             '"step"\n'
             'attributes, dla example "range(0) == range(2, 1, 3)" albo '
             '"range(0, 3,\n'
             '2) == range(0, 4, 2)".)\n'
             '\n'
             'Changed w version 3.2: Implement the Sequence ABC. Support '
             'slicing\n'
             'and negative indices. Test "int" objects dla membership w '
             'constant\n'
             'time instead of iterating through all items.\n'
             '\n'
             "Changed w version 3.3: Define '==' oraz '!=' to compare range "
             'objects\n'
             'based on the sequence of values they define (instead of '
             'comparing\n'
             'based on object identity).\n'
             '\n'
             'New w version 3.3: The "start", "stop" oraz "step" '
             'attributes.\n',
 'typesseq-mutable': '\n'
                     'Mutable Sequence Types\n'
                     '**********************\n'
                     '\n'
                     'The operations w the following table are defined on '
                     'mutable sequence\n'
                     'types. The "collections.abc.MutableSequence" ABC jest '
                     'provided to make\n'
                     'it easier to correctly implement these operations on '
                     'custom sequence\n'
                     'types.\n'
                     '\n'
                     'In the table *s* jest an instance of a mutable sequence '
                     'type, *t* jest any\n'
                     'iterable object oraz *x* jest an arbitrary object that '
                     'meets any type and\n'
                     'value restrictions imposed by *s* (dla example, '
                     '"bytearray" only\n'
                     'accepts integers that meet the value restriction "0 <= '
                     'x <= 255").\n'
                     '\n'
                     '+--------------------------------+----------------------------------+-----------------------+\n'
                     '| Operation                      | '
                     'Result                           | '
                     'Notes                 |\n'
                     '+================================+==================================+=======================+\n'
                     '| "s[i] = x"                     | item *i* of *s* jest '
                     'replaced by   |                       |\n'
                     '|                                | '
                     '*x*                              '
                     '|                       |\n'
                     '+--------------------------------+----------------------------------+-----------------------+\n'
                     '| "s[i:j] = t"                   | slice of *s* z '
                     '*i* to *j* jest  |                       |\n'
                     '|                                | replaced by the '
                     'contents of the  |                       |\n'
                     '|                                | iterable '
                     '*t*                     |                       |\n'
                     '+--------------------------------+----------------------------------+-----------------------+\n'
                     '| "usuń s[i:j]"                   | same jako "s[i:j] = '
                     '[]"            |                       |\n'
                     '+--------------------------------+----------------------------------+-----------------------+\n'
                     '| "s[i:j:k] = t"                 | the elements of '
                     '"s[i:j:k]" are   | (1)                   |\n'
                     '|                                | replaced by those '
                     'of *t*         |                       |\n'
                     '+--------------------------------+----------------------------------+-----------------------+\n'
                     '| "usuń s[i:j:k]"                 | removes the '
                     'elements of          |                       |\n'
                     '|                                | "s[i:j:k]" z the '
                     'list         |                       |\n'
                     '+--------------------------------+----------------------------------+-----------------------+\n'
                     '| "s.append(x)"                  | appends *x* to the '
                     'end of the    |                       |\n'
                     '|                                | sequence (same '
                     'as                |                       |\n'
                     '|                                | "s[len(s):len(s)] = '
                     '[x]")        |                       |\n'
                     '+--------------------------------+----------------------------------+-----------------------+\n'
                     '| "s.clear()"                    | removes all items '
                     'z "s" (same | (5)                   |\n'
                     '|                                | jako "usuń '
                     's[:]")                   |                       |\n'
                     '+--------------------------------+----------------------------------+-----------------------+\n'
                     '| "s.copy()"                     | creates a shallow '
                     'copy of "s"    | (5)                   |\n'
                     '|                                | (same jako '
                     '"s[:]")                 |                       |\n'
                     '+--------------------------------+----------------------------------+-----------------------+\n'
                     '| "s.extend(t)"                  | extends *s* przy '
                     'the contents of |                       |\n'
                     '|                                | *t* (same jako '
                     '"s[len(s):len(s)] = |                       |\n'
                     '|                                | '
                     't")                              '
                     '|                       |\n'
                     '+--------------------------------+----------------------------------+-----------------------+\n'
                     '| "s.insert(i, x)"               | inserts *x* into '
                     '*s* at the      |                       |\n'
                     '|                                | index given by *i* '
                     '(same jako      |                       |\n'
                     '|                                | "s[i:i] = '
                     '[x]")                  |                       |\n'
                     '+--------------------------------+----------------------------------+-----------------------+\n'
                     '| "s.pop([i])"                   | retrieves the item '
                     'at *i* oraz    | (2)                   |\n'
                     '|                                | also removes it '
                     'z *s*         |                       |\n'
                     '+--------------------------------+----------------------------------+-----------------------+\n'
                     '| "s.remove(x)"                  | remove the first '
                     'item z *s*   | (3)                   |\n'
                     '|                                | where "s[i] == '
                     'x"                |                       |\n'
                     '+--------------------------------+----------------------------------+-----------------------+\n'
                     '| "s.reverse()"                  | reverses the items '
                     'of *s* w     | (4)                   |\n'
                     '|                                | '
                     'place                            '
                     '|                       |\n'
                     '+--------------------------------+----------------------------------+-----------------------+\n'
                     '\n'
                     'Notes:\n'
                     '\n'
                     '1. *t* must have the same length jako the slice it jest '
                     'replacing.\n'
                     '\n'
                     '2. The optional argument *i* defaults to "-1", so that '
                     'by default\n'
                     '   the last item jest removed oraz returned.\n'
                     '\n'
                     '3. "remove" podnieśs "ValueError" when *x* jest nie found '
                     'in *s*.\n'
                     '\n'
                     '4. The "reverse()" method modifies the sequence w '
                     'place for\n'
                     '   economy of space when reversing a large sequence.  '
                     'To remind users\n'
                     '   that it operates by side effect, it does nie zwróć '
                     'the reversed\n'
                     '   sequence.\n'
                     '\n'
                     '5. "clear()" oraz "copy()" are included dla consistency '
                     'przy the\n'
                     "   interfaces of mutable containers that don't support "
                     'slicing\n'
                     '   operations (such jako "dict" oraz "set")\n'
                     '\n'
                     '   New w version 3.3: "clear()" oraz "copy()" '
                     'methods.\n',
 'unary': '\n'
          'Unary arithmetic oraz bitwise operations\n'
          '***************************************\n'
          '\n'
          'All unary arithmetic oraz bitwise operations have the same '
          'priority:\n'
          '\n'
          '   u_expr ::= power | "-" u_expr | "+" u_expr | "~" u_expr\n'
          '\n'
          'The unary "-" (minus) operator uzyskajs the negation of its '
          'numeric\n'
          'argument.\n'
          '\n'
          'The unary "+" (plus) operator uzyskajs its numeric argument '
          'unchanged.\n'
          '\n'
          'The unary "~" (invert) operator uzyskajs the bitwise inversion of '
          'its\n'
          'integer argument.  The bitwise inversion of "x" jest defined as\n'
          '"-(x+1)".  It only applies to integral numbers.\n'
          '\n'
          'In all three cases, jeżeli the argument does nie have the proper '
          'type, a\n'
          '"TypeError" exception jest podnieśd.\n',
 'while': '\n'
          'The "while" statement\n'
          '*********************\n'
          '\n'
          'The "while" statement jest used dla repeated execution jako long jako '
          'an\n'
          'expression jest true:\n'
          '\n'
          '   while_stmt ::= "while" expression ":" suite\n'
          '                  ["inaczej" ":" suite]\n'
          '\n'
          'This repeatedly tests the expression and, jeżeli it jest true, executes '
          'the\n'
          'first suite; jeżeli the expression jest false (which may be the first '
          'time\n'
          'it jest tested) the suite of the "inaczej" clause, jeżeli present, jest '
          'executed\n'
          'and the loop terminates.\n'
          '\n'
          'A "break" statement executed w the first suite terminates the '
          'loop\n'
          'without executing the "inaczej" clause\'s suite.  A "continue" '
          'statement\n'
          'executed w the first suite skips the rest of the suite oraz goes '
          'back\n'
          'to testing the expression.\n',
 'przy': '\n'
         'The "with" statement\n'
         '********************\n'
         '\n'
         'The "with" statement jest used to wrap the execution of a block '
         'with\n'
         'methods defined by a context manager (see section *With Statement\n'
         'Context Managers*). This allows common '
         '"try"..."except"..."finally"\n'
         'usage patterns to be encapsulated dla convenient reuse.\n'
         '\n'
         '   with_stmt ::= "with" with_item ("," with_item)* ":" suite\n'
         '   with_item ::= expression ["as" target]\n'
         '\n'
         'The execution of the "with" statement przy one "item" proceeds as\n'
         'follows:\n'
         '\n'
         '1. The context expression (the expression given w the '
         '"with_item")\n'
         '   jest evaluated to obtain a context manager.\n'
         '\n'
         '2. The context manager\'s "__exit__()" jest loaded dla later use.\n'
         '\n'
         '3. The context manager\'s "__enter__()" method jest invoked.\n'
         '\n'
         '4. If a target was included w the "with" statement, the return\n'
         '   value z "__enter__()" jest assigned to it.\n'
         '\n'
         '   Note: The "with" statement guarantees that jeżeli the '
         '"__enter__()"\n'
         '     method returns without an error, then "__exit__()" will '
         'always be\n'
         '     called. Thus, jeżeli an error occurs during the assignment to '
         'the\n'
         '     target list, it will be treated the same jako an error '
         'occurring\n'
         '     within the suite would be. See step 6 below.\n'
         '\n'
         '5. The suite jest executed.\n'
         '\n'
         '6. The context manager\'s "__exit__()" method jest invoked.  If an\n'
         '   exception caused the suite to be exited, its type, value, and\n'
         '   traceback are dalejed jako arguments to "__exit__()". Otherwise, '
         'three\n'
         '   "Nic" arguments are supplied.\n'
         '\n'
         '   If the suite was exited due to an exception, oraz the zwróć '
         'value\n'
         '   z the "__exit__()" method was false, the exception jest '
         'reraised.\n'
         '   If the zwróć value was true, the exception jest suppressed, and\n'
         '   execution continues przy the statement following the "with"\n'
         '   statement.\n'
         '\n'
         '   If the suite was exited dla any reason other than an exception, '
         'the\n'
         '   zwróć value z "__exit__()" jest ignored, oraz execution '
         'proceeds\n'
         '   at the normal location dla the kind of exit that was taken.\n'
         '\n'
         'With more than one item, the context managers are processed jako if\n'
         'multiple "with" statements were nested:\n'
         '\n'
         '   przy A() jako a, B() jako b:\n'
         '       suite\n'
         '\n'
         'is equivalent to\n'
         '\n'
         '   przy A() jako a:\n'
         '       przy B() jako b:\n'
         '           suite\n'
         '\n'
         'Changed w version 3.1: Support dla multiple context expressions.\n'
         '\n'
         'See also: **PEP 0343** - The "with" statement\n'
         '\n'
         '     The specification, background, oraz examples dla the Python '
         '"with"\n'
         '     statement.\n',
 'uzyskaj': '\n'
          'The "uzyskaj" statement\n'
          '*********************\n'
          '\n'
          '   uzyskaj_stmt ::= uzyskaj_expression\n'
          '\n'
          'A "uzyskaj" statement jest semantically equivalent to a *uzyskaj\n'
          'expression*. The uzyskaj statement can be used to omit the '
          'parentheses\n'
          'that would otherwise be required w the equivalent uzyskaj '
          'expression\n'
          'statement. For example, the uzyskaj statements\n'
          '\n'
          '   uzyskaj <expr>\n'
          '   uzyskaj z <expr>\n'
          '\n'
          'are equivalent to the uzyskaj expression statements\n'
          '\n'
          '   (uzyskaj <expr>)\n'
          '   (uzyskaj z <expr>)\n'
          '\n'
          'Yield expressions oraz statements are only used when defining a\n'
          '*generator* function, oraz are only used w the body of the '
          'generator\n'
          'function.  Using uzyskaj w a function definition jest sufficient to '
          'cause\n'
          'that definition to create a generator function instead of a '
          'normal\n'
          'function.\n'
          '\n'
          'For full details of "uzyskaj" semantics, refer to the *Yield\n'
          'expressions* section.\n'}
